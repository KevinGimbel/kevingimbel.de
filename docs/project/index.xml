<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on KevOps</title><link>https://kevingimbel.de/project/</link><description>Recent content in Projects on KevOps</description><generator>Hugo -- gohugo.io</generator><language>en_US</language><lastBuildDate>Thu, 04 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kevingimbel.de/project/index.xml" rel="self" type="application/rss+xml"/><item><title>Mip</title><link>https://kevingimbel.de/project/mip/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/project/mip/</guid><description>mip gets the local IP address by requesting http://httpbin.org/ip (or a custom endpoint) and parsing the returned output.
It has 0 dependencies and only relies on the Rust std lib.
Usage Add the following to Cargo.toml.
[dependencies] mip = &amp;#34;0.4.0 Then use it like
use mip::IP; fn main() { println!(&amp;#34;My IP is {}&amp;#34;, IP::is()); } Or without use fn main() { println!(&amp;#34;My IP is {}&amp;#34;, mip::IP::is()); } Custom Endpoint Instead of using httpbin.</description></item><item><title>Yip</title><link>https://kevingimbel.de/project/yip/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/project/yip/</guid><description>A Rust TCP server that responds with callers&amp;rsquo; IPv4 address
About This server is the counter part to mip. It responds with the callers&amp;rsquo; IP address on request. That&amp;rsquo;s it.
Usage Cargo Run the server with cargo run, then connect to it on port 8111.
Binary Build the binary for your system with cargo.
$ cargo build --release Then copy the binary from target/release/yip to some place in your $PATH. Afterwards the server can be started by running yip.</description></item><item><title>License</title><link>https://kevingimbel.de/project/license/</link><pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/project/license/</guid><description>license is a CLI tool for generation open source license files. It&amp;rsquo;s written in TypeScript and executed with Deno, a secure runtime for JavaScript.
license is the successor of a Golang project of the same name I started years ago and contains more function that I never came around to implement. All features and command can be found on GitHub at kevingimbel/license-cli.
Highlights Search for a license by keywords The example below shows all licenses matching the keyword &amp;ldquo;public-use&amp;rdquo;</description></item></channel></rss>