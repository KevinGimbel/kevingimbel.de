<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://gohugo.io/" version="0.70.0">Hugo</generator><title type="html">nodejs on KevOps</title><link href="https://kevingimbel.de/tags/nodejs/" rel="alternate" type="text/html" title="HTML"/><link href="https://kevingimbel.de/tags/nodejs/index.xml" rel="alternate" type="application/rss+xml" title="RSS"/><link href="https://kevingimbel.de/tags/nodejs/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2020-05-29T15:34:40+02:00</updated><id>https://kevingimbel.de/tags/nodejs/</id><entry><title type="html">Writing NodeJS cli tools</title><link href="https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/?utm_source=atom_feed" rel="related" type="text/html" title="Getting into Performance Measurement"/><link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/?utm_source=atom_feed" rel="related" type="text/html" title="Endless Multi-Dimensional Navigation"/><link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/?utm_source=atom_feed" rel="related" type="text/html" title="A closer look to closure"/><link href="https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/?utm_source=atom_feed" rel="related" type="text/html" title="Passing Arguments in JavaScript"/><link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="related" type="text/html" title="Pure JavaScript slider"/><id>https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/</id><published>2017-01-09T18:02:48+01:00</published><updated>2017-01-09T18:02:48+01:00</updated><content type="html"><![CDATA[<p>Over 2015 and 2016 I got more and more interested in automating my daily workflows with scripts. For this purpose I learned Bash Scripting (or Shell Scripting) and started writing my first scripts to automate repeating tasks, <a href="https://github.com/kevingimbel/vhost">creating apache vhosts</a> files for example. Recently I started exploring how to implement command line tools in NodeJS and this post should give an overview.</p>
<h3 id="shebang">Shebang</h3>
<blockquote>
<p>If you already know what a Shebang is skip to <a href="/writing-nodejs-cli-tools/#writing-a-tiny-node-cli-script">the next section</a></p>
</blockquote>
<p>Shell Scripts always start with a <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">Shebang</a> on the first line. This line is used to indicate which program is used to execute the following script. For Bash scripts the Shebang is <code>#!/bin/bash</code>. What the OS or program loader does when executing the script is the following. Consider this sample script named <code>hello.sh</code></p>
<pre><code>#!/bin/bash
echo &quot;Hello World!&quot;
</code></pre><p>When it is executed from the command line (cli) with <code>./hello.sh</code> the operating system executes the script (<code>echo &quot;Hello World!&quot;</code>) with <code>/bin/bash</code>. Equally, you could run <code>/bin/bash ./hello.sh</code>. When programming a bash script you can also set it to exit on every error, either with <code>set -e</code> or with a shebang similar to <code>#!/bin/bash -e</code>. The screenshot below demonstrates the difference when running a invalid shell script <code>bad.sh</code>.</p>

<figure >
  

    <img src="/images/posts/2017/node-cli/shell-shebang-example.png"
      alt="Executing a invalid bash script without shebang and with shebang and -e flag"
       />
    
  
  <figcaption>
    <p>
      Executing a invalid bash script without shebang and with shebang and -e flag
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>As you can see without the <code>#!/bin/bash -e</code> shebang the script will execute even after an error occurred - this might not be intended behavior. Anyway, the topic of this post is node and the Shebang in node is essential. NodeJS Scripts are JavaScript and cannot be run - like shell scripts - without an Shebang to tell the system to invoke them with node. The NodeJS Shebang looks a bit different and specifies the &ldquo;environment&rdquo; or <code>env</code> with <code>/usr/bin/env</code>. The Shebang then reads <code>#!/usr/bin/env node</code>. Without the Shebang NodeJS scripts will fail immediately after being invoked as seen in the following screenshot.</p>

<figure >
  

    <img src="/images/posts/2017/node-cli/node-without-and-with-shebang.png"
      alt="Node Script executed with and without shebang"
       />
    
  
  <figcaption>
    <p>
      Node Script executed with and without shebang
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>While it is not necessarily needed for scripts written in in Shell/Bash the Shebang cannot be omitted from NodeJS scripts intended to be run as command line program.</p>
<p>Well, that has been a fun excursion into the world of shell scripting. Back to node!</p>
<h3 id="writing-a-tiny-node-cli-script">Writing a tiny node cli script</h3>
<p>Since we now know how to use a Shebang and how to invoke out Node scripts from the command line we may write a script. Let&rsquo;s keep it simple. We will greet the person executing the script.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">#!/usr/bin/env node
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">sayHello</span> <span style="color:#f92672">=</span> () =&gt; {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`Hello, </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">USER</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>)
}

<span style="color:#a6e22e">sayHello</span>()
</code></pre></div><p>Let&rsquo;s save the script and run it with <code>$ node hello.js</code> from the command line.</p>

<figure >
  

    <img src="/images/posts/2017/node-cli/node-running-hello-js.png"
      alt="Running the hello.js script"
       />
    
  
  <figcaption>
    <p>
      Running the hello.js script
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>Now that&rsquo;s interesting: The script greets the currently logged-in user! That&rsquo;s the case because we make use of the <code>process</code> variable which holds information about the current environment - the <code>env</code> object for example holds your environment variables. Add a new function to <code>hello.js</code> to see the output.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">printEnv</span> <span style="color:#f92672">=</span> () =&gt; {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>)
}

<span style="color:#a6e22e">printEnv</span>()
</code></pre></div><p>You will see the <code>USER</code> variable is part of the environment object and holds the name of the logged-in user. This way node scripts can access terminal variables and use them. Run <code>export _test=123</code> and then <code>node hello.js</code> - <code>_test</code> is now part of the environment. By using the Environment we can make a script execute different tasks depending on the environment, as seen in the next snippet.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">log</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">message</span>, <span style="color:#a6e22e">level</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>) =&gt; {
  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">NODE_ENV</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;production&#39;</span>) {
    <span style="color:#a6e22e">writeLogFile</span>(<span style="color:#a6e22e">message</span>, <span style="color:#a6e22e">level</span>)
  } <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">message</span>)
  }
}

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">writeLogFile</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">message</span>, <span style="color:#a6e22e">level</span>) =&gt; {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#e6db74">&#39;Not implemented&#39;</span>)
  <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>)
}

<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;This is a test!&#34;</span>)
</code></pre></div><p>Here we have a log function which either runs the <code>writeLogFile</code> function when in production mode or logs to the console if we are in any other mode (development for example.)</p>

<figure >
  

    <img src="/images/posts/2017/node-cli/node-using-process-environment.png"
      alt="Making use of the environment in a node cli script"
       />
    
  
  <figcaption>
    <p>
      Making use of the environment in a node cli script
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>As you can see in the screenshot depending on the <code>NODE_ENV</code> variable a different function is executed. The environment can be set inline (<code>$ export NODE_ENV=production</code>) for the duration of the shell session or it can be set permanent, e.g. by adding it to the shell runtime file (<code>~/.zshrc</code> or <code>~/.bashrc</code>). You may also noticed the <code>process.exit(1)</code> inside the <code>writeLogFile</code> function. The <code>exit</code> function enables us to use exit codes to indicate if our script ended successful or not to other processes. If a script exits with <code>0</code> it was successful, everything else is considered an error. To see how a script exits you can run <code>echo $?</code> inside a terminal.</p>
<p>You can read more about exit codes in <a href="http://www.tldp.org/LDP/abs/html/exit-status.html">the resources of TLDP</a>.</p>
<p>So far we learned that Node CLI scripts:</p>
<ul>
<li>need a shebang, <code>#!/usr/bin/env node</code></li>
<li>are written in regular JavaScript</li>
<li>can access the environment</li>
<li>can exit using <code>process.exit(exit_code)</code></li>
<li>can utilize lots of Node packages</li>
</ul>
<p>And that&rsquo;s it for today. All the example scripts are <a href="https://github.com/kevingimbel/blog-node-cli-tools-data">available on GitHub</a>.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/nodejs" term="nodejs" label="nodejs"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/nodejs" term="nodejs" label="nodejs"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/tags/cli" term="cli" label="cli"/></entry><entry><title type="html">Ghost in the shell</title><link href="https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/</id><published>2013-10-16T00:00:00+00:00</published><updated>2013-10-16T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Finally <a href="http://ghost.org">Ghost</a> launched to the public! I waited for this CMS since I first heard of, at this time my blog was running on WordPress which always felt overloaded. WordPress has a lot of functions and stuff I don&rsquo;t need when publishing a few articles a month to the Internet. However, I switched to Jekyll as you may know and now there is Ghost. It felt like it&rsquo;d be my birthday while unpacking the *.zip file. Anyway, I want to write a small installation guide, tell you something about my first impressions and how theming with Ghost works.</p>
<p>Ghost runs on <a href="http://nodejs.org">Node.js</a> which is basically a installable version of <a href="https://code.google.com/p/v8/">Google Chrome&rsquo;s v8 JavaScript Engine</a>, in other words Ghost doesn&rsquo;t use PHP or Ruby to run it just needs a Node Process.</p>
<h3 id="installing-nodejs">Installing Node.js</h3>
<p>First of all you have to install Node.js from <a href="http://nodejs.org/">http://nodejs.org/</a>. Afterwards go back to your terminal and run the following</p>
<h3 id="installing-ghost">Installing Ghost</h3>
<p>Now you need to sign-up and download the Ghost source code from <a href="https://ghost.org/">https://ghost.org/</a>. Unpack the zip into the directory of your choice (mine is <code>var/www/</code>), open a terminal, navigate to the directory and enter the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># prefix with sudo on Ubuntu!</span>
$ npm install --production
</code></pre></div><p>After the installation process is finished run <code>$ npm start</code> to start the Node.js Server. Your brand-new Ghost site should now be running on 127.0.0.1:2368.</p>
<p>If you see the Ghost site navigate to 127.0.0.1:2368/ghost and sign-up (again) for your own local Ghost installation. You can, in fact, ignore the eMail warnings (or <a href="http://docs.ghost.org/mail">read this to set up your eMail Account</a>).
So far your Ghost page is running locally and you can start writing posts.</p>
<h3 id="themes">Themes</h3>
<p>Themes in Ghost are something completely new for me. They&rsquo;re using <a href="http://handlebarsjs.com/">Handlebars.js</a> which looks like <a href="http://docs.shopify.com/themes/liquid-basics">Liquid</a> used by Jekyll on first sight.</p>
<p>After I wrapped my head around Handlebars and the Ghost default Theme &ldquo;Casper&rdquo; I found it easy to manipulate and build my first Theme.
Basically Ghost can work with 3 layout files: post.hbs, default.hbs and index.hbs - they&rsquo;re pretty self-explaining though.</p>
<h4 id="indexhbs">index.hbs</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{{#post }}
  &lt;<span style="color:#f92672">article</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;post&#34;</span>&gt;
    &lt;<span style="color:#f92672">hgroup</span>&gt;
      &lt;<span style="color:#f92672">h2</span>&gt;{{{title}}}&lt;/<span style="color:#f92672">h2</span>&gt;
      {{#if author}}
        written by {{author.name}}
      {{/if}}
    &lt;/<span style="color:#f92672">hgroup</span>&gt;
  &lt;/<span style="color:#f92672">article</span>&gt;
{{/post}}
{% endraw %}
</code></pre></div><p>The above snippet simply outputs the title of the post and the author&rsquo;s name if one is given. A pretty neat thing about Handlebars is, that everything between <code>{{#post}}</code> and &lsquo;{{//post}}&rsquo; automatically gets pulled from the post it belongs to. As I mentioned above this looks a lot like Liquid as you can see in the <a href="http://kevingimbel.com/jekyll-guide/layouts/">first code example here</a>.</p>
<p>I&rsquo;ll not get into detail on how to style <code>post.hbs</code> because it is nearly the same. <code>default.hbs</code>, however, is a bit more interesting.</p>
<h4 id="defaulthbs">default.hbs</h4>
<p>First I thought this would be the &ldquo;default&rdquo; layout if no format is given (like in Jekyll) but it&rsquo;s a lot more important: <code>default.hbs</code> holds the entirely page and all the posts get included into it!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">html</span>&gt;
  &lt;<span style="color:#f92672">head</span>&gt;
    ...
  &lt;/<span style="color:#f92672">head</span>&gt;
  &lt;<span style="color:#f92672">body</span>&gt;
    # build your header and stuff here
    {}{{body}}{}
    # build your footer here
  &lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>The <code>body</code> handlebar is the point where another pages content gets included. To tell a layout that it will be included into another file you simply write <code>{{!&lt; default}}</code> in the first line of it.</p>
<p>This is a pretty handy feature I think. So far Ghost and building Themes for it is pretty easy and handy to use. You have to learn Handlebars to get the full potential out of it but that&rsquo;s OK I&rsquo;d say. However, I&rsquo;ll now show off some things that I don&rsquo;t like or found confusing (still locally, deploying to a server comes later!)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{{! Ghost outputs important scripts and data with this tag }}
{{ghost_foot}}
{% endraw %}
</code></pre></div><p>So Ghost, please tell me more about &ldquo;important data and scripts&rdquo;. I haven&rsquo;t found any file that contains this data or scripts and I wasn&rsquo;t sure if this tag is only needed for the Casper Theme or if it&rsquo;s important for other stuff. In the end I just left it there.</p>
<p>Beside this tag I found another, kinda self-explaining tag: <code>{{pagination}}</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{{!! After all the posts, we have the previous/next pagination links }}
{{pagination}}
{% endraw %}
</code></pre></div><p>Cool, so Ghost builds me a pagination! But wait, I&rsquo;d like to style it. So&hellip;where&rsquo;s the pagination layout? I searched it inside my themes directory (because I copy/pasted the Casper Theme to modify it) but there was no file that holds the pagination. After searching around for quite some time I found it inside <code>core/server/helper/tpl</code> - I have no idea why this helper is here. However, it&rsquo;s a <code>*.bhs</code> file so customizing it is the same as with any other file.</p>
<p>That&rsquo;s it on themes and structure for now, let&rsquo;s see how we get this Baby online!</p>
<h3 id="deploying">Deploying</h3>
<p>First of all you need two things:</p>
<ul>
<li>Time</li>
<li>A server
<ul>
<li>with SSH connection via Terminal</li>
<li>Node.js</li>
<li>Daemons</li>
<li>sqlite3</li>
</ul>
</li>
</ul>
<p>In before, I couldn&rsquo;t make Ghost running on my server and I&rsquo;m not sure why this is so. The Service is running, the logs say it&rsquo;s running, the subdomain works (checked with a index.html inside the Ghost Directory) but for whatever reasons nothing gets compiled.</p>
<p>I could tell you what exactly I did on my server but I&rsquo;d rather like to redirect you to some posts explaining the installation (all on <a href="https://uberspace.de">Uberspace.de</a> but most of it should work with your server, too).</p>
<ul>
<li>(DE) <a href="https://uberspace.de/dokuwiki/cool:ghost">Uberspace Wiki</a></li>
<li>(EN) <a href="http://christophvoigt.com/how-to-setup-ghost-on-uberspace-de/">How to Setup Ghost on Uberspace.de</a> by Christoph Voigt</li>
<li>(EN) <a href="http://ghost.jotbe.io/setting-up-ghost-on-uberspace/">Setting up Ghost in a Sub-Directory</a> by Jan Beilicke</li>
</ul>
<p>What I can tell so far is: If you&rsquo;re not familiar with working over SSH and logged-in via your terminal setting up Ghost is a pain in the ass. I&rsquo;m ashamed to say I wasn&rsquo;t able to get it running even thought the service itself <em>is</em> running as my Log-Files tell me.</p>
<p>The more I worked with Ghost on the server side one thing came to my mind: It&rsquo;s not just a blogging Software, it&rsquo;s made to sell hosting. As some other people already said it is a kinda smart decision to write a great Blog System that is not-so-easy to install so you can sell your own Hosting Services with it.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Non-Tech People will not be able to install Ghost on their servers, Ghost requires Node.js which isn&rsquo;t a default installation on servers yet (even though some have it), Ghost is at least locally fast and easy to setup. The Theme system with Handlebars is also pretty nice and they have the most beautiful back-end I saw so far.
Regardless of all the good aspects, overall I&rsquo;m disappointed by Ghost. I&rsquo;ll stick to Jekyll and GitHub Hosting. I&rsquo;ll try to deploy Ghost and work around with it just for the sake of learning something new but as engine to build my Blog it has not convinced me so far.</p>
<p>You may have noticed that the Title is a reference to <a href="http://de.wikipedia.org/wiki/Ghost_in_the_Shell">Ghost in the Shell</a> which is a great Manga from 1989.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/backend" term="backend" label="backend"/><category scheme="https://kevingimbel.de/tags/cms" term="cms" label="cms"/><category scheme="https://kevingimbel.de/tags/nodejs" term="nodejs" label="nodejs"/></entry></feed>