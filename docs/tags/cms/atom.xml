<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.63.1">Hugo</generator><title type="html"><![CDATA[cms on KevOps]]></title>
    
    
    
            <link href="https://kevingimbel.de/tags/cms/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://kevingimbel.de/tags/cms/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://kevingimbel.de/tags/cms/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2020-01-24T19:56:58+01:00</updated>
    
    
    
    
        <id>https://kevingimbel.de/tags/cms/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Hugo: ignore _index.md in list templates]]></title>
            <link href="https://kevingimbel.de/blog/2020/01/hugo-ignore-_index.md-in-list-templates/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2020/01/hugo-compare-dates-to-flag-old-content/?utm_source=atom_feed" rel="related" type="text/html" title="Hugo: compare dates to flag old content" />
                <link href="https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/?utm_source=atom_feed" rel="related" type="text/html" title="Bullgit loves Jekyll" />
                <link href="https://kevingimbel.de/blog/2018/09/mastodon-embed-shortcode-for-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Mastodon Embed Shortcode for hugo" />
                <link href="https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/?utm_source=atom_feed" rel="related" type="text/html" title="Deploy a static site with git" />
                <link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Farewell Jekyll, Hello Hugo" />
            
                <id>https://kevingimbel.de/blog/2020/01/hugo-ignore-_index.md-in-list-templates/</id>
            
            
            <published>2020-01-03T00:00:00+00:00</published>
            <updated>2020-01-03T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>While creating my new website I also added more sections, namely a <a href="/blog/">blog</a>, <a href="/photography/">photography</a>, and <a href="/art/">art</a> section. All of these use list templates and render &ldquo;article&rdquo;-like content previews. I wanted to add some content to these lists and Hugo has a special file named <code>_index.md</code> for that. This file can be used to create index pages for lists.</p>
<p>When I did that I somehow also included the index files in the post listings which was not what I wanted, so I added a if statement to my <code>article-preview.html</code> template that is used to render article previews.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{ if ne .File.LogicalName &#34;_index.md&#34; }}
&lt;<span style="color:#f92672">article</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;article article--in-list&#34;</span> <span style="color:#a6e22e">aria-labelledby</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;article-heading-{{ .File.UniqueID }}&#34;</span>&gt;
    [...]
&lt;/<span style="color:#f92672">article</span>&gt;
{{ end }}
</code></pre></div><p><code>{{ if ne .File.LogicalName &quot;_index.md&quot; }}</code> checks if the file name is not <code>_index.md</code> - this will ignore all <code>_index.md</code> files from being rendered with the <code>article-preview.html</code> template.</p>
<p>It does the job but feels wrong and hacky, so if you know a better solution, please let me know on <a href="https://github.com/kevingimbel/kevingimbel.de" title="Report issue on GitHub">GitHub</a> or <a href="https://bullgit.party/@kevin" title="Contact me on Mastodon">Mastodon</a>.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/hugo" term="hugo" label="hugo" />
                             
                                <category scheme="https://kevingimbel.de/tags/cms" term="cms" label="cms" />
                             
                                <category scheme="https://kevingimbel.de/tags/static_website" term="static_website" label="static_website" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Hugo: compare dates to flag old content]]></title>
            <link href="https://kevingimbel.de/blog/2020/01/hugo-compare-dates-to-flag-old-content/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/?utm_source=atom_feed" rel="related" type="text/html" title="Bullgit loves Jekyll" />
                <link href="https://kevingimbel.de/blog/2018/09/mastodon-embed-shortcode-for-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Mastodon Embed Shortcode for hugo" />
                <link href="https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/?utm_source=atom_feed" rel="related" type="text/html" title="Deploy a static site with git" />
                <link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Farewell Jekyll, Hello Hugo" />
                <link href="https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/?utm_source=atom_feed" rel="related" type="text/html" title="Ghost in the shell" />
            
                <id>https://kevingimbel.de/blog/2020/01/hugo-compare-dates-to-flag-old-content/</id>
            
            
            <published>2020-01-02T00:00:00+00:00</published>
            <updated>2020-01-02T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>With the recent redesign of my website I also wanted to add a note to old articles. The IT world is changing fast and information can quickly be outdated, so I decided to add an automatically generated note to every post that is older than 4 years. Using the Hugo <a href="https://gohugo.io/functions/math/">Math</a> function and <a href="https://gohugo.io/variables/page/#page-variables">Date</a> values it can be accomplished in automated-enough fashion.</p>
<h3 id="partial">Partial</h3>
<p>First I created a new partial named <code>single-header.html</code> and added it to all my <code>single.html</code> templates. The file contains the following code which I will explain step by step.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{ $now := int (now.Format &#34;2006&#34;) }}
{{ $article_age := sub $now (int (.Date.Format &#34;2006&#34;)) }}

{{ if gt $article_age 4 }}
&lt;<span style="color:#f92672">section</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;age-note&#34;</span>&gt;
    &lt;<span style="color:#f92672">h2</span>&gt;ATTENTION!&lt;/<span style="color:#f92672">h2</span>&gt;
    &lt;<span style="color:#f92672">p</span>&gt;This article is over 4 years old, it may be outdated!&lt;/<span style="color:#f92672">p</span>&gt;
&lt;/<span style="color:#f92672">section</span>&gt;
{{ end }}
</code></pre></div><p>The magic all happens in the first 2 lines. First the &ldquo;now&rdquo; time is retrieved, this is the build time - not the current time when the page is loaded in the browser. Then we calculate the different using the Hugo built-in  <code>sub</code> function, giving the two dates in year format (<code>2020</code>, <code>2015</code>, &hellip;) as arguments.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$article_age :<span style="color:#f92672">=</span> sub $now <span style="color:#f92672">(</span>int <span style="color:#f92672">(</span>.Date.Format <span style="color:#e6db74">&#34;2006&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span>
<span style="color:#75715e"># For an aricle written in 2013 the code looks like</span>
<span style="color:#75715e"># $article_age = sub 2020 2013</span>
</code></pre></div><p>After filling in all variables and doing the subtraction, the <code>$article_age</code> variable contains an integer, like <code>7</code> or <code>3</code>. The next line of code checks if the number <code>$article_age</code> is greater than 4, which means the article is older than 4 years. If this is true, the note is displayed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{ if gt $article_age 4 }}
    $article_age is greater than 4
{{ end }}
</code></pre></div><p>Because we are doing a <code>gt</code> (greater than) comparison only articles that are older than 4 years (5 and more) will be flagged.</p>
<h2 id="see-it-in-action">See it in action</h2>
<p>A live example can be seen on my page, for example in the <a href="/blog/2013/08/hello-world/">oldest post &ldquo;Hello world&rdquo;</a> or in any post from <a href="http://localhost:1313/blog/#2015">2015 and before</a>.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/hugo" term="hugo" label="hugo" />
                             
                                <category scheme="https://kevingimbel.de/tags/cms" term="cms" label="cms" />
                             
                                <category scheme="https://kevingimbel.de/tags/static_website" term="static_website" label="static_website" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Bullgit loves Jekyll]]></title>
            <link href="https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/?utm_source=atom_feed" rel="related" type="text/html" title="Ghost in the shell" />
            
                <id>https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/</id>
            
            
            <published>2014-01-06T00:00:00+00:00</published>
            <updated>2014-01-06T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>After having a static HTML Page for about 6 months, we at <a href="http://bullg.it">bullgit</a> just switched to a brand-new Jekyll page that uses the GitHub API to display all our repos as well as a list of members with images and links and there are a few reasons why we made this switch:</p>
<ul>
<li>Jekyll is built-in GitHub pages</li>
<li>Jekyll is easy-to-learn and easy to maintain</li>
<li>No-Database handling of Data (see <a href="https://github.com/bullgit/bullgit.github.io/blob/master/_data/members.yml">the list of members we use</a>)</li>
<li>Everyone can clone the repo and run it locally</li>
</ul>
<p>So basically, as soon as you have a Project on GitHub or an organization like <a href="http://twitter.com/bullgit">bullgit</a> you can use the power of Jekyll to make your page easy to use and easy to change even for new members. We don&rsquo;t even use the Blog function of Jekyll (yet), we just have a front-page rendered with some Ajax to load all the Repos.</p>
<h3 id="the-basic-jekyll-code">The basic Jekyll code</h3>
<p>As I always like to remember in Jekyll posts: Jekyll builds static HTML pages but isn&rsquo;t that static at all. There is a lot of dynamics because files can be included into others, layouts are defined through the <a href="http://kevingimbel.com/jekyll-guide/first-page/">Front Matter</a> and you&rsquo;re basically free to create whatever Front Matter and Data you want.</p>
<p>The <code>index.html</code> looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">    --<span style="color:#e6db74">-
</span><span style="color:#e6db74">   </span><span style="color:#e6db74"> </span><span style="color:#e6db74">layout: front-page</span>
    <span style="color:#66d9ef">title</span>: 
    ---
</code></pre></div><p>That&rsquo;s it, the whole structure is loaded from a Layout file based in <code>/_layouts/</code>, this file is called <code>front-page.html</code>. This <strong>only</strong> holds the <code>&lt;body&gt;</code> content for the front-page, the header and footer are - equal like you&rsquo;d do it in PHP or other languages - included from <code>header.html</code> and <code>footer.html</code> on every page. So even though it is &ldquo;static&rdquo;, when you change <code>header.html</code> all files will get updated and the new header is available everywhere.</p>
<p>You can work like this, with <code>{% include file.html %}</code> and Layouts in the Front Matter for every file and kind of content you like. It is even possible to create a <a href="http://kevingimbel.com/atom.xml">atom.xml</a> that serves people wo like to subscribe to your posts.</p>
<p>However, back to the bullgit. I discovered a awesome feature about Jekyll I didn&rsquo;t knew before: Data handling. When you create a folder called <code>_data</code> in your root directory you can put every kind of text-based data inside a *.yml file and load it in every page of your site.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#75715e"># let&#39;s assume this is members.yml</span>
- <span style="color:#66d9ef">name</span>: Tim
  <span style="color:#66d9ef">twitter</span>: timpietrusky
  
  <span style="color:#66d9ef">github</span>: timpietrusky
  <span style="color:#66d9ef">codepen</span>: timpietrusky
  <span style="color:#66d9ef">gravatar</span>: http://www.gravatar.com/avatar/13a9550a854af911366d9f5deb785cd6?s=<span style="color:#ae81ff">200</span>

- <span style="color:#66d9ef">name</span>: Max
  <span style="color:#66d9ef">twitter</span>: MyXoToD
  
  <span style="color:#66d9ef">github</span>: myxotod
  <span style="color:#66d9ef">codepen</span>: MyXoToD
  <span style="color:#66d9ef">gravatar</span>: http://www.gravatar.com/avatar/a284083f6f4f9446723adf3b97b90151?s=<span style="color:#ae81ff">200</span>

- <span style="color:#66d9ef">name</span>: Kevin
  <span style="color:#66d9ef">twitter</span>: _kevinatari
  
  <span style="color:#66d9ef">github</span>: kevingimbel
  <span style="color:#66d9ef">codepen</span>: kevingimbel
  <span style="color:#66d9ef">gravatar</span>: http://www.gravatar.com/avatar/6d391d8c3a528122f3f6c991821350ac?s=<span style="color:#ae81ff">200</span>  
</code></pre></div><p>After the file is saved you can loop through its content like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{% for member in site.data.member %}
    &lt;<span style="color:#f92672">h3</span>&gt;{{ member.name }}&lt;/<span style="color:#f92672">h3</span>&gt;
    &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://twitter.com/{{member.twitter}}&#34;</span>&gt;{{ member.twitter }}&lt;/<span style="color:#f92672">a</span>&gt;
    &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ member.url }}&#34;</span>&gt; {{ member.url }} &lt;/<span style="color:#f92672">a</span>&gt;
    &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://codepen.io/{{ member.codepen }}&#34;</span>&gt;{{ member.codepen }}&lt;/<span style="color:#f92672">a</span>&gt;
{% endfor %}
{% endraw %}
</code></pre></div><p>That&rsquo;s it, the result is a <code>h3</code> for every member holding its name and 3 links holding the Twitter, Personal Website and CodePen URL, this way new members can be added easily - only one of us has to edit the <code>members.yml</code> file and the page gets updated a few seconds after.</p>
<h3 id="github-api">GitHub API</h3>
<p>As I mentioned above we&rsquo;re using GitHub&rsquo;s API to get all our repos on the front-page. This was pretty easy to be honest, even for a JavaScript and API beginner like I am.</p>
<p>As I always do I avoided jQuery for this because I think it is a waste of Requests to load jQuery if I only use a minimal of its functionality. So I wrote the Ajax request by hand. The comments describe what goes one.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#75715e">// Loading a new Ajax Request and saving it
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// to the variable xml
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">xml</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">XMLHttpRequest</span>();

    <span style="color:#75715e">// opening the connection to GitHub&#39;s REPO API
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Method: GET
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Source 
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Asynchronous: false 
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// For some reasons asynch: true results doubled results
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">xml</span>.<span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;GET&#34;</span>, <span style="color:#e6db74">&#34;https://api.github.com/orgs/bullgit/repos&#34;</span>, <span style="color:#66d9ef">false</span>);

    <span style="color:#75715e">// when the state changed (data received )
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">xml</span>.<span style="color:#a6e22e">onreadystatechange</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
        <span style="color:#75715e">// controller for the grid system
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">j</span>;
        <span style="color:#75715e">// we take the response
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">xml</span>.<span style="color:#a6e22e">responseText</span>;
        <span style="color:#75715e">// put it into a new var and parse it 
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">res</span>);

        
        <span style="color:#75715e">// then run over ALL THE BULLGIT
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// running reverse because github goes from oldest to newest
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span> ) {

            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">url</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;homepage&#39;</span>] <span style="color:#f92672">===</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;homepage&#39;</span>] <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;&#39;</span> )
                      <span style="color:#f92672">?</span> <span style="color:#e6db74">&#39;https://github.com/&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;full_name&#39;</span>] 
                      <span style="color:#f92672">:</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;homepage&#39;</span>]; 

            <span style="color:#75715e">// if it&#39;s the first item
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">===</span> <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) {
                <span style="color:#75715e">// create a layout for the first featured project
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">layout</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&lt;article class=&#39;content--wrap  featured--article&#39;&gt;&#34;</span> <span style="color:#f92672">+</span>
                         <span style="color:#e6db74">&#34;&lt;h2&gt;&#34;</span> <span style="color:#f92672">+</span>
                            <span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;&lt;a href=&#34;%s&#34;&gt;%s&lt;/a&gt;&#39;</span>, <span style="color:#a6e22e">url</span>, <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;name&#39;</span>]) <span style="color:#f92672">+</span> 
                        <span style="color:#e6db74">&#34;&lt;/h2&gt;&#34;</span> <span style="color:#f92672">+</span>
                            <span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;&lt;p&gt;%s&lt;/p&gt;&#39;</span>, <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;description&#39;</span>]) <span style="color:#f92672">+</span>
                         <span style="color:#e6db74">&#34;&lt;/article&gt;&#34;</span>;

                <span style="color:#a6e22e">output</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#34;[data-js=featured-project]&#34;</span>); 

                <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;               
            } <span style="color:#66d9ef">else</span> {

              <span style="color:#75715e">// output = document.querySelector(&#34;[data-js=old-projects]&#34;);
</span><span style="color:#75715e"></span>
            <span style="color:#75715e">// create a layout for all other projects
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">layout</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&lt;article class=&#39;project&#39;&gt;&#34;</span> <span style="color:#f92672">+</span>
                         <span style="color:#e6db74">&#34;&lt;h3 class=&#39;project--headline&#39;&gt;&#34;</span> <span style="color:#f92672">+</span>
                            <span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;&lt;a href=&#34;%s&#34;&gt;%s&lt;/a&gt;&#39;</span>, <span style="color:#a6e22e">url</span>, <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;name&#39;</span>]) <span style="color:#f92672">+</span> 
                        <span style="color:#e6db74">&#34;&lt;/h3&gt;&#34;</span> <span style="color:#f92672">+</span>
                             <span style="color:#e6db74">&#34;&lt;p&gt;&#34;</span><span style="color:#f92672">+</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;description&#39;</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&lt;/p&gt;&#34;</span> <span style="color:#f92672">+</span>
                         <span style="color:#e6db74">&#34;&lt;/article&gt;&#34;</span>;

                <span style="color:#75715e">// select an output @TODO[Kevin]: Re-think logic...
</span><span style="color:#75715e"></span>              <span style="color:#66d9ef">switch</span>(<span style="color:#a6e22e">j</span>) {
                <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>
                  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">output</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#34;[data-column=&#39;1&#39;]&#34;</span>);
                  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;case 1: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; --- &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;name&#39;</span>])
                  <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span>;
                  <span style="color:#66d9ef">break</span>;
                <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span>
                  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">output</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#34;[data-column=&#39;2&#39;]&#34;</span>);
                  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;case 2: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; --- &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;name&#39;</span>])
                  <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                  <span style="color:#66d9ef">break</span>;
                <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
                  <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
              }  
            }       
            <span style="color:#75715e">// and adding our brand-new bullshit to it.
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">output</span>.<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">layout</span>;
        }
    };

    <span style="color:#75715e">// sending data
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">xml</span>.<span style="color:#a6e22e">send</span>();
</code></pre></div><p>Another piece if JavaScript is used to add the Script after the DOM is fully loaded, as suggested by <a href="http://twitter.com/timpietrusky">Tim</a> to speed up the overall loading speed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#75715e">// Add a script element as a child of the body
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">downloadJSAtOnload</span>() {
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">element</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;script&#39;</span>);
        <span style="color:#a6e22e">element</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;assets/js/main.js&#39;</span>;
        document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">element</span>);
    }

    <span style="color:#75715e">// Check for browser support of event handling capability
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (window.<span style="color:#a6e22e">addEventListener</span>) {
        window.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#34;load&#34;</span>, <span style="color:#a6e22e">downloadJSAtOnload</span>, <span style="color:#66d9ef">false</span>);
    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (window.<span style="color:#a6e22e">attachEvent</span>) {
        window.<span style="color:#a6e22e">attachEvent</span>(<span style="color:#e6db74">&#34;onload&#34;</span>, <span style="color:#a6e22e">downloadJSAtOnload</span>);
    } <span style="color:#66d9ef">else</span> {
        window.<span style="color:#a6e22e">onload</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">downloadJSAtOnload</span>;
    }
</code></pre></div><p>Those are just a few of the benefits of Jekyll and, because we&rsquo;re a &ldquo;GitHub only&rdquo; organization we switched so it&rsquo;s easier to scale the site. Building a Blog would now only take a some time because we&rsquo;re already running Jekyll and just have to add one more layout. That&rsquo;s it, the basics of our brand-new <a href="http://bullg.it">bullgit</a> page.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/cms" term="cms" label="cms" />
                             
                                <category scheme="https://kevingimbel.de/tags/static_website" term="static_website" label="static_website" />
                             
                                <category scheme="https://kevingimbel.de/tags/jekyll" term="jekyll" label="jekyll" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Ghost in the shell]]></title>
            <link href="https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/</id>
            
            
            <published>2013-10-16T00:00:00+00:00</published>
            <updated>2013-10-16T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Finally <a href="http://ghost.org">Ghost</a> launched to the public! I waited for this CMS since I first heard of, at this time my blog was running on WordPress which always felt overloaded. WordPress has a lot of functions and stuff I don&rsquo;t need when publishing a few articles a month to the Internet. However, I switched to Jekyll as you may know and now there is Ghost. It felt like it&rsquo;d be my birthday while unpacking the *.zip file. Anyway, I want to write a small installation guide, tell you something about my first impressions and how theming with Ghost works.</p>
<p>Ghost runs on <a href="http://nodejs.org">Node.js</a> which is basically a installable version of <a href="https://code.google.com/p/v8/">Google Chrome&rsquo;s v8 JavaScript Engine</a>, in other words Ghost doesn&rsquo;t use PHP or Ruby to run it just needs a Node Process.</p>
<h3 id="installing-nodejs">Installing Node.js</h3>
<p>First of all you have to install Node.js from <a href="http://nodejs.org/">http://nodejs.org/</a>. Afterwards go back to your terminal and run the following</p>
<h3 id="installing-ghost">Installing Ghost</h3>
<p>Now you need to sign-up and download the Ghost source code from <a href="https://ghost.org/">https://ghost.org/</a>. Unpack the zip into the directory of your choice (mine is <code>var/www/</code>), open a terminal, navigate to the directory and enter the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># prefix with sudo on Ubuntu!</span>
$ npm install --production
</code></pre></div><p>After the installation process is finished run <code>$ npm start</code> to start the Node.js Server. Your brand-new Ghost site should now be running on 127.0.0.1:2368.</p>
<p>If you see the Ghost site navigate to 127.0.0.1:2368/ghost and sign-up (again) for your own local Ghost installation. You can, in fact, ignore the eMail warnings (or <a href="http://docs.ghost.org/mail">read this to set up your eMail Account</a>).
So far your Ghost page is running locally and you can start writing posts.</p>
<h3 id="themes">Themes</h3>
<p>Themes in Ghost are something completely new for me. They&rsquo;re using <a href="http://handlebarsjs.com/">Handlebars.js</a> which looks like <a href="http://docs.shopify.com/themes/liquid-basics">Liquid</a> used by Jekyll on first sight.</p>
<p>After I wrapped my head around Handlebars and the Ghost default Theme &ldquo;Casper&rdquo; I found it easy to manipulate and build my first Theme.
Basically Ghost can work with 3 layout files: post.hbs, default.hbs and index.hbs - they&rsquo;re pretty self-explaining though.</p>
<h4 id="indexhbs">index.hbs</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{{#post }}
  &lt;<span style="color:#f92672">article</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;post&#34;</span>&gt;
    &lt;<span style="color:#f92672">hgroup</span>&gt;
      &lt;<span style="color:#f92672">h2</span>&gt;{{{title}}}&lt;/<span style="color:#f92672">h2</span>&gt;
      {{#if author}}
        written by {{author.name}}
      {{/if}}
    &lt;/<span style="color:#f92672">hgroup</span>&gt;
  &lt;/<span style="color:#f92672">article</span>&gt;
{{/post}}
{% endraw %}
</code></pre></div><p>The above snippet simply outputs the title of the post and the author&rsquo;s name if one is given. A pretty neat thing about Handlebars is, that everything between <code>{{#post}}</code> and &lsquo;{{//post}}&rsquo; automatically gets pulled from the post it belongs to. As I mentioned above this looks a lot like Liquid as you can see in the <a href="http://kevingimbel.com/jekyll-guide/layouts/">first code example here</a>.</p>
<p>I&rsquo;ll not get into detail on how to style <code>post.hbs</code> because it is nearly the same. <code>default.hbs</code>, however, is a bit more interesting.</p>
<h4 id="defaulthbs">default.hbs</h4>
<p>First I thought this would be the &ldquo;default&rdquo; layout if no format is given (like in Jekyll) but it&rsquo;s a lot more important: <code>default.hbs</code> holds the entirely page and all the posts get included into it!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">html</span>&gt;
  &lt;<span style="color:#f92672">head</span>&gt;
    ...
  &lt;/<span style="color:#f92672">head</span>&gt;
  &lt;<span style="color:#f92672">body</span>&gt;
    # build your header and stuff here
    {}{{body}}{}
    # build your footer here
  &lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>The <code>body</code> handlebar is the point where another pages content gets included. To tell a layout that it will be included into another file you simply write <code>{{!&lt; default}}</code> in the first line of it.</p>
<p>This is a pretty handy feature I think. So far Ghost and building Themes for it is pretty easy and handy to use. You have to learn Handlebars to get the full potential out of it but that&rsquo;s OK I&rsquo;d say. However, I&rsquo;ll now show off some things that I don&rsquo;t like or found confusing (still locally, deploying to a server comes later!)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{{! Ghost outputs important scripts and data with this tag }}
{{ghost_foot}}
{% endraw %}
</code></pre></div><p>So Ghost, please tell me more about &ldquo;important data and scripts&rdquo;. I haven&rsquo;t found any file that contains this data or scripts and I wasn&rsquo;t sure if this tag is only needed for the Casper Theme or if it&rsquo;s important for other stuff. In the end I just left it there.</p>
<p>Beside this tag I found another, kinda self-explaining tag: <code>{{pagination}}</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{{!! After all the posts, we have the previous/next pagination links }}
{{pagination}}
{% endraw %}
</code></pre></div><p>Cool, so Ghost builds me a pagination! But wait, I&rsquo;d like to style it. So&hellip;where&rsquo;s the pagination layout? I searched it inside my themes directory (because I copy/pasted the Casper Theme to modify it) but there was no file that holds the pagination. After searching around for quite some time I found it inside <code>core/server/helper/tpl</code> - I have no idea why this helper is here. However, it&rsquo;s a <code>*.bhs</code> file so customizing it is the same as with any other file.</p>
<p>That&rsquo;s it on themes and structure for now, let&rsquo;s see how we get this Baby online!</p>
<h3 id="deploying">Deploying</h3>
<p>First of all you need two things:</p>
<ul>
<li>Time</li>
<li>A server
<ul>
<li>with SSH connection via Terminal</li>
<li>Node.js</li>
<li>Daemons</li>
<li>sqlite3</li>
</ul>
</li>
</ul>
<p>In before, I couldn&rsquo;t make Ghost running on my server and I&rsquo;m not sure why this is so. The Service is running, the logs say it&rsquo;s running, the subdomain works (checked with a index.html inside the Ghost Directory) but for whatever reasons nothing gets compiled.</p>
<p>I could tell you what exactly I did on my server but I&rsquo;d rather like to redirect you to some posts explaining the installation (all on <a href="https://uberspace.de">Uberspace.de</a> but most of it should work with your server, too).</p>
<ul>
<li>(DE) <a href="https://uberspace.de/dokuwiki/cool:ghost">Uberspace Wiki</a></li>
<li>(EN) <a href="http://christophvoigt.com/how-to-setup-ghost-on-uberspace-de/">How to Setup Ghost on Uberspace.de</a> by Christoph Voigt</li>
<li>(EN) <a href="http://ghost.jotbe.io/setting-up-ghost-on-uberspace/">Setting up Ghost in a Sub-Directory</a> by Jan Beilicke</li>
</ul>
<p>What I can tell so far is: If you&rsquo;re not familiar with working over SSH and logged-in via your terminal setting up Ghost is a pain in the ass. I&rsquo;m ashamed to say I wasn&rsquo;t able to get it running even thought the service itself <em>is</em> running as my Log-Files tell me.</p>
<p>The more I worked with Ghost on the server side one thing came to my mind: It&rsquo;s not just a blogging Software, it&rsquo;s made to sell hosting. As some other people already said it is a kinda smart decision to write a great Blog System that is not-so-easy to install so you can sell your own Hosting Services with it.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Non-Tech People will not be able to install Ghost on their servers, Ghost requires Node.js which isn&rsquo;t a default installation on servers yet (even though some have it), Ghost is at least locally fast and easy to setup. The Theme system with Handlebars is also pretty nice and they have the most beautiful back-end I saw so far.
Regardless of all the good aspects, overall I&rsquo;m disappointed by Ghost. I&rsquo;ll stick to Jekyll and GitHub Hosting. I&rsquo;ll try to deploy Ghost and work around with it just for the sake of learning something new but as engine to build my Blog it has not convinced me so far.</p>
<p>You may have noticed that the Title is a reference to <a href="http://de.wikipedia.org/wiki/Ghost_in_the_Shell">Ghost in the Shell</a> which is a great Manga from 1989.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                             
                                <category scheme="https://kevingimbel.de/categories/backend" term="backend" label="backend" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/cms" term="cms" label="cms" />
                             
                                <category scheme="https://kevingimbel.de/tags/nodejs" term="nodejs" label="nodejs" />
                            
                        
                    
                
            
        </entry>
    
</feed>
