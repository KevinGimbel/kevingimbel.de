<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://gohugo.io/" version="0.72.0">Hugo</generator><title type="html">development on KevOps</title><link href="https://kevingimbel.de/tags/development/" rel="alternate" type="text/html" title="HTML"/><link href="https://kevingimbel.de/tags/development/index.xml" rel="alternate" type="application/rss+xml" title="RSS"/><link href="https://kevingimbel.de/tags/development/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2020-08-06T14:26:54+02:00</updated><id>https://kevingimbel.de/tags/development/</id><entry><title type="html">Goodbye Ubuntu, Hello Mac</title><link href="https://kevingimbel.de/blog/2016/12/goodbye-ubuntu-hello-mac/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2016/12/gotcha-dockerignore/?utm_source=atom_feed" rel="related" type="text/html" title="Gotcha: dockerignore"/><link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Farewell Jekyll, Hello Hugo"/><link href="https://kevingimbel.de/blog/2015/12/speed-up-your-jekyll-workflow/?utm_source=atom_feed" rel="related" type="text/html" title="Speed up your Jekyll workflow"/><id>https://kevingimbel.de/blog/2016/12/goodbye-ubuntu-hello-mac/</id><published>2016-12-27T15:05:59+01:00</published><updated>2016-12-27T15:05:59+01:00</updated><content type="html"><![CDATA[<p>Christmas came earlier this year! Since my co-workers switched to MacBooks over the year I got a MacBook, too. I got my new PC last year so I was not due to a hardware change for at least another year but - to my luck - I also got a new PC so we all have the same hardware. After three years of Ubuntu and Linux/GNU it&rsquo;s odd to switch to MacOS. While MacOS is closer to Unix-like systems it&rsquo;s still closed and not as open as Ubuntu or other Linux/GNU distributions. Changing Laptops is hard enough but changing operating systems - and changing to a system one has never worked with is a different thing. For documentation and to help others, I would like to document what I noticed when switching and how I got up and running in a week.</p>
<h3 id="dotfiles">~/dotfiles</h3>
<p>I have a <a href="https://github.com/kevingimbel/dotfiles">GitHub repository</a> with dotfiles. By checking out the repository and linking the files I was able to setup my terminal in a few minutes. The repository is not perfect yet and there are unused files which I should - and will - clean-up. Nevertheless without the configs I would have needed to copy the files or re-configure everything by hand.</p>
<h3 id="docker">Docker</h3>
<p>Currently we at <a href="https://synoa.de">Synoa</a> move projects to <a href="https://docker.com">Docker</a> for local development and - in a selected way - for production, too. The basic benefits of Docker for Development show right when creating the first containers - one can replicate the production servers without a lot of hassle: operating systems and software versions can be defined on a per-project basis. One project is build on PHP 5.6, the other on 7.0 - with Docker we don&rsquo;t need to maintain different PHP versions on computers. It&rsquo;s just a small benefit but it&rsquo;s also a &ldquo;easy&rdquo; way to share projects. I am still learning Docker and Docker best practice - as I learn more I will cover it in articles.</p>
<h3 id="operating-system">Operating System</h3>
<p>MacOS is really beautiful. The user interface is a joy to work with and the gestures used to switch between tabs and workspaces is astonishing - it feels productive and it&rsquo;s fun to use. I really enjoy just working with it simply because of the Design. The Linux base of MacOS is visible when navigation with the Terminal - it does not feel odd and most of the software I used on Ubuntu when interacting with the file system is &ldquo;the same&rdquo;. <code>grep</code>, <code>ls</code>, <code>head</code>, <code>tail</code>, <code>cat</code> - all these utilities work as expected. The only noticeable difference is <code>sed</code>. On Ubuntu I used <code>sed</code> a lot to clean SQL dumps, for example <code>sed -i 's/domain\.tld/domain\.local/g' mydump.sql</code> - this replaces <code>domain.tld</code> with <code>domain.local</code> inside the SQL dump. On MacOS one must add a post-fix for a backup file when using <code>sed</code>. The sed command becomes <code>sed -i '.bak' 's/domain\.tld/domain\.local/g' mydump.sql</code> and a backup file <code>mydump.sql.bak</code> is created. It&rsquo;s just a small difference but it caught me off-guard when I noticed bash scripts failing.</p>
<h3 id="hardware">Hardware</h3>
<p><strong>A-ma-zing</strong>! I expected a lot from a MacBook and I was blown away. The MacBook Pro feels good to the touch, it&rsquo;s well made and the Design aspect is visible in the choices of material and colors. While mine is not too high-end it still runs smootly and the battery life is unbelievable. Without a second display connected I get around 7-9 hours of battery life when writing or programming (no IDE used, just <a href="https://atom.io">Atom</a>) - when I have 30% battery left I can still work without running to plug it in. Even at 5%, when the Mac tells me to plug the cable in, I still have time left and can get the cable.</p>
<h3 id="software">Software</h3>
<p>I am currently figuring out which software I need and which software I want. I installed <a href="https://docs.docker.com/engine/installation/mac/">Docker for Mac</a>, <a href="https://atom.io">Atom</a>, <a href="https://www.google.com/chrome/">Chrome</a> and the usual things like Google Drive and <a href="https://www.keepassx.org/">KeyPassX</a>. I switched away from the default Terminal to <a href="https://www.iterm2.com/">iTerm 2</a>, but besides I kept it vanilla and did not install unnecessary software.</p>
<p>Did I miss a thing? <a href="https://twitter.com/_kevinatari">Tweet me @_kevinatari</a> and tell me what I absolutely need!</p>
]]></content><category scheme="https://kevingimbel.de/categories/personal" term="personal" label="personal"/><category scheme="https://kevingimbel.de/categories/thoughts" term="thoughts" label="thoughts"/><category scheme="https://kevingimbel.de/tags/hardware" term="hardware" label="hardware"/><category scheme="https://kevingimbel.de/tags/development" term="development" label="development"/></entry><entry><title type="html">Gotcha: dockerignore</title><link href="https://kevingimbel.de/blog/2016/12/gotcha-dockerignore/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Farewell Jekyll, Hello Hugo"/><link href="https://kevingimbel.de/blog/2015/12/speed-up-your-jekyll-workflow/?utm_source=atom_feed" rel="related" type="text/html" title="Speed up your Jekyll workflow"/><id>https://kevingimbel.de/blog/2016/12/gotcha-dockerignore/</id><published>2016-12-21T18:02:42+01:00</published><updated>2016-12-21T18:02:42+01:00</updated><content type="html"><![CDATA[<p>Today I was caught off-guard by a docker &ldquo;bug&rdquo; - or so I thought at first. I tried to boot up a project with <code>docker-compose up</code> like I do since <a href="/goodbye-ubuntu-hello-mac">switching to a Mac</a>. Unusual was that <code>docker-compose</code> stopped at the build step and would not finish the boot. After some confusion and after checking the projects <code>docker-compose.yml</code> configuration file I went to GitHub to see the newest <a href="https://github.com/docker/for-mac/issues">docker for mac issues</a> because I was using the beta release and thought a recent update might broke a thing or two. Looking at the issues I found a similar <a href="https://github.com/docker/for-mac/issues/1063">issue in docker/for-mac</a> and commented with my setup and output of <code>docker-compose --verbose up</code> only to realize a good 30 minutes later my setup was the problem all along.</p>
<p>While the configuration files were all correct, I made a mistake and did not provide a <code>.dockerignore</code> file. Without the <code>.dockerignore</code> two 6GB SQL dumps in the same directory which were mounted into the docker container which made the docker daemon crash / hang up. The simple solution was to create the following <code>.dockerignore</code> file.</p>
<pre><code># database directory on the host
.db
# all sql and gz files
*.sql
*.gz
</code></pre><p>Afterwards the <code>docker-compose</code> started without any issues because it now had a build context of around 400MB instead of 13GB.</p>
<p>Lesson learned: Always make sure your <code>.dockerignore</code> is setup right and ignores all big files! The full file looks as follows:</p>
<pre><code>node_modules
.sass-cache
.db
*.sql
*.gz
.git
</code></pre>]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/devops" term="devops" label="devops"/><category scheme="https://kevingimbel.de/tags/docker" term="docker" label="docker"/><category scheme="https://kevingimbel.de/tags/development" term="development" label="development"/></entry><entry><title type="html">Farewell Jekyll, Hello Hugo</title><link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2015/12/speed-up-your-jekyll-workflow/?utm_source=atom_feed" rel="related" type="text/html" title="Speed up your Jekyll workflow"/><id>https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/</id><published>2016-11-16T19:04:42+01:00</published><updated>2016-11-16T19:04:42+01:00</updated><content type="html"><![CDATA[<p>If you have visited my website in the past few weeks you might have notices a few things. First of all it looks different. Second, it is now served over HTTPS which is possible because I moved away from GitHub Pages and back to self-hosting my website. Third, and possible most important, I also moved away from Jekyll after using it for three years.</p>
<p>This very site you read right now is build with <a href="http://gohugo.io">Hugo</a>, a static site generator build by <a href="http://spf13.com/">Steve Francia</a>, <a href="https://github.com/bep">Bjørn Erik Pedersen</a> and a lot of <a href="https://github.com/spf13/hugo/graphs/contributors">contributors</a>. Hugo is written in <a href="https://golang.org/">Go</a> a programming language created at Google I have <a href="https://github.com/kevingimbel?language=go&amp;tab=repositories">been interested in lately</a>.
For me personally Go provides a lot of new challenges and things to learn. I worked with Front-End technologies like HTML and CSS as well as scripting languages like PHP and JavaScript for the better part of the past 6-7 years; &ldquo;professionally&rdquo; and officially since 2014. Go is entirely different to what I am used to and I like it. I enjoy playing around with it where in the past year or so I lost a big part of my passion for programming in the languages I already know. But why move away from Jekyll? And why choose Go?</p>
<h3 id="ruby">Ruby</h3>
<p>Jekyll is written in Ruby. I have no intention of learning anything related to Ruby. It is not lazyness or fear of a challenge but instead the simple truth that Ruby does not provide me with any benefits at the moment or in my foreseeable future. I am sure it has its place - like any language has - but I don&rsquo;t have the time nor the interest to dive into Ruby. I tried to host Jekyll on my own and it was always a hassle to set up the environment.</p>
<h3 id="go">Go</h3>
<p>Hugo on the other hand &ldquo;just works&rdquo;. Hugo is one binary file with zero dependencies after building and can just be executed. On a server with Go installed it&rsquo;s as easy as running <code>go get -v github.com/spf13/hugo</code> or if Go is not available there are pre-built binaries.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ wget https://github.com/spf13/hugo/releases/download/v0.17/hugo_0.17_Linux-64bit.tar.gz
$ tar -xzvf hugo_0.17_Linux-64bit.tar.gz
$ ln -s hugo_0.17_linux_amd64 hugo
$ chmod +x hugo
$ ln -s <span style="color:#66d9ef">$(</span>pwd<span style="color:#66d9ef">)</span>/hugo ~/bin
</code></pre></div><p>Another reason why I chose Hugo over <a href="https://www.staticgen.com/">any other static site generators</a> is because it is under active development thanks to <a href="https://github.com/bep">Bjørn Erik Pedersen</a>, has <a href="https://gohugo.io/overview/introduction/">excellent docs</a> and an active community.</p>
<p>The final reason why I decided to not just move away from GitHub Pages for my own SSL certificate but also away from Jekyll is: I want to learn Go. I can contribute to Hugo and poke around the source code if I need or want to, a thing I could not do with Ruby and Jekyll simply because I lack the skill. I&rsquo;m not yet any good at Go but having the interest and base to hack away in your static site generator is a big benefit after all.</p>
<p>As of today it&rsquo;s not all good yet. The new design is as always a work in progress and more of an experiment. The content of my site has changed drastically because I decided to not move all pages or all content but instead only move my articles. The <a href="/projects/">Projects</a> section is completley new and lists a selection of Projects I decided to showcase. As before, all source code of my website is <a href="https://github.com/kevingimbel/kevingimbel.com">available on GitHub.com</a> so feel free to look around.</p>
<p>Some things are still not working as I would like but I&rsquo;ll eventually get to them. After all, a personal website is always a work in progress.</p>
<p><em>Farewell Jekyll, it&rsquo;s been a pleasure for the past three years.</em></p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/hugo" term="hugo" label="hugo"/><category scheme="https://kevingimbel.de/tags/go" term="go" label="go"/><category scheme="https://kevingimbel.de/tags/development" term="development" label="development"/><category scheme="https://kevingimbel.de/tags/personal" term="personal" label="personal"/></entry><entry><title type="html">Speed up your Jekyll workflow</title><link href="https://kevingimbel.de/blog/2015/12/speed-up-your-jekyll-workflow/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/?utm_source=atom_feed" rel="related" type="text/html" title="Bullgit loves Jekyll"/><id>https://kevingimbel.de/blog/2015/12/speed-up-your-jekyll-workflow/</id><published>2015-12-16T00:00:00+00:00</published><updated>2015-12-16T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Lately I had a hard time working with my own website. Whenever I wanted to make some updates, write a post or fix a little buggy thing it only took a few minutes of &ldquo;work&rdquo; to get me really frustrated. Jekyll, despite my love for it, has become horribly slow. My site, which I consider rather &ldquo;simple&rdquo;, took 17-20 seconds to build on every change! Changing the CSS? Rebuild entire site. Changed one character in a JavaScript file? Rebuild entire site. Update one article? Rebuild entire site - this is frustrating and unnecessary! Luckily, I just found a perfect solution.</p>
<p>I was researching how to speed up a Jekyll site and if there was any news or whatsoever from the Community when I found <a href="https://github.com/jekyll/jekyll/issues/706">an old issue</a> on GitHub with a <a href="https://github.com/jekyll/jekyll/issues/706#issuecomment-25411224">comment by Parkr</a> that pointed me in the right direction: The <code>guard-jekyll-plus</code> Gem. As a person who has no idea of Ruby other that it has a rather beautiful looking syntax and <code>Gems</code> are somewhat related to it, I went on and set up the &ldquo;environment&rdquo; and programs needed. These were, basically, <code>bundle</code>, a <code>Gemfile</code> and a <code>Guardfile</code>.</p>
<pre><code># on Ubuntu
$ (sudo) apt-get install bundler
</code></pre><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#75715e"># The Gemfile</span>
source <span style="color:#e6db74">&#39;https://rubygems.org&#39;</span>
gem <span style="color:#e6db74">&#39;guard-jekyll-plus&#39;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#75715e"># The Guardfile</span>
<span style="color:#75715e"># Taken directly from https://github.com/imathis/guard-jekyll-plus</span>

ignore <span style="color:#e6db74">/^_site/</span> <span style="color:#75715e"># NOTE: this can interfere with Guard::LiveReload</span>

guard <span style="color:#e6db74">&#34;jekyll-plus&#34;</span>, <span style="color:#e6db74">:serve</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">true</span> <span style="color:#66d9ef">do</span>
  watch <span style="color:#e6db74">/.*/</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><p>The <code>Gemfile</code> - which seems to be a list of dependencies, similar to the <code>dependencies</code> list in a <code>package.json</code> file for Node - is probably the most basic representation of such a file. I first put in only the <code>gem 'guard-jekyll-plus'</code> line but then it started to throw errors and said I need to define a source - which I then did. Case closed, moving on.</p>
<p>The Guardfile is directly taken from <a href="https://github.com/imathis/guard-jekyll-plus">The guard-jekyll-plus GitHub repository</a>. As far as I understand it runs the watching and serving (normaly done by <code>jekyll --watch</code>) through the <a href="https://github.com/guard/guard"><code>Guard</code></a> task runner (<code>task runner</code> might be super simplified here) - so <code>Guard</code> and <code>guard-jekyll-plus</code> now decide when to rebuild things and what needs to be rebuild.</p>
<p>Once the configuration is set up you can run <code>$ bundle install</code> to install the dependencies and then <code>$ guard</code> to start the guard process. Guard will then run, serve up the Jekyll site on <code>localhost:4000</code> (or whatever is specified in jekyll <code>_config.yml</code>) and watch the files. From my previous 17-20 seconds of build time I am now <strong>down to 1.2 seconds</strong>. ONE POINT TWO SECONDS - this is amazing! Roughly 15x faster than just with Jekyll alone.</p>
<p>I have no idea why there is no mention of this method on the official Jekyll Website. Everyone who uses Jekyll and is frustrated with slow build times should consider looking at <code>Guard</code> and <code>jekyll-guard-plus</code>. I can highly recommend it.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/categories/cms" term="cms" label="cms"/><category scheme="https://kevingimbel.de/tags/jekyll" term="jekyll" label="jekyll"/><category scheme="https://kevingimbel.de/tags/ruby" term="ruby" label="ruby"/><category scheme="https://kevingimbel.de/tags/development" term="development" label="development"/></entry></feed>