<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://gohugo.io/" version="0.72.0">Hugo</generator><title type="html">runtime on KevOps</title><link href="https://kevingimbel.de/tags/runtime/" rel="alternate" type="text/html" title="HTML"/><link href="https://kevingimbel.de/tags/runtime/index.xml" rel="alternate" type="application/rss+xml" title="RSS"/><link href="https://kevingimbel.de/tags/runtime/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2020-08-17T09:23:48+02:00</updated><id>https://kevingimbel.de/tags/runtime/</id><entry><title type="html">Deno 1.0 released</title><link href="https://kevingimbel.de/blog/2020/05/deno-1.0-released/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2020/03/random-theme/?utm_source=atom_feed" rel="related" type="text/html" title="Random Theme"/><link href="https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Writing NodeJS cli tools"/><link href="https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/?utm_source=atom_feed" rel="related" type="text/html" title="Getting into Performance Measurement"/><link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/?utm_source=atom_feed" rel="related" type="text/html" title="Endless Multi-Dimensional Navigation"/><link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/?utm_source=atom_feed" rel="related" type="text/html" title="A closer look to closure"/><id>https://kevingimbel.de/blog/2020/05/deno-1.0-released/</id><published>2020-05-18T00:00:00+00:00</published><updated>2020-05-18T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Deno made its first stable release with the release of v1!</p>
<p>I&rsquo;ve heard of Deno in the past but I never really cared for it. My work with JavaScript has always been in the browser and I&rsquo;m not too much of a NodeJS fan - mainly because of the security and sandbox aspects of the runtime (or more, the lack of them). Deno aims to do better and fix some (or all?) of the NodeJS mistakes, like making access to the filesystem and network impossible unless allowed. In NodeJS, a script can read, write, send and receive network packages and basically do whatever it wants - there&rsquo;s little restriction and this has lead to malicious code executions in the past.</p>
<h2 id="quick-overview">Quick overview</h2>
<p>Deno is a JavaScript runtime that supports TypeScript out of the box. We can write regular JavaScript and execute it through the Deno toolchain, as the following example shows.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#75715e">// file: hello.ts
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Hello from Deno!&#34;</span>);
</code></pre></div><p>If we save the file as <code>hello.ts</code> we can just run it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ deno run hello.ts
Hello from Deno!
</code></pre></div><p>This means with Deno all the benefits of TypeScript can be used out of the box, like &hellip; Types. ðŸ˜¬</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#75715e">// file: sum.ts
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sum</span>(<span style="color:#a6e22e">a</span>: <span style="color:#66d9ef">number</span>, <span style="color:#a6e22e">b</span>: <span style="color:#66d9ef">number</span>)<span style="color:#f92672">:</span> <span style="color:#66d9ef">number</span> {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span>;
}
</code></pre></div><p>By annotating the parameters (<code>a: number</code>) we can tell the compiler what type of parameter this functions expects. If we try to execute it with a wrong type, the compiler throws an error.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#75715e">// file: ts_example.ts
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">as</span> <span style="color:#a6e22e">sum</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;./sum.ts&#34;</span>;

<span style="color:#a6e22e">sum</span>(<span style="color:#ae81ff">4</span>, <span style="color:#e6db74">&#34;6&#34;</span>);
</code></pre></div><p>When we try to tun the script with Deno, we get a nice error message:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ deno run ts_example.ts
Compile file:///Users/kevingimbel/Development/private/deno/hello-world/ts_example.ts
error: Uncaught TypeError: sum is not a <span style="color:#66d9ef">function</span>
console.log<span style="color:#f92672">(</span>sum<span style="color:#f92672">(</span>4, <span style="color:#e6db74">&#34;6&#34;</span><span style="color:#f92672">))</span>;
            ^
    at file:///Users/kevingimbel/Development/private/deno/hello-world/ts_example.ts:3:13
</code></pre></div><p>Types are incredibly helpful and in my opinion TypeScript is a blessing to the JavaScript world. Strong types are also one of the things I love about Rust - it just makes things clear and clean, even if it is hard sometimes.</p>
<h2 id="file-system-access">File system access</h2>
<p>Besides out-of-the-box TypeScript support, Denos security concept makes it very interesting, especially when you think about a Enterprise context and running code on servers where tight sandboxing and access control is important.</p>
<p>Here&rsquo;s another example. We use the std library <code>fs</code> module and the async function <code>exists</code> to check if a directory exists. If we run the code as it is with <code>deno run dir.ts</code> it will fail.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#75715e">// file: dir.ts
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">exists</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;https://deno.land/std/fs/mod.ts&#34;</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">my_dir_exists</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">exists</span>(<span style="color:#e6db74">&#34;./foo&#34;</span>); <span style="color:#75715e">// returns a Promise&lt;boolean&gt;
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">my_dir_exists</span>) {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Found directory!&#34;</span>);
} <span style="color:#66d9ef">else</span> {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Directory doesn&#39;t exist&#34;</span>);
}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ deno run dir.ts
error: Uncaught PermissionDenied: read access to <span style="color:#e6db74">&#34;/Users/kevingimbel/Development/private/deno/hello-world/foo&#34;</span>, run again with the --allow-read flag
    at unwrapResponse <span style="color:#f92672">(</span>$deno$/ops/dispatch_json.ts:43:11<span style="color:#f92672">)</span>
    at Object.sendAsync <span style="color:#f92672">(</span>$deno$/ops/dispatch_json.ts:98:10<span style="color:#f92672">)</span>
    at async lstat <span style="color:#f92672">(</span>$deno$/ops/fs/stat.ts:69:16<span style="color:#f92672">)</span>
    at async exists <span style="color:#f92672">(</span>https://deno.land/std/fs/exists.ts:8:5<span style="color:#f92672">)</span>
    at async file:///Users/kevingimbel/Development/private/deno/hello-world/dir.ts:8:23
</code></pre></div><p>As it turns out, we do not have write access so the script cannot check if a directory exists - this also means none of our dependencies can access the file system! To give the script read access the <code>--allow-read</code> flag can be used.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ deno run --allow-read dir.ts 
Directory doesn<span style="color:#960050;background-color:#1e0010">&#39;</span>t exist
</code></pre></div><p><code>--allow-read</code> takes a directory as parameter, so the read access can be restricted to only a certain directory and sub-directories, as the following example shows:</p>
<p>Given the directory structure</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">â”œâ”€â”€ dir.ts
â”œâ”€â”€ test1
â”œâ”€â”€ test2
</code></pre></div><p>Access to can be restricted to only <code>test1</code> with <code>--allow-read=./test1</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#75715e">// file: dir_test1.ts
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">exists</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;https://deno.land/std/fs/mod.ts&#34;</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">my_dir_exists</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">exists</span>(<span style="color:#e6db74">&#34;./test1&#34;</span>); <span style="color:#75715e">// returns a Promise&lt;boolean&gt;
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">my_dir_exists</span>) {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Found directory!&#34;</span>);
} <span style="color:#66d9ef">else</span> {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Directory doesn&#39;t exist&#34;</span>);
}
</code></pre></div><p>Here the script is executed with both directories - for some reason I needed the <code>--unstable</code> flag when a directory is passed to <code>--allow-read</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ deno run --allow-read<span style="color:#f92672">=</span>./test2 --unstable dir_test1.ts 
error: Uncaught PermissionDenied: read access to <span style="color:#e6db74">&#34;/Users/kevingimbel/Development/private/deno/hello-world/test1&#34;</span>, run again with the --allow-read flag
    at unwrapResponse <span style="color:#f92672">(</span>$deno$/ops/dispatch_json.ts:43:11<span style="color:#f92672">)</span>
    at Object.sendAsync <span style="color:#f92672">(</span>$deno$/ops/dispatch_json.ts:98:10<span style="color:#f92672">)</span>
    at async lstat <span style="color:#f92672">(</span>$deno$/ops/fs/stat.ts:69:16<span style="color:#f92672">)</span>
    at async exists <span style="color:#f92672">(</span>https://deno.land/std/fs/exists.ts:8:5<span style="color:#f92672">)</span>
    at async file:///Users/kevingimbel/Development/private/deno/hello-world/dir_test1.ts:8:23

$ deno run --allow-read<span style="color:#f92672">=</span>./test1 --unstable dir_test1.ts 
Found directory!
</code></pre></div><p>I&rsquo;m incredibly excited for the future of Deno and I hope it will shift the JavaScript world into a more sandboxed, secure future. So far it is very promising.</p>
<p>The full announcement blog post can be found <a href="https://deno.land/v1">on the deno blog</a></p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/tags/node" term="node" label="node"/><category scheme="https://kevingimbel.de/tags/runtime" term="runtime" label="runtime"/><category scheme="https://kevingimbel.de/tags/rust" term="rust" label="rust"/></entry></feed>