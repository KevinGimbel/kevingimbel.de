<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://gohugo.io/" version="0.72.0">Hugo</generator><title type="html">sass on KevOps</title><link href="https://kevingimbel.de/tags/sass/" rel="alternate" type="text/html" title="HTML"/><link href="https://kevingimbel.de/tags/sass/index.xml" rel="alternate" type="application/rss+xml" title="RSS"/><link href="https://kevingimbel.de/tags/sass/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2020-08-17T09:23:48+02:00</updated><id>https://kevingimbel.de/tags/sass/</id><entry><title type="html">Snippet: SASS Source Maps with Gulp</title><link href="https://kevingimbel.de/blog/2015/01/snippet-sass-source-maps-with-gulp/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/01/labels-in-gmail/?utm_source=atom_feed" rel="related" type="text/html" title="Labels in GMail"/><link href="https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Useful Web Developer Tools"/><link href="https://kevingimbel.de/blog/2013/10/from-0-to-sass/?utm_source=atom_feed" rel="related" type="text/html" title="From 0 To Sass"/><id>https://kevingimbel.de/blog/2015/01/snippet-sass-source-maps-with-gulp/</id><published>2015-01-22T00:00:00+00:00</published><updated>2015-01-22T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Yesterday I finally took a few moments to implement Source Maps with Gulp for one of our client projects at work. I
wanted to use the benefits of Source Maps for quite some time but never actually found the time to wrap my head around
it (aka throw in another Gulp plugin). Source Maps are used to connect your pre-compiled files, like Sass, with the
later compiled CSS - so inside the Dev Tools you can see for every line of CSS from which Sass file it comes - this is
super handy once your project get&rsquo;s bigger! Anyway, here&rsquo;s how to implement them with <a href="http://gulpjs.com0">Gulp</a>,
<a href="https://www.npmjs.com/package/gulp-sass">Gulp-Sass</a> and <a href="https://www.npmjs.com/package/gulp-autoprefixer">Autoprefixer</a>.</p>
<p>First of all, you need to install  the different gulp plugins (and gulp, if you haven&rsquo;t).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ npm install --save-dev gulp-sass gulp-sourcemaps gulp-autoprefixer
</code></pre></div><p>After everything is installed we&rsquo;ll create the basic Gulp setup.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">gulp</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp&#39;</span>),
      <span style="color:#a6e22e">sass</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-sass&#39;</span>),
      <span style="color:#a6e22e">prefix</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-autoprefixer&#39;</span>),
      <span style="color:#a6e22e">maps</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-sourcemaps&#39;</span>);

  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> {
        <span style="color:#a6e22e">scss</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;./skin/frontend/my-theme/default/scss/&#39;</span>,
        <span style="color:#a6e22e">css</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;./skin/frontend/my-theme/default/css/&#39;</span>
      }
</code></pre></div><p>Next the tasks will be created, I split them into 2, one for Sass and Source Maps and one for
Autoprefixer. It&rsquo;s important to create the Source Maps <em>before</em> using Autoprefixer, otherwise the line numbers won&rsquo;t be
right. This happen because Autoprefixer adds more properties to your compiled CSS!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;sass&#39;</span>, <span style="color:#66d9ef">function</span>() {
<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">src</span>( <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">scss</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;styles.scss&#39;</span>)
  .<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">maps</span>.<span style="color:#a6e22e">init</span>())
    .<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">sass</span>({ <span style="color:#a6e22e">outputStyle</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;compressed&#39;</span> }))
      .<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">maps</span>.<span style="color:#a6e22e">write</span>())
      .<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">dest</span>( <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">css</span> ))
});

<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;autoprefix&#39;</span>, <span style="color:#66d9ef">function</span>() {
<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">src</span>( <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">css</span> )
  .<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">prefix</span>(<span style="color:#e6db74">&#39;last 5 versions&#39;</span>, <span style="color:#e6db74">&#39;&gt; 1%&#39;</span>, <span style="color:#e6db74">&#39;ie8&#39;</span>))
  .<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">dest</span>( <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">css</span> ));  
});
</code></pre></div><p>First of all source maps need to be initalized, next a compressed css file from the SCSS files is created, the source
maps are written and we&rsquo;re all good! In a second task Autoprefixer takes the compiled, mapped CSS file and prefixes it
with whatever needs to be prefixed. The output looks like below (look at the right top of each rule set). Click on each
image to view it in full-size.</p>
<!-- raw HTML omitted -->
<p>In case you don&rsquo;t want your source maps in production you could split everything into 3 taks and run them in the order
<code>[&quot;sass&quot;, &quot;sourcemaps&quot;, &quot;autoprefix&quot;]</code> using <code>gulp.task()</code> and then later have the following production task.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;production&#39;</span>, [<span style="color:#e6db74">&#39;sass&#39;</span>, <span style="color:#e6db74">&#39;autoprefix&#39;</span>];

<span style="color:#75715e">// Use the following command to keep out Source Maps.
</span><span style="color:#75715e">// $ gulp production
</span></code></pre></div>]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/nodejs" term="nodejs" label="nodejs"/><category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/gulp" term="gulp" label="gulp"/><category scheme="https://kevingimbel.de/tags/sass" term="sass" label="sass"/><category scheme="https://kevingimbel.de/tags/workflow" term="workflow" label="workflow"/><category scheme="https://kevingimbel.de/tags/productivity" term="productivity" label="productivity"/></entry><entry><title type="html">From 0 To Sass</title><link href="https://kevingimbel.de/blog/2013/10/from-0-to-sass/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2013/09/a-bit-sticky/?utm_source=atom_feed" rel="related" type="text/html" title="A bit sticky"/><id>https://kevingimbel.de/blog/2013/10/from-0-to-sass/</id><published>2013-10-02T00:00:00+00:00</published><updated>2013-10-02T00:00:00+00:00</updated><content type="html"><![CDATA[<p>If you&rsquo;re a Front-End Developer you may have already heard about Pre-Processors such as <a href="http://sass-lang.com">Sass</a>, <a href="http://lesscss.org/">LESS</a> or <a href="http://learnboost.github.io/stylus/">Stylus</a>. It&rsquo;s fair to say that they&rsquo;re all good and which one you use is up to you or your team. I prefer Sass with the SCSS Syntax (= keeps semicolons and brackets).</p>
<p>Even though Pre-Processors are easy to use and setup some people are still confused: <em>Do I have to run them on a server? How do I install them? Why should I use them?</em> - I want to answer all these questions in this article: Getting from 0 to Sass in X Steps!</p>
<p><strong>Notice:</strong> This guide covers the installation on Linux and Mac only, for Windows support please take a look at <a href="http://www.impressivewebs.com/sass-on-windows/">this tutorial</a>.</p>
<h3 id="sass-summary">Sass summary</h3>
<p>Sass was build by <a href="http://www.hamptoncatlin.com/">Hampton Catlin</a> and <a href="http://nex-3.com/">Nathan Weizenbaum</a>. Since late 2008 <a href="http://chriseppstein.github.io/">Chris Eppstein</a> is also on board, he&rsquo;s also the creator of <a href="http://compass-style.org/">Compass</a> which is a CSS3 Framework for Sass (I&rsquo;ll cover Compass and other Frameworks for Sass later).</p>
<p>Sass enables you to use Variables, Functions and Mixins inside your CSS. This comes very handy because a stylesheet gets amazingly maintainable with variables and mixins.</p>
<p>Before we start I want you to notice something important about Sass: Sass runs on ruby so you have to install Ruby if it&rsquo;s not (Yeah Windows, I&rsquo;m looking in your direction!) - on Mac and Linux Ruby should be installed. All code blocks starting with <code>$</code> need to be inputed into a Terminal (without the <em>$</em>!). On OS X and Linux you may need to put a <code>sudo</code> command before every command prompt.</p>
<p>Simply check your ruby version by typing the following</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ruby --version
ruby 1.9.3p194 <span style="color:#f92672">(</span>2012-04-20 revision 35410<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>i686-linux<span style="color:#f92672">]</span>
</code></pre></div><h3 id="installation">Installation</h3>
<p>You&rsquo;ve maybe tried to install Sass previously and maybe it is still installed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># checking the installed Sass Version</span>
$ sass --version
<span style="color:#75715e"># If up to date the output (as of today, 10/2/13) is</span>
Sass 3.2.9 <span style="color:#f92672">(</span>Media Mark<span style="color:#f92672">)</span>
</code></pre></div><p>If you get an error such as &ldquo;command not found&rdquo; Sass is not installed, so we start from 0.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ gem install sass
</code></pre></div><p>Your Terminal will now show you the download and install process for Sass, depending on your internet connection this may take a while.
After things are finished we&rsquo;ll skip the step of testing Sass directly or using it on its own - trust me here, it&rsquo;s way better to install Compass first.</p>
<h3 id="compass">Compass</h3>
<p>Compass is a Framework for Sass that comes with a ton of build in Mixins and Functions that you&rsquo;ll love. I&rsquo;m using compass for every project - no matter if small or large.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># updating the system first so everything is running correctly</span>
$ gem update system
$ gem install compass
</code></pre></div><p>After compass is installed simply head over to your Local Web Direction (in my case this is <code>var/www/</code>) and run</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ compass create myproject
</code></pre></div><p>It doesn&rsquo;t matter what you call <code>myproject</code> - I&rsquo;ve only used this command once in my life. Anyway this will create a config.rb file that you should open next.</p>
<p>The <code>config.rb</code> is well commented, below you can see my file (just in case you don&rsquo;t edit the wrong file by accident)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#75715e"># Require any additional compass plugins here.</span>

<span style="color:#75715e"># Set this to the root of your project when deployed:</span>
http_path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/&#34;</span>
css_dir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;assets/css&#34;</span>
sass_dir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;assets/css&#34;</span>
images_dir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;assets/img&#34;</span>
javascripts_dir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;assets/js&#34;</span>

<span style="color:#75715e"># You can select your preferred output style here (can be overridden via the command line):</span>
<span style="color:#75715e"># output_style = :expanded or :nested or :compact or :compressed</span>

<span style="color:#75715e"># To enable relative paths to assets via compass helper functions. Uncomment:</span>
<span style="color:#75715e"># relative_assets = true</span>

<span style="color:#75715e"># To disable debugging comments that display the original location of your selectors. Uncomment:</span>
<span style="color:#75715e"># line_comments = false</span>


<span style="color:#75715e"># If you prefer the indented syntax, you might want to regenerate this</span>
<span style="color:#75715e"># project again passing --syntax sass, or you can uncomment this:</span>
<span style="color:#75715e"># preferred_syntax = :sass</span>
<span style="color:#75715e"># and then run:</span>
<span style="color:#75715e"># sass-convert -R --from scss --to sass sass scss &amp;&amp; rm -rf sass &amp;&amp; mv scss sass</span>
</code></pre></div><p>I changed the path (<code>css_dir</code>,<code>sass_dir</code>,&hellip;) so that they match my standard folder setup for projects.I do also always compress my files by changing the <code>output_style</code> to <code>:compressed</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># You can select your preferred output style here (can be overridden via the command line):</span>
output_style <span style="color:#f92672">=</span> :compressed
</code></pre></div><p>The <code>config.rb</code> is essential for running Compass. You have to Copy and Paste it into every root direction of your project. See and example below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># lets say this is the folder var/www/my-new-project</span>
<span style="color:#75715e"># this is the root of your project where your config.rb</span>
<span style="color:#75715e"># needs to be placed - NOT inside assets/css as many think!</span>
<span style="color:#e6db74">&#39;- assets
</span><span style="color:#e6db74">    &#39;</span>- css
        <span style="color:#e6db74">&#39;- style.scss
</span><span style="color:#e6db74">        &#39;</span>- style.css
    <span style="color:#e6db74">&#39;- js
</span><span style="color:#e6db74">        &#39;</span>- jquery.min.js
        <span style="color:#e6db74">&#39;- main.js
</span><span style="color:#e6db74">    &#39;</span>- img
<span style="color:#e6db74">&#39;- about
</span><span style="color:#e6db74">    &#39;</span>- index.html
<span style="color:#e6db74">&#39;- imprint.html
</span><span style="color:#e6db74">&#39;</span>- index.html
<span style="color:#e6db74">&#39;- config.rb
</span><span style="color:#e6db74">#   &#39;</span>- there it is, the config.rb!
</code></pre></div><p>Sass and Compass are now installed and ready to use. This is, in my opinion, best made via the good old Terminal!</p>
<p>So let&rsquo;s navigate to our folders and run our first command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># switching to our project folder</span>
$ cd var/www/my-new-project
<span style="color:#75715e"># telling compass to compile our files</span>
$ compass watch
</code></pre></div><p>Compass is now watching for changes and everytime you save your <code>style.scss</code> it will automatically create an style.css out of it. Still wondering what all of this is about?</p>
<h3 id="variables">Variables</h3>
<p>Let&rsquo;s start with Variables because I assume you know what they are and have already seen variables in other programming languages.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">//</span> <span style="color:#f92672">Variables</span> <span style="color:#f92672">start</span> <span style="color:#f92672">with</span> <span style="color:#f92672">a</span> <span style="color:#f92672">$,</span> <span style="color:#f92672">e</span>.<span style="color:#a6e22e">g</span><span style="color:#f92672">.</span>
<span style="color:#f92672">$</span><span style="color:#f92672">main-color</span><span style="color:#f92672">:</span> #85c226<span style="color:#f92672">;</span>
</code></pre></div><p>Variables must be declared <strong>before</strong> they&rsquo;re used, that&rsquo;s why I recommend to declare all variables at the top of the document (or inside a other stylesheet that can be included, more later on).
To use a variable you simply write it to the place you want it to be used. Logical, isn&rsquo;t it?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">$</span><span style="color:#f92672">main-color</span><span style="color:#f92672">:</span> #85c226<span style="color:#f92672">;</span>

.<span style="color:#a6e22e">my-class</span> {
    <span style="color:#66d9ef">border-top</span>: <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#960050;background-color:#1e0010">$</span>main-color;
}
</code></pre></div><p>The above snipped will be compiled to</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">my-class</span> {
    <span style="color:#66d9ef">border-top</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#85c226</span>;
}
</code></pre></div><p>Basically that&rsquo;s it. You can store Strings, Colors, and other variables inside a variables. More on variables can be found inside the <a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#variables_">Sass Docs</a>.</p>
<h3 id="mixins">Mixins</h3>
<p>Mixins are getting a little bit more interesting. They&rsquo;re snippets of code you can use, for example, to save the vendor prefixing. Compass comes with build-in Mixins but you can also create your own Mixins. To use the Compass Mixins you have to include Compass on top of your style.scss as followed:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">//</span> <span style="color:#f92672">import</span> <span style="color:#f92672">everything</span> <span style="color:#f92672">that</span> <span style="color:#f92672">compass</span> <span style="color:#f92672">has</span>
@<span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#34;compass&#34;</span>;
<span style="color:#f92672">//</span> <span style="color:#f92672">import</span> <span style="color:#f92672">special</span> <span style="color:#f92672">library</span> <span style="color:#f92672">(</span><span style="color:#f92672">e</span>.<span style="color:#a6e22e">g</span><span style="color:#f92672">.</span> <span style="color:#f92672">css3</span><span style="color:#f92672">)</span>
@<span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#34;compass/css3&#34;</span>;
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">//</span> <span style="color:#f92672">creating</span> <span style="color:#f92672">a</span> <span style="color:#f92672">mixin</span>
@<span style="color:#66d9ef">mixin</span> <span style="color:#f92672">border-radius</span><span style="color:#f92672">($</span><span style="color:#f92672">r</span><span style="color:#f92672">)</span> {
    <span style="color:#f92672">-webkit-border-radius</span><span style="color:#f92672">:$</span><span style="color:#f92672">r</span><span style="color:#f92672">;</span>
    <span style="color:#f92672">-moz-border-radius</span><span style="color:#f92672">:$</span><span style="color:#f92672">r</span><span style="color:#f92672">;</span>
    <span style="color:#f92672">-ms-border-radius</span><span style="color:#f92672">:$</span><span style="color:#f92672">r</span><span style="color:#f92672">;</span>
    <span style="color:#f92672">-o-border-radius</span><span style="color:#f92672">:$</span><span style="color:#f92672">r</span><span style="color:#f92672">;</span>
}

<span style="color:#f92672">//</span> <span style="color:#f92672">using</span> <span style="color:#f92672">it</span> <span style="color:#f92672">inside</span> <span style="color:#f92672">a</span> <span style="color:#f92672">class</span>
.<span style="color:#a6e22e">my-class</span> {
    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">em</span>;
    <span style="color:#66d9ef">height</span>:<span style="color:#66d9ef">auto</span>;
    <span style="color:#960050;background-color:#1e0010">@include</span> <span style="color:#960050;background-color:#1e0010">border-radius(5px)</span>;
}
</code></pre></div><p>The mixin can be created once and then be reused everywhere inside your style.scss - it&rsquo;ll save you a lot of writing whenever you have to apply a border to an object. The <code>border-radius()</code> mixin is also build-in to Compass. The output in style.css will be as following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">my-class</span> {
    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">em</span>;
    <span style="color:#66d9ef">height</span>:<span style="color:#66d9ef">auto</span>;
    <span style="color:#66d9ef">-webkit-</span><span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span>;
    <span style="color:#66d9ef">-moz-</span><span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span>;
    <span style="color:#66d9ef">-ms-</span><span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span>;
    <span style="color:#66d9ef">-o-</span><span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span>;
}
</code></pre></div><p>There are more super useful build in function in Sass. Some of my favorite are <code>darken()</code> and <code>lighten()</code> for colors.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">$</span><span style="color:#f92672">my-color</span><span style="color:#f92672">:</span> <span style="color:#f92672">red</span><span style="color:#f92672">;</span>
<span style="color:#f92672">$</span><span style="color:#f92672">my-color--dark</span><span style="color:#f92672">:</span> <span style="color:#f92672">darken</span><span style="color:#f92672">($</span><span style="color:#f92672">my-color</span><span style="color:#f92672">,</span><span style="color:#f92672">10</span><span style="color:#f92672">%);</span>
<span style="color:#f92672">//</span> <span style="color:#f92672">this</span> <span style="color:#f92672">will</span> <span style="color:#f92672">produce</span> <span style="color:#f92672">a</span> <span style="color:#f92672">hexadecimal</span> <span style="color:#f92672">code</span> <span style="color:#f92672">(</span><span style="color:#f92672">e</span>.<span style="color:#a6e22e">g</span><span style="color:#f92672">.</span> #132644<span style="color:#f92672">)</span> <span style="color:#f92672">of</span> <span style="color:#f92672">a</span> 
<span style="color:#f92672">//</span> <span style="color:#f92672">color</span> <span style="color:#f92672">that</span> <span style="color:#f92672">is</span> <span style="color:#f92672">10</span><span style="color:#f92672">%</span> <span style="color:#f92672">lighter</span> <span style="color:#f92672">than</span> <span style="color:#f92672">red</span><span style="color:#f92672">.</span>
<span style="color:#f92672">//</span> <span style="color:#f92672">syntax</span><span style="color:#f92672">:</span> 
<span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#f92672">lighten</span><span style="color:#f92672">(</span><span style="color:#f92672">color</span><span style="color:#f92672">,</span><span style="color:#f92672">percent</span><span style="color:#f92672">)</span>
<span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#f92672">darken</span><span style="color:#f92672">(</span><span style="color:#f92672">color</span><span style="color:#f92672">,</span><span style="color:#f92672">percent</span><span style="color:#f92672">)</span>
</code></pre></div><h3 id="structure-files-and-folders">Structure, Files and Folders</h3>
<p>Before this Guideline to Sass ends I want to talk about structures, files and folders. Compass is able to watch a whole directory of files so you can go totally crazy by striping down your CSS file into a lot of small files. Your css folder could look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#e6db74">&#39;-css
</span><span style="color:#e6db74">    &#39;</span>_includes
        <span style="color:#e6db74">&#39;- _article.scss
</span><span style="color:#e6db74">        &#39;</span>- _header.scss
        <span style="color:#e6db74">&#39;- _menu.scss
</span><span style="color:#e6db74">        &#39;</span>- _imprint.scss
        <span style="color:#e6db74">&#39;- _front-page.scss
</span><span style="color:#e6db74">        &#39;</span>- _sidebar.scss
        <span style="color:#e6db74">&#39;- _plugins.scss
</span><span style="color:#e6db74">        &#39;</span>- _mixins.scss
    <span style="color:#e6db74">&#39;- style.scss
</span><span style="color:#e6db74">    &#39;</span>- style.css
</code></pre></div><p>The amazing thing about Compass is: every file that starts with <code>_</code> is not compiled. So in the above folder tree there&rsquo;s still only <code>style.scss</code> that will be compiled - but all the others can be included. <strong>Wow but what about performance with all those files?</strong> you&rsquo;ll maybe ask yourself? The point is: There&rsquo;s still just one file, the style.<em>css</em> that will be included to the page later - so all the other files only exist locally on your computer.
If you want to have an example what the <code>style.scss</code> would look like, here&rsquo;s the one I <a href="https://github.com/kevingimbel/kevingimbel.github.io/blob/v1/assets/css/style.scss">used for my blog</a>.</p>
<p>Sass and Compass are amazing, powerful tools and you, as a Front-End Developer, should be able to work with both. This small summary of the basic Sass features is just the top of the iceberg - there&rsquo;s a lot more to explore about <a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html">Sass</a> and <a href="http://compass-style.org/reference/compass/">Compass</a>.</p>
<p>You should also check out <a href="http://codepen.io/thebabydino/">Ana Tudor</a> on CodePen, she&rsquo;s doing amazing stuff with Sass and Maths!</p>
<p>Further reading:</p>
<ul>
<li><a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html">Sass Docs</a></li>
<li><a href="http://compass-style.org/reference/compass/">Compass Docs</a></li>
<li><a href="http://thesassway.com/">The Sass Way</a></li>
</ul>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/css" term="css" label="css"/><category scheme="https://kevingimbel.de/tags/sass" term="sass" label="sass"/><category scheme="https://kevingimbel.de/tags/tooling" term="tooling" label="tooling"/></entry></feed>