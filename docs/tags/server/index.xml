<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>server on KevOps — DevOps, Cooking, and everything else I want to write about</title><link>https://kevingimbel.de/tags/server/</link><description>Recent content in server on KevOps — DevOps, Cooking, and everything else I want to write about</description><generator>Hugo -- gohugo.io</generator><language>en_US</language><lastBuildDate>Thu, 04 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kevingimbel.de/tags/server/index.xml" rel="self" type="application/rss+xml"/><item><title>Yip</title><link>https://kevingimbel.de/project/yip/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/project/yip/</guid><description>A Rust TCP server that responds with callers&amp;rsquo; IPv4 address
About This server is the counter part to mip. It responds with the callers&amp;rsquo; IP address on request. That&amp;rsquo;s it.
Usage Cargo Run the server with cargo run, then connect to it on port 8111.
Binary Build the binary for your system with cargo.
$ cargo build --release Then copy the binary from target/release/yip to some place in your $PATH. Afterwards the server can be started by running yip.</description></item><item><title>Docker Apache Proxy Setup</title><link>https://kevingimbel.de/blog/2020/05/docker-apache-proxy-setup/</link><pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/blog/2020/05/docker-apache-proxy-setup/</guid><description>In this post I&amp;rsquo;d like to detail how I am managing docker containers behind an apache2 proxy on a Ubuntu 18.04. server. I&amp;rsquo;m using one Apache server to route traffic from multiple sub-domains to docker containers all running with docker-compose. This setup is not automated and the containers do not need to interact with each other; It&amp;rsquo;s just how I run software for my private usage.
Overview Let&amp;rsquo;s start with an overview image, because this can be quite confusing.</description></item><item><title>Auto SSL With apache2</title><link>https://kevingimbel.de/blog/2020/01/auto-ssl-with-apache2/</link><pubDate>Wed, 08 Jan 2020 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/blog/2020/01/auto-ssl-with-apache2/</guid><description>Apache 2.4.30 and later supports an experimental module called mod_md which allows automatic SSL certificate management with Let&amp;rsquo;s Encrypt as standard provider. This greatly simplifies the management of SSL certificates. Instead of setting up certbot and cronjobs to automatically renew certs server administrators now only need to add a few lines to their virtual host files.
This guide assumes the operating system is Ubuntu! If you use a different distro some commands may be different.</description></item></channel></rss>