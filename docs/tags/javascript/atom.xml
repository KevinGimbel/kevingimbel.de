<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://gohugo.io/" version="0.72.0">Hugo</generator><title type="html">javascript on KevOps</title><link href="https://kevingimbel.de/tags/javascript/" rel="alternate" type="text/html" title="HTML"/><link href="https://kevingimbel.de/tags/javascript/index.xml" rel="alternate" type="application/rss+xml" title="RSS"/><link href="https://kevingimbel.de/tags/javascript/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2020-06-18T17:38:59+02:00</updated><id>https://kevingimbel.de/tags/javascript/</id><entry><title type="html">Deno 1.0 released</title><link href="https://kevingimbel.de/blog/2020/05/deno-1.0-released/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2020/03/random-theme/?utm_source=atom_feed" rel="related" type="text/html" title="Random Theme"/><link href="https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Writing NodeJS cli tools"/><link href="https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/?utm_source=atom_feed" rel="related" type="text/html" title="Getting into Performance Measurement"/><link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/?utm_source=atom_feed" rel="related" type="text/html" title="Endless Multi-Dimensional Navigation"/><link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/?utm_source=atom_feed" rel="related" type="text/html" title="A closer look to closure"/><id>https://kevingimbel.de/blog/2020/05/deno-1.0-released/</id><published>2020-05-18T00:00:00+00:00</published><updated>2020-05-18T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Deno made its first stable release with the release of v1!</p>
<p>I&rsquo;ve heard of Deno in the past but I never really cared for it. My work with JavaScript has always been in the browser and I&rsquo;m not too much of a NodeJS fan - mainly because of the security and sandbox aspects of the runtime (or more, the lack of them). Deno aims to do better and fix some (or all?) of the NodeJS mistakes, like making access to the filesystem and network impossible unless allowed. In NodeJS, a script can read, write, send and receive network packages and basically do whatever it wants - there&rsquo;s little restriction and this has lead to malicious code executions in the past.</p>
<h2 id="quick-overview">Quick overview</h2>
<p>Deno is a JavaScript runtime that supports TypeScript out of the box. We can write regular JavaScript and execute it through the Deno toolchain, as the following example shows.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#75715e">// file: hello.ts
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Hello from Deno!&#34;</span>);
</code></pre></div><p>If we save the file as <code>hello.ts</code> we can just run it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ deno run hello.ts
Hello from Deno!
</code></pre></div><p>This means with Deno all the benefits of TypeScript can be used out of the box, like &hellip; Types. 😬</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#75715e">// file: sum.ts
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sum</span>(<span style="color:#a6e22e">a</span>: <span style="color:#66d9ef">number</span>, <span style="color:#a6e22e">b</span>: <span style="color:#66d9ef">number</span>)<span style="color:#f92672">:</span> <span style="color:#66d9ef">number</span> {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span>;
}
</code></pre></div><p>By annotating the parameters (<code>a: number</code>) we can tell the compiler what type of parameter this functions expects. If we try to execute it with a wrong type, the compiler throws an error.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#75715e">// file: ts_example.ts
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">as</span> <span style="color:#a6e22e">sum</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;./sum.ts&#34;</span>;

<span style="color:#a6e22e">sum</span>(<span style="color:#ae81ff">4</span>, <span style="color:#e6db74">&#34;6&#34;</span>);
</code></pre></div><p>When we try to tun the script with Deno, we get a nice error message:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ deno run ts_example.ts
Compile file:///Users/kevingimbel/Development/private/deno/hello-world/ts_example.ts
error: Uncaught TypeError: sum is not a <span style="color:#66d9ef">function</span>
console.log<span style="color:#f92672">(</span>sum<span style="color:#f92672">(</span>4, <span style="color:#e6db74">&#34;6&#34;</span><span style="color:#f92672">))</span>;
            ^
    at file:///Users/kevingimbel/Development/private/deno/hello-world/ts_example.ts:3:13
</code></pre></div><p>Types are incredibly helpful and in my opinion TypeScript is a blessing to the JavaScript world. Strong types are also one of the things I love about Rust - it just makes things clear and clean, even if it is hard sometimes.</p>
<h2 id="file-system-access">File system access</h2>
<p>Besides out-of-the-box TypeScript support, Denos security concept makes it very interesting, especially when you think about a Enterprise context and running code on servers where tight sandboxing and access control is important.</p>
<p>Here&rsquo;s another example. We use the std library <code>fs</code> module and the async function <code>exists</code> to check if a directory exists. If we run the code as it is with <code>deno run dir.ts</code> it will fail.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#75715e">// file: dir.ts
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">exists</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;https://deno.land/std/fs/mod.ts&#34;</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">my_dir_exists</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">exists</span>(<span style="color:#e6db74">&#34;./foo&#34;</span>); <span style="color:#75715e">// returns a Promise&lt;boolean&gt;
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">my_dir_exists</span>) {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Found directory!&#34;</span>);
} <span style="color:#66d9ef">else</span> {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Directory doesn&#39;t exist&#34;</span>);
}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ deno run dir.ts
error: Uncaught PermissionDenied: read access to <span style="color:#e6db74">&#34;/Users/kevingimbel/Development/private/deno/hello-world/foo&#34;</span>, run again with the --allow-read flag
    at unwrapResponse <span style="color:#f92672">(</span>$deno$/ops/dispatch_json.ts:43:11<span style="color:#f92672">)</span>
    at Object.sendAsync <span style="color:#f92672">(</span>$deno$/ops/dispatch_json.ts:98:10<span style="color:#f92672">)</span>
    at async lstat <span style="color:#f92672">(</span>$deno$/ops/fs/stat.ts:69:16<span style="color:#f92672">)</span>
    at async exists <span style="color:#f92672">(</span>https://deno.land/std/fs/exists.ts:8:5<span style="color:#f92672">)</span>
    at async file:///Users/kevingimbel/Development/private/deno/hello-world/dir.ts:8:23
</code></pre></div><p>As it turns out, we do not have write access so the script cannot check if a directory exists - this also means none of our dependencies can access the file system! To give the script read access the <code>--allow-read</code> flag can be used.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ deno run --allow-read dir.ts 
Directory doesn<span style="color:#960050;background-color:#1e0010">&#39;</span>t exist
</code></pre></div><p><code>--allow-read</code> takes a directory as parameter, so the read access can be restricted to only a certain directory and sub-directories, as the following example shows:</p>
<p>Given the directory structure</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">├── dir.ts
├── test1
├── test2
</code></pre></div><p>Access to can be restricted to only <code>test1</code> with <code>--allow-read=./test1</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#75715e">// file: dir_test1.ts
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">exists</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;https://deno.land/std/fs/mod.ts&#34;</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">my_dir_exists</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">exists</span>(<span style="color:#e6db74">&#34;./test1&#34;</span>); <span style="color:#75715e">// returns a Promise&lt;boolean&gt;
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">my_dir_exists</span>) {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Found directory!&#34;</span>);
} <span style="color:#66d9ef">else</span> {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Directory doesn&#39;t exist&#34;</span>);
}
</code></pre></div><p>Here the script is executed with both directories - for some reason I needed the <code>--unstable</code> flag when a directory is passed to <code>--allow-read</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ deno run --allow-read<span style="color:#f92672">=</span>./test2 --unstable dir_test1.ts 
error: Uncaught PermissionDenied: read access to <span style="color:#e6db74">&#34;/Users/kevingimbel/Development/private/deno/hello-world/test1&#34;</span>, run again with the --allow-read flag
    at unwrapResponse <span style="color:#f92672">(</span>$deno$/ops/dispatch_json.ts:43:11<span style="color:#f92672">)</span>
    at Object.sendAsync <span style="color:#f92672">(</span>$deno$/ops/dispatch_json.ts:98:10<span style="color:#f92672">)</span>
    at async lstat <span style="color:#f92672">(</span>$deno$/ops/fs/stat.ts:69:16<span style="color:#f92672">)</span>
    at async exists <span style="color:#f92672">(</span>https://deno.land/std/fs/exists.ts:8:5<span style="color:#f92672">)</span>
    at async file:///Users/kevingimbel/Development/private/deno/hello-world/dir_test1.ts:8:23

$ deno run --allow-read<span style="color:#f92672">=</span>./test1 --unstable dir_test1.ts 
Found directory!
</code></pre></div><p>I&rsquo;m incredibly excited for the future of Deno and I hope it will shift the JavaScript world into a more sandboxed, secure future. So far it is very promising.</p>
<p>The full announcement blog post can be found <a href="https://deno.land/v1">on the deno blog</a></p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/tags/node" term="node" label="node"/><category scheme="https://kevingimbel.de/tags/runtime" term="runtime" label="runtime"/><category scheme="https://kevingimbel.de/tags/rust" term="rust" label="rust"/></entry><entry><title type="html">Random Theme</title><link href="https://kevingimbel.de/blog/2020/03/random-theme/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/?utm_source=atom_feed" rel="related" type="text/html" title="Getting into Performance Measurement"/><link href="https://kevingimbel.de/blog/2020/01/safe-calc-usage-in-css/?utm_source=atom_feed" rel="related" type="text/html" title="Safe calc usage in CSS"/><link href="https://kevingimbel.de/blog/2017/11/css-custom-properties-and-a-new-look/?utm_source=atom_feed" rel="related" type="text/html" title="CSS Custom Properties and a new look"/><link href="https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Writing NodeJS cli tools"/><link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/?utm_source=atom_feed" rel="related" type="text/html" title="Endless Multi-Dimensional Navigation"/><id>https://kevingimbel.de/blog/2020/03/random-theme/</id><published>2020-03-24T00:00:00+00:00</published><updated>2020-03-24T00:00:00+00:00</updated><content type="html"><![CDATA[<p>I&rsquo;ve decided to add some randomness to this website! You may noticed that the two main colors change on every page reload - there&rsquo;s a fixed number of &ldquo;themes&rdquo; available and they change at random.</p>
<p>To accomplish this I used the following JavaScript.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">(<span style="color:#66d9ef">function</span>(window, document, <span style="color:#66d9ef">undefined</span>) {
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">theme</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">theme</span>);
<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">theme</span>) {
    <span style="color:#66d9ef">var</span> [<span style="color:#a6e22e">colorMain</span>, <span style="color:#a6e22e">colorSecondary</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">theme</span>).<span style="color:#a6e22e">colors</span>;
    document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">style</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`--color-main:</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">colorMain</span><span style="color:#e6db74">}</span><span style="color:#e6db74">;--color-secondary:</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">colorSecondary</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>;
} <span style="color:#66d9ef">else</span> {
    <span style="color:#75715e">// [dark-color, light-color]
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Color combinations taken from https://botsin.space/@accessibleColors
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">themes</span> <span style="color:#f92672">=</span> [
        [<span style="color:#e6db74">&#34;#123D3C&#34;</span>, <span style="color:#e6db74">&#34;#90F072&#34;</span>],
        [<span style="color:#e6db74">&#34;#403D58&#34;</span>, <span style="color:#e6db74">&#34;#dea584&#34;</span>],
        [<span style="color:#e6db74">&#34;#400E3B&#34;</span>, <span style="color:#e6db74">&#34;#DCC78A&#34;</span>],
        [<span style="color:#e6db74">&#34;#17098D&#34;</span>, <span style="color:#e6db74">&#34;#EADD1C&#34;</span>],
        [<span style="color:#e6db74">&#34;#233B07&#34;</span>, <span style="color:#e6db74">&#34;#FFDD6D&#34;</span>]
    ]
    <span style="color:#66d9ef">var</span> [<span style="color:#a6e22e">colorMain</span>, <span style="color:#a6e22e">colorSecondary</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">themes</span>[Math.<span style="color:#a6e22e">floor</span>(Math.<span style="color:#a6e22e">random</span>() <span style="color:#f92672">*</span> <span style="color:#a6e22e">themes</span>.<span style="color:#a6e22e">length</span>)];
    document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">style</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`--color-main:</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">colorMain</span><span style="color:#e6db74">}</span><span style="color:#e6db74">;--color-secondary:</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">colorSecondary</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>;
}
document.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;DOMContentLoaded&#39;</span>, <span style="color:#66d9ef">function</span>() {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">schema_btn</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#34;#btn_schema&#34;</span>);
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">theme</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>);
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">theme</span>) {
        <span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">textContent</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Use random color theme&#34;</span>;
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">textContent</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Keep current color theme&#34;</span>;
    }
    <span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">display</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;block&#34;</span>;
    <span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;click&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">theme</span>) {
            window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">removeItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>);
            window.<span style="color:#a6e22e">reload</span>();
        } <span style="color:#66d9ef">else</span> {
            window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>, <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>({<span style="color:#a6e22e">colors</span><span style="color:#f92672">:</span> [<span style="color:#a6e22e">colorMain</span>, <span style="color:#a6e22e">colorSecondary</span>]}));
        }
    });
});
}(window, document));
</code></pre></div><p>Quite a lot isn&rsquo;t it? Let&rsquo;s break that down.</p>
<h3 id="random-array-elements">Random array elements</h3>
<p>The theme logic is all in this JavaScript snippet. By using nested array and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">destructing assignment</a> we can get a theme consisting of a primary and secondary color. These color combinations are hand-picked from the <a href="https://botsin.space/@accessibleColors">@accessibleColors</a> bot.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">themes</span> <span style="color:#f92672">=</span> [
    [<span style="color:#e6db74">&#34;#123D3C&#34;</span>, <span style="color:#e6db74">&#34;#90F072&#34;</span>],
    [<span style="color:#e6db74">&#34;#403D58&#34;</span>, <span style="color:#e6db74">&#34;#dea584&#34;</span>],
    [<span style="color:#e6db74">&#34;#400E3B&#34;</span>, <span style="color:#e6db74">&#34;#DCC78A&#34;</span>],
    [<span style="color:#e6db74">&#34;#17098D&#34;</span>, <span style="color:#e6db74">&#34;#EADD1C&#34;</span>],
    [<span style="color:#e6db74">&#34;#233B07&#34;</span>, <span style="color:#e6db74">&#34;#FFDD6D&#34;</span>]
]
<span style="color:#66d9ef">var</span> [<span style="color:#a6e22e">colorMain</span>, <span style="color:#a6e22e">colorSecondary</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">themes</span>[Math.<span style="color:#a6e22e">floor</span>(Math.<span style="color:#a6e22e">random</span>() <span style="color:#f92672">*</span> <span style="color:#a6e22e">themes</span>.<span style="color:#a6e22e">length</span>)];
</code></pre></div><p>Having the values I then store them in a <code>localStorage</code> entry if the user clicks on &ldquo;Keep this color theme&rdquo;. To do this, we first need to get the button element and the local storage item like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">schema_btn</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#34;#btn_schema&#34;</span>);
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">theme</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>);
</code></pre></div><p>Then we can decide what text should be inside the button&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">theme</span>) {
    <span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">textContent</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Use random color theme&#34;</span>;
} <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">textContent</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Keep current color theme&#34;</span>;
}
</code></pre></div><p>&hellip; and set the button to <code>display: block</code> - by default it is hidden with <code>display: none</code> so that people without JavaScript enabled don&rsquo;t see a useless button (they also don&rsquo;t see random themes!).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">display</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;block&#34;</span>;
</code></pre></div><p>And finally, we assign a <code>click</code> event listener and check if the <code>theme</code> is set, which means the button click resets the current theme and reloads the site, or if the theme is not set and the current schema should be safed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;click&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">theme</span>) {
        window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">removeItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>);
        window.<span style="color:#a6e22e">reload</span>();
    } <span style="color:#66d9ef">else</span> {
        window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>, <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>({<span style="color:#a6e22e">colors</span><span style="color:#f92672">:</span> [<span style="color:#a6e22e">colorMain</span>, <span style="color:#a6e22e">colorSecondary</span>]}));
    }
});
</code></pre></div><p>If you don&rsquo;t like the current colors just refresh until you find the one you like. 😁</p>
<p>If this is a horrible addition to my website and you want a permanent off button - please <a href="https://bullgit.party/@kevin" title="Contact me on Mastodon">let me know</a>!</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/tags/web" term="web" label="web"/><category scheme="https://kevingimbel.de/tags/css" term="css" label="css"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/></entry><entry><title type="html">Writing NodeJS cli tools</title><link href="https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/?utm_source=atom_feed" rel="related" type="text/html" title="Getting into Performance Measurement"/><link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/?utm_source=atom_feed" rel="related" type="text/html" title="Endless Multi-Dimensional Navigation"/><link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/?utm_source=atom_feed" rel="related" type="text/html" title="A closer look to closure"/><link href="https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/?utm_source=atom_feed" rel="related" type="text/html" title="Passing Arguments in JavaScript"/><link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="related" type="text/html" title="Pure JavaScript slider"/><id>https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/</id><published>2017-01-09T18:02:48+01:00</published><updated>2017-01-09T18:02:48+01:00</updated><content type="html"><![CDATA[<p>Over 2015 and 2016 I got more and more interested in automating my daily workflows with scripts. For this purpose I learned Bash Scripting (or Shell Scripting) and started writing my first scripts to automate repeating tasks, <a href="https://github.com/kevingimbel/vhost">creating apache vhosts</a> files for example. Recently I started exploring how to implement command line tools in NodeJS and this post should give an overview.</p>
<h3 id="shebang">Shebang</h3>
<blockquote>
<p>If you already know what a Shebang is skip to <a href="/writing-nodejs-cli-tools/#writing-a-tiny-node-cli-script">the next section</a></p>
</blockquote>
<p>Shell Scripts always start with a <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">Shebang</a> on the first line. This line is used to indicate which program is used to execute the following script. For Bash scripts the Shebang is <code>#!/bin/bash</code>. What the OS or program loader does when executing the script is the following. Consider this sample script named <code>hello.sh</code></p>
<pre><code>#!/bin/bash
echo &quot;Hello World!&quot;
</code></pre><p>When it is executed from the command line (cli) with <code>./hello.sh</code> the operating system executes the script (<code>echo &quot;Hello World!&quot;</code>) with <code>/bin/bash</code>. Equally, you could run <code>/bin/bash ./hello.sh</code>. When programming a bash script you can also set it to exit on every error, either with <code>set -e</code> or with a shebang similar to <code>#!/bin/bash -e</code>. The screenshot below demonstrates the difference when running a invalid shell script <code>bad.sh</code>.</p>

<figure >
  

    <img src="/images/posts/2017/node-cli/shell-shebang-example.png"
      alt="Executing a invalid bash script without shebang and with shebang and -e flag"
       />
    
  
  <figcaption>
    <p>
      Executing a invalid bash script without shebang and with shebang and -e flag
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>As you can see without the <code>#!/bin/bash -e</code> shebang the script will execute even after an error occurred - this might not be intended behavior. Anyway, the topic of this post is node and the Shebang in node is essential. NodeJS Scripts are JavaScript and cannot be run - like shell scripts - without an Shebang to tell the system to invoke them with node. The NodeJS Shebang looks a bit different and specifies the &ldquo;environment&rdquo; or <code>env</code> with <code>/usr/bin/env</code>. The Shebang then reads <code>#!/usr/bin/env node</code>. Without the Shebang NodeJS scripts will fail immediately after being invoked as seen in the following screenshot.</p>

<figure >
  

    <img src="/images/posts/2017/node-cli/node-without-and-with-shebang.png"
      alt="Node Script executed with and without shebang"
       />
    
  
  <figcaption>
    <p>
      Node Script executed with and without shebang
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>While it is not necessarily needed for scripts written in in Shell/Bash the Shebang cannot be omitted from NodeJS scripts intended to be run as command line program.</p>
<p>Well, that has been a fun excursion into the world of shell scripting. Back to node!</p>
<h3 id="writing-a-tiny-node-cli-script">Writing a tiny node cli script</h3>
<p>Since we now know how to use a Shebang and how to invoke out Node scripts from the command line we may write a script. Let&rsquo;s keep it simple. We will greet the person executing the script.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">#!/usr/bin/env node
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">sayHello</span> <span style="color:#f92672">=</span> () =&gt; {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`Hello, </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">USER</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>)
}

<span style="color:#a6e22e">sayHello</span>()
</code></pre></div><p>Let&rsquo;s save the script and run it with <code>$ node hello.js</code> from the command line.</p>

<figure >
  

    <img src="/images/posts/2017/node-cli/node-running-hello-js.png"
      alt="Running the hello.js script"
       />
    
  
  <figcaption>
    <p>
      Running the hello.js script
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>Now that&rsquo;s interesting: The script greets the currently logged-in user! That&rsquo;s the case because we make use of the <code>process</code> variable which holds information about the current environment - the <code>env</code> object for example holds your environment variables. Add a new function to <code>hello.js</code> to see the output.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">printEnv</span> <span style="color:#f92672">=</span> () =&gt; {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>)
}

<span style="color:#a6e22e">printEnv</span>()
</code></pre></div><p>You will see the <code>USER</code> variable is part of the environment object and holds the name of the logged-in user. This way node scripts can access terminal variables and use them. Run <code>export _test=123</code> and then <code>node hello.js</code> - <code>_test</code> is now part of the environment. By using the Environment we can make a script execute different tasks depending on the environment, as seen in the next snippet.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">log</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">message</span>, <span style="color:#a6e22e">level</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>) =&gt; {
  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">NODE_ENV</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;production&#39;</span>) {
    <span style="color:#a6e22e">writeLogFile</span>(<span style="color:#a6e22e">message</span>, <span style="color:#a6e22e">level</span>)
  } <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">message</span>)
  }
}

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">writeLogFile</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">message</span>, <span style="color:#a6e22e">level</span>) =&gt; {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#e6db74">&#39;Not implemented&#39;</span>)
  <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>)
}

<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;This is a test!&#34;</span>)
</code></pre></div><p>Here we have a log function which either runs the <code>writeLogFile</code> function when in production mode or logs to the console if we are in any other mode (development for example.)</p>

<figure >
  

    <img src="/images/posts/2017/node-cli/node-using-process-environment.png"
      alt="Making use of the environment in a node cli script"
       />
    
  
  <figcaption>
    <p>
      Making use of the environment in a node cli script
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>As you can see in the screenshot depending on the <code>NODE_ENV</code> variable a different function is executed. The environment can be set inline (<code>$ export NODE_ENV=production</code>) for the duration of the shell session or it can be set permanent, e.g. by adding it to the shell runtime file (<code>~/.zshrc</code> or <code>~/.bashrc</code>). You may also noticed the <code>process.exit(1)</code> inside the <code>writeLogFile</code> function. The <code>exit</code> function enables us to use exit codes to indicate if our script ended successful or not to other processes. If a script exits with <code>0</code> it was successful, everything else is considered an error. To see how a script exits you can run <code>echo $?</code> inside a terminal.</p>
<p>You can read more about exit codes in <a href="http://www.tldp.org/LDP/abs/html/exit-status.html">the resources of TLDP</a>.</p>
<p>So far we learned that Node CLI scripts:</p>
<ul>
<li>need a shebang, <code>#!/usr/bin/env node</code></li>
<li>are written in regular JavaScript</li>
<li>can access the environment</li>
<li>can exit using <code>process.exit(exit_code)</code></li>
<li>can utilize lots of Node packages</li>
</ul>
<p>And that&rsquo;s it for today. All the example scripts are <a href="https://github.com/kevingimbel/blog-node-cli-tools-data">available on GitHub</a>.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/nodejs" term="nodejs" label="nodejs"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/nodejs" term="nodejs" label="nodejs"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/tags/cli" term="cli" label="cli"/></entry><entry><title type="html">Getting into Performance Measurement</title><link href="https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2015/01/getting-into-vim-again/?utm_source=atom_feed" rel="related" type="text/html" title="Getting into vim - again"/><link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/?utm_source=atom_feed" rel="related" type="text/html" title="Endless Multi-Dimensional Navigation"/><link href="https://kevingimbel.de/blog/2014/07/conditional-css/?utm_source=atom_feed" rel="related" type="text/html" title="Conditional CSS"/><link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/?utm_source=atom_feed" rel="related" type="text/html" title="A closer look to closure"/><link href="https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Useful Web Developer Tools"/><id>https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/</id><published>2015-03-10T00:00:00+00:00</published><updated>2015-03-10T00:00:00+00:00</updated><content type="html"><![CDATA[<p>I&rsquo;ve spent the past week developing some features for our own website at work.
We&rsquo;re using WordPress and I almost always enjoy working with WordPress beside
Magento projects, it&rsquo;s way easier to keep an overview and with a good overview
of data flow and available data it&rsquo;s easier to measure and find performance
bottleneck. In the following post I want to examine my workflow and the way I
refactored our code base to increase the speed and overall performance of our
site.</p>
<h3 id="mesuring-load-times">Mesuring load times</h3>
<h4 id="webpagetestorg">WebPageTest.org</h4>
<p>With <a href="http://webpagetest.org">WebPageTest.org</a> it is quite easy to measure load
times, render times, asset loading times and non cached assets. WPT even shows
which assets should be cached or served via a CDN. Initially it checks for First
View  and Repeat View and outputs a table of numbers and fancy graphics. The
thing I&rsquo;ve been most interested in were First View and Content Breakdown. The
Content Breakdown showed that ~66% of our landing page consist of images so
optimizing these images (see below) was a natural approach to boost performance.
When testing with WebPageTest I like to select the second fastest Internet
connection and a location somewhere relevant (for this site America, for our own
somewhere in Germany).</p>
<p>Then I watch the videos and see how the loading wents on. At first it was a
blank page and after 2.5s the page &ldquo;suddenly&rdquo; rendered all content at once. This
was not the desired behavior and so I started testing more.</p>
<h4 id="chrome-developer-tools">(Chrome) Developer Tools</h4>
<p>Using the Developer Tools I cleared the cache and measured a &ldquo;fresh&rdquo; load of our
site to see how content is loaded and where rendering starts. It turned out that
rendering was blocked by several JavaScript files (third party) and Google
Fonts, which where loaded from within our CSS files as well as the high amount
of non-optimized images. All these things can be seen in the Network Tab.</p>
<p>In Chrome there are 2 vertical lines - blue and red. The blue line marks the
time at which the <code>DOMContentLoaded</code> event is fired, that is when the DOM is
ready to be manipulated by JavaScript. The red line marks the moment where the
<code>load</code> event fires. This event indicates that all content (CSS, JavaScript,
Images, etc.) has been loaded.</p>
<blockquote>
<p>Measuring performance and finding obvious bottlenecks has become fairly easy
nowadays. With Tools like <a href="http://webpagetest.org">WebPageTest.org</a>, Developer
Tools or automated testing suits there are a ton of ways to analyze a
the loading behavior of a website.</p>
</blockquote>
<p>With these two tools I started tracking down the various performance issues.
First of all the blocking JavaScript and a bit of unused code.</p>
<h3 id="unused-code">Unused Code</h3>
<p>While checking the Network Tab in Chrome Dev Tools I&rsquo;ve seen that out of 16 Requests
one JavaScript Analytics Library was blocking the
rendering by almost 600-800ms. Because it was barely used I removed this one so
there was already a big improvement by removing unused or barely used code - one
should always check for unused plugins, libs and CSS - this is the most basic
&ldquo;improvement&rdquo; and optimization.</p>
<blockquote>
<p>Regularly refactor your code base to see where unused code exists or
code can be optimized. By ueing a Pre-Processor it&rsquo;s easy to remove the code
from production but keep it for later by using an <a href="http://sass-guidelin.es/#main-file">import system</a>.</p>
</blockquote>
<h3 id="minify">Minify</h3>
<p>Minifying files is always a good thing. No doubt. Use
<a href="https://github.com/mishoo/UglifyJS">Uglify</a> for JavaScript
and your favorite pre-proccessor&rsquo;s compress function.</p>
<h3 id="images">Images</h3>
<p>Next I found that our landing page is pretty image heavy, especially with a big
banner image. To reduce the size I searched for plugins to automate the process
but couldn&rsquo;t find a good one so I tried out <a href="http://pngquant.org/">PNGQuant</a> a
Command Line tool for PNG optimization. With this tool I could reduce the size
of almost any image by 50-70% which again reduced the load time by 100-200ms.</p>
<blockquote>
<p>Always optimize images, either with a tool before uploading them or with a
Plugin. Not optimizing images is a waste of time (literally) and bad for users.</p>
</blockquote>
<h3 id="fonts">Fonts</h3>
<p>As I mentioned earlier, rendering was also blocked by Google Fonts being
directly included into our Stylesheets. Out of curiosity I checked if loading it
asynchronously via the provided snippet from Google Fonts would help and indeed
it did! We saved almost 100ms simply by loading the Font files asynchronously.</p>
<p>On the very First View this can make the content &lsquo;jump&rsquo; a bit because the
initial view loads with a fallback font (sans-serif, for example) and then once
the Font is loaded from Google&rsquo;s CDN it replaces the old font with the new font
on-the-fly. This may looks ugly and if you absolutely can not live with it you
must take the 100ms-slower Pill and include the fonts in your CSS where they&rsquo;ll
be loaded before the CSS is rendered - therefore no delay.</p>
<p>Below is the function that&rsquo;ll load the fonts via a script tag that as the
<code>async</code> attribute set.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">WebFontConfig</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">google</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">families</span><span style="color:#f92672">:</span> [ <span style="color:#e6db74">&#39;Open+Sans:400,300,600:latin&#39;</span> ] }
};
(<span style="color:#66d9ef">function</span>() {
 <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wf</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;script&#39;</span>);
 <span style="color:#a6e22e">wf</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;https:&#39;</span> <span style="color:#f92672">==</span> document.<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">protocol</span> <span style="color:#f92672">?</span> <span style="color:#e6db74">&#39;https&#39;</span>
   <span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;http&#39;</span>) <span style="color:#f92672">+</span>
 <span style="color:#e6db74">&#39;://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js&#39;</span>;
 <span style="color:#a6e22e">wf</span>.<span style="color:#a6e22e">type</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;text/javascript&#39;</span>;
 <span style="color:#a6e22e">wf</span>.<span style="color:#a6e22e">async</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;true&#39;</span>;
 <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">s</span> <span style="color:#f92672">=</span>
 document.<span style="color:#a6e22e">getElementsByTagName</span>(<span style="color:#e6db74">&#39;script&#39;</span>)[<span style="color:#ae81ff">0</span>];
 <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">parentNode</span>.<span style="color:#a6e22e">insertBefore</span>(<span style="color:#a6e22e">wf</span>, <span style="color:#a6e22e">s</span>);
 })(); 
</code></pre></div><blockquote>
<p>Font rendering from within CSS can block the overall load time of the CSS
file. Splitting out the fonts from the CSS and loading them via JavaScript (if
possible) may increase the initial load time of the website.</p>
</blockquote>
<h3 id="server-side-optimizations">Server-side optimizations</h3>
<p>There&rsquo;s quite a lot to do when optimizing from the server side. From things like
optimizing Queries, Caching Queries to using the variety of Apache or Nginx
Modules and settings to optimize the servers workflow. While we have our site at
a specific WordPress Hoster our access to server features is mainly limited to
their admin interface and using the <code>.htaccess</code> - which is what I did.</p>
<h4 id="expire-dates">Expire Dates</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"># caching for 1 month
&lt;<span style="color:#f92672">IfModule</span> <span style="color:#a6e22e">mod_expires</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#a6e22e">c</span>&gt;
 ExpiresActive On
 ExpiresByType text/css &#34;access plus 1 month&#34;
 ExpiresByType text/javascript &#34;access plus 1 month&#34;
 ExpiresByType text/html &#34;access plus 1 month&#34;
 ExpiresByType application/javascript &#34;access plus 1 month&#34;
 ExpiresByType image/gif &#34;access plus 1 month&#34;
 ExpiresByType image/jpeg &#34;access plus 1 month&#34;
 ExpiresByType image/png &#34;access plus 1 month&#34;
 ExpiresByType image/x-icon &#34;access plus 1 month&#34;

  &lt;<span style="color:#f92672">FilesMatch</span> <span style="color:#960050;background-color:#1e0010">&#34;\.(</span><span style="color:#a6e22e">gif</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">jpe</span><span style="color:#960050;background-color:#1e0010">?</span><span style="color:#a6e22e">g</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">png</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">ico</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">css</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">js</span><span style="color:#960050;background-color:#1e0010">)$&#34;</span>&gt;
    Header set Cache-Control &#34;public&#34;
  &lt;/<span style="color:#f92672">FilesMatch</span>&gt;
&lt;/<span style="color:#f92672">IfModule</span>&gt;
</code></pre></div><h4 id="compression-with-mod_deflate">Compression with mod_deflate</h4>
<p>With this snippet above we tell the server to cache certain file types by 1
month (if they don&rsquo;t change of course). This way the server can sent back the
files from its cache instead of re-generating the files all the time. Next I
used <code>mod_deflate</code> to compress the files before they are sent to the client.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"># Deflate Compression by FileType
&lt;<span style="color:#f92672">IfModule</span> <span style="color:#a6e22e">mod_deflate</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#a6e22e">c</span>&gt;
 AddOutputFilterByType DEFLATE text/plain
 AddOutputFilterByType DEFLATE text/html
 AddOutputFilterByType DEFLATE text/xml
 AddOutputFilterByType DEFLATE text/css
 AddOutputFilterByType DEFLATE text/javascript
 AddOutputFilterByType DEFLATE application/xml
 AddOutputFilterByType DEFLATE application/xhtml+xml
 AddOutputFilterByType DEFLATE application/rss+xml
 AddOutputFilterByType DEFLATE application/atom_xml
 AddOutputFilterByType DEFLATE application/javascript
 AddOutputFilterByType DEFLATE application/x-javascript
&lt;/<span style="color:#f92672">IfModule</span>&gt;
</code></pre></div><p>Now all our files are cached and gzip (compressed). Additionally our Hoster has
its own cache (Varnish) which should benefit to our sites overall performance, too.</p>
<blockquote>
<p>Use your servers configuration to serve compressed and/or cached files instead
of re-generating the files on every request. Make sure to cache static content
like images, javascript or css.</p>
</blockquote>
<h3 id="lazy-load-javascript">Lazy-load JavaScript</h3>
<p>We&rsquo;ve been using our own delayed load for JavaScript assets ever since I started
working at <a href="http://synoa.de">Synoa</a>. We use the following function to include
our minified JavaScript after the DOM is loaded, if possible.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">loadAfterDom</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">script</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;script&#39;</span>);
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">body</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">body</span>;
  
  <span style="color:#a6e22e">script</span>.<span style="color:#a6e22e">type</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;text/javascript&#39;</span>;
  <span style="color:#a6e22e">script</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;path/to/main.min.js&#39;</span>;
  
  document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">script</span>);
}
<span style="color:#75715e">// load the script when the DOM is constructed
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span>(window.<span style="color:#a6e22e">addEventListener</span>) {
  window.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;DOMContentLoaded&#39;</span>, <span style="color:#a6e22e">loadAfterDom</span>, <span style="color:#66d9ef">false</span>);
} <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(window.<span style="color:#a6e22e">attachEvent</span>) {
  window.<span style="color:#a6e22e">attachEvent</span>(<span style="color:#e6db74">&#39;load&#39;</span>, <span style="color:#a6e22e">loadAfterDom</span>);  
} <span style="color:#66d9ef">else</span> {
  window.<span style="color:#a6e22e">onload</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">loadAfterDom</span>;  
}
</code></pre></div><p>This little script loads the <code>main.min.js</code> file after the DOM is constructed so
it doesn&rsquo;t block the rendering of the page.</p>
<blockquote>
<p>Lazy loading JavaScript only works when JavaScript is not needed for the
initial view (which it shouldn&rsquo;t). When you need JavaScript on render time to
hide elements, for example, it may be better to hide them initially and show them after the
page is loaded!</p>
</blockquote>
<h3 id="what-could-be-done-next">What could be done next?</h3>
<p>Next we could think about inlining our Critical Path CSS using a Grunt or Gulp
task, as Google PageSpeed suggests all the time. I&rsquo;ve yet never done this before
and need to try it before I can say if it&rsquo;s worth or not.</p>
<p>In another round we could review the entire code base and replace the legacy
Compass compiler with modern, <a href="https://github.com/sass/node-sass">node-sass</a> and
<a href="https://github.com/sass/libsass">Libsass</a>, a C++ implementation of Sass that is
a lot faster than Ruby, to increase compile performance. Most of the vendor
prefixing is done using own mixins or compass functions (which are legacy), so
handing the prefixing job to <a href="https://github.com/postcss/autoprefixer">Autoprefixer</a>
is another desirable improvement.</p>
<h3 id="result">Result</h3>
<p>At this point, our website performs at 900ms-1.2s in load time for the front page
and 700-800ms for most sub pages. Yet there is still optimization that need to
be done, especially the question on how to integrate the optimization into
everyone&rsquo;s workflow. While developers could use a grunt/gulp/cli task the people
who actually write content need an easy way to handle the optimization of
uploaded files. The last resort of more optimization is the server respond time
on which we don&rsquo;t have any influence.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/tags/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/css" term="css" label="css"/></entry><entry><title type="html">Endless Multi-Dimensional Navigation</title><link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/?utm_source=atom_feed" rel="related" type="text/html" title="A closer look to closure"/><link href="https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/?utm_source=atom_feed" rel="related" type="text/html" title="Passing Arguments in JavaScript"/><link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="related" type="text/html" title="Pure JavaScript slider"/><link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/?utm_source=atom_feed" rel="related" type="text/html" title="To infinity and beyond"/><link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="related" type="text/html" title="i-js"/><id>https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/</id><published>2014-08-22T00:00:00+00:00</published><updated>2014-08-22T00:00:00+00:00</updated><content type="html"><![CDATA[<p>The past I decided to get my head around multi-dimensional navigations, like navigations that can have (endless) sub navigations nested inside them and so I started to try some ideas on <a href="http://codepen.io">CodePen</a>. My first idea was to have a trigger element that, when clicked, triggeres the nearest Sub Navigation to activate it (e.g. giving it an <code>open</code> class). The JavaScript for this looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">d</span> <span style="color:#f92672">=</span> document,
    <span style="color:#a6e22e">trigger</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">d</span>.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;#trigger&#39;</span>),
    <span style="color:#a6e22e">subNav</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">trigger</span>.<span style="color:#a6e22e">parentNode</span>.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;.sub-nav&#39;</span>);

<span style="color:#a6e22e">trigger</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;click&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
  <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">preventDefault</span>(); <span style="color:#75715e">// cancels reload on &lt;a&gt; tags
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">subNav</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">toggle</span>(<span style="color:#e6db74">&#39;open&#39;</span>);
});
</code></pre></div><p>So with this, each time the trigger is clicked the sub navigation will get the class applied or removed
(<code>classList.toggle()</code>). The <code>subNav</code> class is markup related, because the trigger is inside a <code>&lt;li&gt;</code>, as well as the sub
nav, so <code>this.parentNode</code> will return the <code>&lt;li&gt;</code> element.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">ul</span>&gt;
  &lt;<span style="color:#f92672">li</span>&gt;
    &lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;trigger&#34;</span>&gt;+&lt;/<span style="color:#f92672">span</span>&gt; <span style="color:#75715e">&lt;!-- this.parentNode returns the &lt;li&gt;
</span><span style="color:#75715e">      &lt;ul class=&#34;sub-nav&#34;&gt;
</span><span style="color:#75715e">        ...
</span><span style="color:#75715e">      &lt;/ul&gt;
</span><span style="color:#75715e">  &lt;/li&gt;
</span><span style="color:#75715e">&lt;/ul&gt;
</span></code></pre></div><p>So the basic markup for navigations is now like this</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"> &lt;<span style="color:#f92672">ul</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;my-nav-wrapper-class&#34;</span>&gt;
    &lt;<span style="color:#f92672">li</span> <span style="color:#a6e22e">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span>&gt; Sub nav &lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;xy&#34;</span> <span style="color:#a6e22e">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span>&gt;+&lt;/<span style="color:#f92672">span</span>&gt;
      &lt;<span style="color:#f92672">ul</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sub-nav&#34;</span> <span style="color:#a6e22e">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
      &lt;/<span style="color:#f92672">ul</span>&gt;
    &lt;/<span style="color:#f92672">li</span>&gt;
 &lt;/<span style="color:#f92672">ul</span>&gt;
</code></pre></div><p>One of the most important things here is the <code>data-id</code> attribute which groups the navigations, triggers and (endless)
sub navigations together and is used to reference each of them.</p>
<h3 id="event-bubbling">Event Bubbling</h3>
<p>Yet before we get to the actual code it&rsquo;s important to understand event bubbling. If you already know what it is skip
this section and continue with &ldquo;Finaly: Code&rdquo; below.
Event Bubbling is the concept of how the browser handles events. Your&rsquo;re most likly familiar with <code>e.preventDefault()</code>
for click events applied to <code>&lt;a&gt;</code>-tags. This function stops the normal event bubbling so the browser doesn&rsquo;t reload
the page - which is the default action for <code>&lt;a&gt;</code>-tags.
So in our case the behavior we make use of is event bubbling, as said before. Take a look at the graphic below and then
read on.
<img src="https://i.kevingimbel.me/sc/event_flow_v1.png" alt="&ldquo;Event Bubbling for this navigation&rdquo;">
When the even get&rsquo;s triggered it finds no handler and the event literally goes up the DOM until it finds a handler. Node
by node the little event walks up until finally the navigation wrapper says &ldquo;Yes little event! I got you, I&rsquo;ll handle
that!&rdquo; - and that&rsquo;s it. When the handler attached to the navigation handles the event it will also populate it&rsquo;s <code>el</code>
variable with whatever <code>e.target</code> currently is. <code>e.target</code> happens to always be the <strong>triggering element</strong>, so it is
very similar to <code>this</code>, yet even more flexible!</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/></entry><entry><title type="html">A closer look to closure</title><link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/?utm_source=atom_feed" rel="related" type="text/html" title="Passing Arguments in JavaScript"/><link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="related" type="text/html" title="Pure JavaScript slider"/><link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/?utm_source=atom_feed" rel="related" type="text/html" title="To infinity and beyond"/><link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="related" type="text/html" title="i-js"/><id>https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/</id><published>2014-07-20T00:00:00+00:00</published><updated>2014-07-20T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Closure is a very interesting concept in JavaScript. It basically determinse where and how variables or
functions are accessable and where not. Since this is an essential part of JavaScript and one can run into quite some
problems I want to try and give short introduction to closure and what it can be good for. It&rsquo;s good to have at least
basic understanding of JavaScript.</p>
<p>So before I start I&rsquo;d like to say that I consider myself a JavaScript beginner and this is how I understand closure
and scopes at the moment. If you happen to find mistakes please <a href="https://twitter.com/_kevinatari">tweet me</a> or <a href="https://github.com/kevingimbel/kevingimbel.github.io/issues?page=1&amp;state=open">open an
issue</a>.</p>
<p>Consider the following example</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;

(<span style="color:#66d9ef">function</span>(){
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
}());

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">x</span>);
</code></pre></div><p>What value will <code>x</code> have when logged to the console? 5 or 10? The correct answer is 5, because inside the immediate
executing function <code>var x</code> does not reference the previously defined <code>var x</code>. They&rsquo;re both standalone and do not effect
each other. Let&rsquo;s try this again and see what happens now</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;

(<span style="color:#66d9ef">function</span>() {
  <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
}());

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">x</span>);
</code></pre></div><p>What value will <code>x</code> have now? Still 5, because it&rsquo;s the same function but we only left the <code>var</code> keyword? Nope, now <code>x</code>
inside the immediate executing function references the previously defined <code>var x</code> and will update it&rsquo;s value, so
<code>console.log(x)</code> results to 10 this time. As you can see just now, leaving out the single word <code>var</code> can change how your
program behaves. The missing var statment, where closure hits hard and overrides the variable, can really be annoying
because JavaScript doesn&rsquo;t throw errors. Overriding values inside a closure, e.g. the immediate executing function, is
perfectly fine.</p>
<p>So what happens if we pass <code>x</code>, which is 10 now, to the immediate executing function and declare &lsquo;x = 15&rsquo; inside the
functions body? Will <code>x</code> become 15 or stay 10?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">// x is 10 at this point
</span><span style="color:#75715e"></span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">x</span>){
	<span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">15</span>;
}(<span style="color:#a6e22e">x</span>));
</code></pre></div><p>As the result shows, x is still 10. But wait, wasn&rsquo;t it supposed to be overridden if we don&rsquo;t declare <code>var x = 15</code>? Well
that is true, but since we pass x as a parameter, x is &ldquo;re-defined&rdquo; as a local variable and, inside the functions body, it is
indeed 15 - outside it is not.</p>
<!-- raw HTML omitted -->
<h3 id="what-can-closures-do-for-me">What can closures do for me?</h3>
<p>What can it do? Good stuff. Closures can help to organize code and keep the global namespace clear. In general one shouldn&rsquo;t write variables into the global namespace because they&rsquo;re almost asking to be overriden or changed. Let&rsquo;s say one writes a function like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">assert</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">con</span>, <span style="color:#a6e22e">msg</span>) {
  <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">con</span>) {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#a6e22e">msg</span>);
  } <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">msg</span>);
  }
}
</code></pre></div><p>That&rsquo;s a super simple assert function to see if a statment (<code>con</code>dition) is true or false. If it&rsquo;s false we&rsquo;ll log a console.error(), if not we&rsquo;ll log a normal console.log() statement. This is great and perfectly fine unless someone else
tries to use a function with the same name. Then there&rsquo;ll be a &ldquo;conflict&rdquo; and the last declared function overrides the other. (In this example I&rsquo;ll use a function called myFunction)</p>
<!-- raw HTML omitted -->
<p>So still, what can closure do for me? It can save my declared functions - inside a closure. So far all closure examples were immediate executing function, but Objects also create closures, assigning all there properties to a specific &ldquo;namespace&rdquo;.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myFunction</span>() <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
}

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myNamespace</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">myFunction</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>() {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
  }
}
</code></pre></div><p>This way we introduce one variable to the global scope: myNamespace and keep all the functions inside this scope.
Therefore, the myFunction() is still accessable within the scope and has the expected results, no matter who
declares myFunction in the globale scope.</p>
<!-- raw HTML omitted -->
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/tags/closure" term="closure" label="closure"/><category scheme="https://kevingimbel.de/tags/scoping" term="scoping" label="scoping"/></entry><entry><title type="html">Passing Arguments in JavaScript</title><link href="https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="related" type="text/html" title="Pure JavaScript slider"/><link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/?utm_source=atom_feed" rel="related" type="text/html" title="To infinity and beyond"/><link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="related" type="text/html" title="i-js"/><id>https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/</id><published>2014-05-23T00:00:00+00:00</published><updated>2014-05-23T00:00:00+00:00</updated><content type="html"><![CDATA[<p>One of my favorite aspects of JavaScript is that it is unbelievable flexible. I am currently reading &ldquo;Secrets of the JavaScript Ninja&rdquo; by the amazing <a href="http://ejohn.org">John Resig</a> and try to play around with JavaScript whenever I&rsquo;ve the time to do so. Just yesteday I needed to pass as many arguments to a function as the user wants which means I can&rsquo;t check for every possible thingy. Anyway, I&rsquo;ll cover this in a small write-up aka a blog post. Yay!</p>
<p>First of all we should have some use case or scenario. I needed the a variable number of options for my <a href="https://github.com/bullgit/Bulllog">Bulllog</a> script that takes any number of CSS oroperty-value pairs and applies them to your console.logs (Chrome only, sadly). Anyway, CSS is a good example in my opinion so we&rsquo;ll write a small css() function that can be applies to an element.</p>
<p>First of all, what should this function do? It should:</p>
<ul>
<li>Take any number of CSS property-value pairs</li>
<li>apply them to our element</li>
<li>respond (console.log()) errors if any happen</li>
</ul>
<h3 id="the-functions">The functions</h3>
<p>We&rsquo;ll start with the basic: getting an element and manipulating its CSS.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">	<span style="color:#75715e">// Getting the element
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>( <span style="color:#e6db74">&#39;.test&#39;</span> );
	<span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">background</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;red&#39;</span>;
	<span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">style</span>[<span style="color:#e6db74">&#39;background&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;black&#39;</span>;
</code></pre></div><p>Both of the above ways (<code>el.style.background</code> and <code>el.style['background']</code>) work the exact same way. But that&rsquo;s not much fun, right? Why should we want to set our styles this way and where&rsquo;s the dynamic functional stuff at all? Lets extend the script with a <code>css</code> function.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">css</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">css</span>( <span style="color:#a6e22e">el</span>, <span style="color:#a6e22e">options</span> ) {
	<span style="color:#75715e">/*1 */</span>
  <span style="color:#66d9ef">if</span>( <span style="color:#66d9ef">typeof</span>(<span style="color:#a6e22e">el</span>) <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;object&#39;</span> ) {
    <span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">el</span>;
  } <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>( <span style="color:#a6e22e">el</span> );
  }
	<span style="color:#75715e">/* 2 */</span>
  <span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">style</span>[<span style="color:#a6e22e">opts</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;red&#39;</span>;
}
</code></pre></div><p>What this script does:</p>
<ol>
<li>check if el is already an object, if so we don&rsquo;t need to select it again. That&rsquo;d be the case if we pass the previously defined <code>el</code> directly to the function.  We can also use <code>css('.my-class', 'background');</code></li>
<li>Set the desired property, e.g. background, color to be red.</li>
</ol>
<p>Alright, that&rsquo;s not bad but why should we want to sett everything to red? You&rsquo;re right - we don&rsquo;t want this. Next up: for in loops!</p>
<h3 id="for-key-in-obj">For key in obj</h3>
<p>For loops are always fun and especially <code>for in</code> loops. They&rsquo;re perfect for our needs because we&rsquo;ll pass a list (or better an Object) with property-value pairs to our function and need to process them so they can be applies as styles. Our modified function now looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">css</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">css</span>( <span style="color:#a6e22e">el</span>, <span style="color:#a6e22e">options</span> ) {
	<span style="color:#66d9ef">if</span>( <span style="color:#66d9ef">typeof</span>( <span style="color:#a6e22e">el</span> ) <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;object&#39;</span> ) {
		<span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">el</span>;
	} <span style="color:#66d9ef">else</span> {
		<span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#a6e22e">el</span>);
	}
	<span style="color:#75715e">/* 1 */</span>
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">styleProperties</span> <span style="color:#f92672">=</span> [],
      <span style="color:#a6e22e">styleValues</span> <span style="color:#f92672">=</span> [];
  <span style="color:#75715e">/* 2 */</span>
  <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">key</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">options</span>) {
    <span style="color:#75715e">/* 3 */</span>
		<span style="color:#a6e22e">styleProperties</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">key</span>);
    <span style="color:#a6e22e">styleValues</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">options</span>[<span style="color:#a6e22e">key</span>])
  }
}
</code></pre></div><ol>
<li>We need to create an empty array to store all our property-value pairs in.</li>
<li>We start our for in loop. We go over every key in our options object.</li>
<li>Every propery-value pair gets pushed into our arrays, the properties into the <code>styleProperties</code> array and the values into the <code>styleValues</code> array.
I&rsquo;m sure there is a more elegant way to do this, but I couldn&rsquo;t really think of any - so I&rsquo;m as always up for improvments!</li>
</ol>
<p>Our <code>css()</code> function just got a lot more flexible! Before we could only set any property to one value (everything we want to <code>red</code>), now we can pass a lot of property-value pairs and they&rsquo;ll get processes by our function! Awesome, right?
Calling the function would now look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">	<span style="color:#a6e22e">css</span>(<span style="color:#e6db74">&#39;.my-div&#39;</span>, {
	  <span style="color:#a6e22e">color</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;yellow&#39;</span>,
	  <span style="color:#a6e22e">background</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#333&#39;</span>
	});
</code></pre></div><h3 id="almost-there">Almost there</h3>
<p>So far we can pass a list (object) of property-value pairs and process them into two nice arrays. However, the function does not apply these styles yet which is why we have to do one last step.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">  <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">styleProperties</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">style</span>[<span style="color:#a6e22e">styleProperties</span>[<span style="color:#a6e22e">i</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">styleValues</span>[<span style="color:#a6e22e">i</span>];
  }
</code></pre></div><p>We iterate over the array (doesn&rsquo;t matter which because both are exatctly the same size) and extract the matching properties and values. That&rsquo;s the point where we actually apply the styles.</p>
<p>The result looks like this.</p>
<!-- raw HTML omitted -->
<p>With this technique you can make any function accept any amount of property-value pairs by simply passing in an object. This would also work when you define the object itsef as a variable (see the second div). It&rsquo;s important to know that properties like <code>font-size</code> must be written in quotes (e.g. <code>&quot;font-size&quot;: &quot;1em&quot;</code>), otherwise the script will fail.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/></entry><entry><title type="html">Pure JavaScript slider</title><link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/?utm_source=atom_feed" rel="related" type="text/html" title="To infinity and beyond"/><link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="related" type="text/html" title="i-js"/><id>https://kevingimbel.de/blog/2014/02/pure-javascript-slider/</id><published>2014-02-22T00:00:00+00:00</published><updated>2014-02-22T00:00:00+00:00</updated><content type="html"><![CDATA[<p>The great thing when you&rsquo;re a beginner in any programming language (or in anything in general) is, that even small successes make you happy and proud of what you did. I&rsquo;m very  proud of my <a href="http://kevingimbel.com/to-infinity-and-beyond/">back to top script</a> even though it&rsquo;s not perfect at all. I could make a back to top button with jQuery in a few minutes but it wouldn&rsquo;t be that much fun. However, I made another JavaScript thing I&rsquo;m proud of: A pure JavaScript slider.</p>
<!-- raw HTML omitted -->
<p>The slider runs forever in a loop, animating images to the left until the last image is reached. When the last image is reached it will animate all back to the first image (I&rsquo;m not happy with this animation yet) and will start over. Pretty simple. The hardest part for me was - and still is - the animation timing. I&rsquo;m may over-thinking stuff but I can&rsquo;t figure out a formula to calculate a good timing based on how many images the slider has. If someone has an idea, fork the pen or <a href="http://twitter.com/_kevinatari">tweet me</a>.</p>
<p>First of all I defined some variables.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">     <span style="color:#75715e">// current image is 0
</span><span style="color:#75715e"></span> <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">current</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
     <span style="color:#75715e">// used for loops
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">i</span>,
     <span style="color:#75715e">// the whole slider element
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">slider</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;[data-js=&#34;sslide&#34;]&#39;</span>),
     <span style="color:#75715e">// all images inside the slider
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">allImages</span> <span style="color:#f92672">=</span>  <span style="color:#a6e22e">slider</span>.<span style="color:#a6e22e">querySelectorAll</span>(<span style="color:#e6db74">&#39;img&#39;</span>),
     <span style="color:#75715e">// the width of 1 image based on all images (used in % later)
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">imgWidth</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">ceil</span>(<span style="color:#ae81ff">100</span> <span style="color:#f92672">/</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span>),
     <span style="color:#75715e">// the slider width based on the number of images
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">sliderWidth</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>;
</code></pre></div><p>Next I set the width of all images as well as the slider.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    
  <span style="color:#a6e22e">slider</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">width</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">sliderWidth</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;%&#39;</span>;
    
  <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#a6e22e">allImages</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">width</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">imgWidth</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;%&#39;</span>;
  }
</code></pre></div><p>Now the slider and images have the correct width (in percent) and I began to make the animation part. It&rsquo;s made with the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.setInterval">setInterval</a> JavaScript function.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">animateLeft</span>(<span style="color:#a6e22e">cur</span>) {
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
          <span style="color:#a6e22e">time</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">animate</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span>() {
      <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">imgWidth</span>) {
        <span style="color:#a6e22e">allImages</span>[<span style="color:#a6e22e">cur</span>].<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">marginLeft</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">i</span>  <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;%&#34;</span>;
        <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>;
      } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">clearInterval</span>(<span style="color:#a6e22e">animate</span>);
      }
      }, <span style="color:#a6e22e">time</span>);  
   }
</code></pre></div><p>The interval runs as long as <code>i</code> is smaller or equal to the image width. Because the interval is set to 50ms it runs &ldquo;fast&rdquo; and sets the images <code>margin-left</code> rapidly to <code>-i%</code> and because it runs as long as <code>i</code> is smaller than the image width it hides the image completely to the left. Pretty simple right? However, <code>time</code> is at the moment a variable that is set to 50 because I couldn&rsquo;t figure out a good way to calculate it.</p>
<p>Another function I use is <code>animateRight</code> that is just the opposite of <code>animateLeft</code>. It is only used to animate all images back to the start and has the same markup as <code>animateLeft</code> expect it runs revers (<code>i--</code>). I combine it with a <code>reset</code> function that also resets the <code>current</code> variable to 0.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">  <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">animateRight</span>(<span style="color:#a6e22e">cur</span>) {
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">imgWidth</span>,
          <span style="color:#a6e22e">time</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">animate</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span>() {
      <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">sliderWidth</span>) {
        <span style="color:#a6e22e">allImages</span>[<span style="color:#a6e22e">cur</span>].<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">marginLeft</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;%&#34;</span>;
        <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span>;
      } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">clearInterval</span>(<span style="color:#a6e22e">animate</span>);
      }
      }, <span style="color:#a6e22e">time</span>);  
   } 
    
    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">reset</span>() {
      <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">animateRight</span>(<span style="color:#a6e22e">i</span>);
      }
      <span style="color:#75715e">// resseting the current image to the first image
</span><span style="color:#75715e"></span>      <span style="color:#a6e22e">current</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    }   
</code></pre></div><p>That&rsquo;s all the functions I needed for this slider - I could&rsquo;ve combined the <code>animateLeft</code> and <code>animateRight</code> function and if I continue developing this slider I&rsquo;ll make it. Last thing to do: Call a final interval that handles the sliding of all images.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span> () {
      <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">current</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>) {
        <span style="color:#a6e22e">animateLeft</span>(<span style="color:#a6e22e">current</span>);
        <span style="color:#a6e22e">current</span><span style="color:#f92672">++</span>;
        
      } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">reset</span>();
      }
    }, <span style="color:#ae81ff">3000</span>);
</code></pre></div>]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/></entry><entry><title type="html">To infinity and beyond</title><link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="related" type="text/html" title="i-js"/><id>https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/</id><published>2013-11-18T00:00:00+00:00</published><updated>2013-11-18T00:00:00+00:00</updated><content type="html"><![CDATA[<p>While I was re-designing my Website I decided to finally add some JavaScript to it. I&rsquo;m learning JavaScript for like 2 months now and - to be honest - I finally understand most of the things I&rsquo;m doing. Yesterday night&rsquo;s topic was a &ldquo;Back to Top&rdquo; Button written in Vanilla JS. Actually the code behind it is <em>kinda</em> simple, however, I wrote an endless function that got to infinity and beyond (that&rsquo;s where the title comes from. I&rsquo;m so funny.)</p>
<p>Because I still like to google around while writing JavaScript I stumbled upon a function that looked okay to me.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">scrollToTop</span>() {
  <span style="color:#66d9ef">if</span> (document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">scrollTop</span><span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> document.<span style="color:#a6e22e">documentElement</span>.<span style="color:#a6e22e">scrollTop</span><span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>){
    window.<span style="color:#a6e22e">scrollBy</span>(<span style="color:#ae81ff">0</span>,<span style="color:#f92672">-</span><span style="color:#ae81ff">50</span>);
    <span style="color:#a6e22e">timeOut</span><span style="color:#f92672">=</span><span style="color:#a6e22e">setTimeout</span>(<span style="color:#e6db74">&#39;scrollToTop()&#39;</span>,<span style="color:#ae81ff">10</span>);
  }
  <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">clearTimeout</span>(<span style="color:#a6e22e">timeOut</span>);
}
</code></pre></div><p>The problem with this one was: It didn&rsquo;t work. So I looked around and found <code>setInterval()</code> which seemed to me a bit like <code>setTimeout</code> and - in my opinion - would mix perfect with <code>scrollBy(x,y)</code>. I was right, hurray!</p>
<p>So my function then looked a bit like this (I&rsquo;m not exactly sure, it was kinda late already).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">scrollToTop</span>() {
    <span style="color:#66d9ef">if</span>(window.<span style="color:#a6e22e">scrollY</span><span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>) {
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">scrollBack</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span>() {
            window.<span style="color:#a6e22e">scrollBy</span>(<span style="color:#ae81ff">0</span>,<span style="color:#f92672">-</span><span style="color:#ae81ff">50</span>);
        },<span style="color:#ae81ff">10</span>);
    } <span style="color:#66d9ef">else</span> {
      <span style="color:#a6e22e">clearInterval</span>(<span style="color:#a6e22e">scrollBack</span>);
    };
  }   
</code></pre></div><p>I applied the function to a button, the page scrolled up and I was happy. I <a href="https://twitter.com/_kevinatari/status/402189289422721024">tweeted</a> about it just to find out that my Interval wasn&rsquo;t cleared and I <a href="https://twitter.com/_kevinatari/status/402190105533640704">could never scroll down again</a> after the function was triggered. Yeah! Awesome.</p>
<p>Well, I thought more about it and read again about <code>setInterval</code> and - most important - the actual object I&rsquo;m checking. <code>scrollY</code> was the right direction and I decided it must be the Interval that&rsquo;s wrong. I was right and came up with this sweet function!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// notice: backTop is my back to top button!
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">backTop</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#34;click&#34;</span>,<span style="color:#66d9ef">function</span>() {
    <span style="color:#75715e">// setting an interval 
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">toTop</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span>() {
      <span style="color:#75715e">// if we&#39;re not on top of the page
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span>(window.<span style="color:#a6e22e">scrollY</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
          <span style="color:#75715e">// we scroll back to the top [scrollBy(x,y)]
</span><span style="color:#75715e"></span>        window.<span style="color:#a6e22e">scrollBy</span>(<span style="color:#ae81ff">0</span>,<span style="color:#f92672">-</span><span style="color:#ae81ff">50</span>);

            <span style="color:#75715e">// in case we&#39;re at the top (window.scrollY = 0)
</span><span style="color:#75715e"></span>      } <span style="color:#66d9ef">else</span> {
              <span style="color:#75715e">// clear the interval
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">clearInterval</span>(<span style="color:#a6e22e">toTop</span>);
      }
    },<span style="color:#ae81ff">25</span>); <span style="color:#75715e">// the delay between the steps to go back to top. The smaller the number, the slower it goes
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// prevent the click to reload the page
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">preventDefault</span>();
  }); <span style="color:#75715e">// end of the Back to Top function
</span></code></pre></div><p>That&rsquo;s it! My sweet little Back To Top Function. I&rsquo;m sure there are points that could be improved and I&rsquo;m sure one could add easing to it (I already got something in mind) but for now I&rsquo;m happy with it.</p>
<p>(Also check out what else I discovered yesterday. It&rsquo;s an <a href="https://twitter.com/_kevinatari/status/402197154539651072">YouTube Eater Egg</a>!)</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/tags/vanilla_js" term="vanilla_js" label="vanilla_js"/></entry><entry><title type="html">i-js</title><link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://kevingimbel.de/blog/2013/10/i-js/</id><published>2013-10-14T00:00:00+00:00</published><updated>2013-10-14T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Today I decided to dig deeper into JavaScript and experiment a bit with scope, query selection and the general manipulation of the DOM. To do so I set up an object to store all my functions - this is not necessary but definitely more fun.</p>
<p>After naming my Object $ (because I new this from jQuery and I thought it would look cool) I renamed it to <code>I</code> and here comes the fun part: While learning JS I build i.js - a tiny JS &ldquo;Framework&rdquo; that enables you to write JS nearly the same you&rsquo;d speak.
For example you may thing: <em>&ldquo;I want to get the Object with the class name test&rdquo;</em> - to get this, simply write the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">I</span>.<span style="color:#a6e22e">WantA</span>.<span style="color:#a6e22e">classname</span>(<span style="color:#e6db74">&#34;test&#34;</span>);
</code></pre></div><p>This will return you the element that has the class <code>test</code>. Not so cool? Well, let&rsquo;s bring Events to the game!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">// Spoken: &#34;I want to add an Event that when you click on the 
</span><span style="color:#75715e">// element with the ID js-removeClass a FUNCTION triggers&#34;
</span><span style="color:#75715e"></span><span style="color:#a6e22e">I</span>.<span style="color:#a6e22e">WantTo</span>.<span style="color:#a6e22e">addEvent</span>(<span style="color:#e6db74">&#34;click&#34;</span>, <span style="color:#e6db74">&#34;js-removeClass&#34;</span>,<span style="color:#66d9ef">function</span>(){
	<span style="color:#a6e22e">I</span>.<span style="color:#a6e22e">WantTo</span>.<span style="color:#a6e22e">removeClass</span>(<span style="color:#e6db74">&#34;output&#34;</span>,<span style="color:#e6db74">&#34;lorem&#34;</span>);
});
</code></pre></div><p>The above script does the following:</p>
<ul>
<li>When <code>js-removeClass</code> is clicked</li>
<li>the class <code>lorem</code> will be removed from an element with the class <code>output</code></li>
</ul>
<p>You can find a working Demo on <a href="http://codepen.io/kevingimbel/pen/sgCae">CodePen</a> or <a href="http://kevingimbel.com/i.js/demo/">directly on my site</a>. If you want to contribute more functions I&rsquo;d be very happy!</p>
<p>Beside of this useless but fun Framework I also wrote a kinda useful function: <code>_match()</code>. <code>_match()</code> takes any value and checks if it&rsquo;s a ID, a class or an Tag Name. When it matches one of these it returns the correct element.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_match</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">el</span>) {
    <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#34;.&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">el</span>);
    <span style="color:#a6e22e">b</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#a6e22e">el</span>);
    <span style="color:#a6e22e">c</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementsByTagName</span>(<span style="color:#a6e22e">el</span>);
    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">a</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>;
    }
    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">b</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>;
    }
    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">c</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">undefined</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">c</span>[<span style="color:#ae81ff">0</span>];
    }
};
</code></pre></div>]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/></entry></feed>