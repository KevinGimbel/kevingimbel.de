<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://gohugo.io/" version="0.70.0">Hugo</generator><title type="html">automation on KevOps</title><link href="https://kevingimbel.de/tags/automation/" rel="alternate" type="text/html" title="HTML"/><link href="https://kevingimbel.de/tags/automation/index.xml" rel="alternate" type="application/rss+xml" title="RSS"/><link href="https://kevingimbel.de/tags/automation/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2020-06-09T15:34:06+02:00</updated><id>https://kevingimbel.de/tags/automation/</id><entry><title type="html">Auto SSL With apache2</title><link href="https://kevingimbel.de/blog/2020/01/auto-ssl-with-apache2/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2020/01/using-archetypes-in-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Using Archetypes in Hugo"/><link href="https://kevingimbel.de/blog/2017/01/bash-script-ws/?utm_source=atom_feed" rel="related" type="text/html" title="Bash script: ws"/><id>https://kevingimbel.de/blog/2020/01/auto-ssl-with-apache2/</id><published>2020-01-08T00:00:00+00:00</published><updated>2020-01-13T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Apache 2.4.30 and later supports an experimental module called <code>mod_md</code> which allows automatic SSL certificate management with Let&rsquo;s Encrypt as standard provider. This greatly simplifies the management of SSL certificates. Instead of setting up <a href="https://certbot.eff.org/">certbot</a> and cronjobs to automatically renew certs server administrators now only need to add a few lines to their virtual host files.</p>
<p>This guide assumes the operating system is <em>Ubuntu</em>! If you use a different distro some commands may be different.</p>
<h2 id="installing-a-new-apache-version">Installing a new apache version</h2>
<p>Since <code>mod_md</code> is only available with Apache 2.4.30+ we need a fairly new apache version. Sadly, the newest on Ubuntu 18.04. is 2.4.29, so we need to add a new ppa to install from first. <a href="https://launchpad.net/~ondrej/+archive/ubuntu/apache2">ondrej/apache2</a> seems to be what most people use and recommend, so we&rsquo;ll add this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">sudo add-apt-repository ppa:ondrej/apache2
sudo apt-get update
</code></pre></div><p>Next, apache can be updated</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ apt install apache2
</code></pre></div><p>Check the apache version</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ apache2 -v
Server version: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
Server built:   2019-08-21T20:43:21
</code></pre></div><h2 id="enabling-mod_md">Enabling mod_md</h2>
<p>First <code>mod_md</code> must be enabled. This can be done with <code>a2enmod</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ sudo a2enmod md
</code></pre></div><p>Next, Apache must be reload with <code>systemctl</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ systemctl reload apache2
</code></pre></div><p>Now the virtual host can be updated as shown in the minimal example below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-apache" data-lang="apache">ServerAdmin mailto:some-valid@email.com
MDCertificateAgreement accepted
MDomain test.kevingimbel.de

<span style="color:#f92672">&lt;VirtualHost</span> <span style="color:#e6db74">*:80</span><span style="color:#f92672">&gt;</span>
        ServerName test.kevingimbel.de
        <span style="color:#960050;background-color:#1e0010">[</span>...<span style="color:#960050;background-color:#1e0010">]</span>
<span style="color:#f92672">&lt;/VirtualHost&gt;</span>

<span style="color:#f92672">&lt;VirtualHost</span> <span style="color:#e6db74">*:443</span><span style="color:#f92672">&gt;</span>
        ServerName test.kevingimbel.de
        <span style="color:#960050;background-color:#1e0010">[</span>...<span style="color:#960050;background-color:#1e0010">]</span>
<span style="color:#f92672">&lt;/VirtualHost&gt;</span>
</code></pre></div><p>The following values are required for <code>mod_md</code> to work properly:</p>
<ul>
<li><code>ServerAdmin</code> with valid e-mail address</li>
<li><code>ServerName</code> in VirtualHost</li>
<li><code>MDomain</code> with valid domain name</li>
<li><code>MDCertificateAgreement accepted</code> to accept the ACME terms of service</li>
</ul>
<p>After making the changes, the server must be reloaded again.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ systemctl reload apache2
</code></pre></div><p>With the values in place the server will contact Let&rsquo;s Encrypt and retrieve a certificate, wire it up in the backend, and serve the website over https. The <a href="https://httpd.apache.org/docs/trunk/mod/mod_md.html" title="Read the Apache Documentation on mod_md">mod_md documentation</a> contains more configuration options as well as information on how to use a different Certificate Authority.</p>
<h2 id="update">Update</h2>
<h3 id="update-13012020">Update 13.01.2020</h3>
<p>Slight grammatical adjustments:</p>
<ul>
<li>Replaced double &ldquo;supports&rdquo; in first sentence with &ldquo;allows&rdquo; and &ldquo;setup&rdquo; with &ldquo;management&rdquo;</li>
<li>Replaced &ldquo;setups&rdquo; with &ldquo;setup and renewal&rdquo; in sub headline</li>
</ul>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/backend" term="backend" label="backend"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/tags/apache" term="apache" label="apache"/><category scheme="https://kevingimbel.de/tags/server" term="server" label="server"/><category scheme="https://kevingimbel.de/tags/automation" term="automation" label="automation"/><category scheme="https://kevingimbel.de/tags/security" term="security" label="security"/><category scheme="https://kevingimbel.de/tags/ssl" term="ssl" label="ssl"/><category scheme="https://kevingimbel.de/tags/ubuntu" term="ubuntu" label="ubuntu"/><category scheme="https://kevingimbel.de/tags/linux" term="linux" label="linux"/></entry><entry><title type="html">Using Archetypes in Hugo</title><link href="https://kevingimbel.de/blog/2020/01/using-archetypes-in-hugo/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2020/01/hugo-ignore-_index.md-in-list-templates/?utm_source=atom_feed" rel="related" type="text/html" title="Hugo: ignore _index.md in list templates"/><link href="https://kevingimbel.de/blog/2020/01/hugo-compare-dates-to-flag-old-content/?utm_source=atom_feed" rel="related" type="text/html" title="Hugo: compare dates to flag old content"/><link href="https://kevingimbel.de/blog/2020/01/hugo-aliases-and-redirects/?utm_source=atom_feed" rel="related" type="text/html" title="Hugo aliases and redirects"/><link href="https://kevingimbel.de/blog/2018/09/mastodon-embed-shortcode-for-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Mastodon Embed Shortcode for hugo"/><link href="https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/?utm_source=atom_feed" rel="related" type="text/html" title="Deploy a static site with git"/><id>https://kevingimbel.de/blog/2020/01/using-archetypes-in-hugo/</id><published>2020-01-07T00:00:00+00:00</published><updated>2020-01-07T00:00:00+00:00</updated><content type="html"><![CDATA[<p>For the longest time I completely ignored <a href="https://gohugo.io/content-management/archetypes/" title="Read hugo archetype documentation">archetypes in hugo</a>. I&rsquo;d always copy over the front-matter from the last blog post I wrote and then fill in the things I needed - leading to some mistakes (e.g. using <code>category</code> instead of <code>categories</code>) over time.</p>
<p>Archetypes are easy to use, for example to create this post I ran the following command</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ hugo new blog/2020-01-07-using-archetypes-in-hugo.md
</code></pre></div><p>This copied over the archetype file from <code>archetypes/blog.md</code> and automatically filled in the post tile, date, last modified date, and the defaults for categories, tags, type, and whatever else I have in the template file. Since Hugo 0.49 archetypes can consist of an entire directory structure that will be created. This is helpful for my <a href="/photography/">photography</a> section where a post consists of an <code>index.md</code> file and some images that are automatically loaded. The structure looks like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">archetypes
├── blog.md
└── photography
    └── index.md
</code></pre></div><p>For this type of post the <code>--kind</code> flag must be added to the command as shown below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ hugo new photography/my-photo-post
</code></pre></div><p>This command will create a directory named <code>my-photo-post</code> in <code>content/photography/my-photo-post</code>. Neat!</p>
<h2 id="hugo-template-magic">Hugo template magic</h2>
<p>As if this wasn&rsquo;t good enough, we can use the full set of Hugo template functions and script even more!</p>
<p>The archetype for new blog posts I use looks like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
<span style="color:#66d9ef">title</span>: <span style="color:#e6db74">&#34;{{ replace (replace .Name &#34;</span>-<span style="color:#e6db74">&#34; &#34;</span> <span style="color:#e6db74">&#34;) (now.Format &#34;</span><span style="color:#ae81ff">2006</span> <span style="color:#ae81ff">01</span> <span style="color:#ae81ff">02</span> <span style="color:#e6db74">&#34;) &#34;&#34; | title }}&#34;</span>
<span style="color:#66d9ef">intro_text</span>: <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">type</span>: blog
<span style="color:#66d9ef">categories</span>:
    - coding
<span style="color:#66d9ef">tags</span>:
    - 
<span style="color:#66d9ef">date</span>: <span style="color:#e6db74">&#34;{{ now.Format &#34;</span><span style="color:#e6db74">2006-01-02</span><span style="color:#e6db74">&#34; }}&#34;</span>
<span style="color:#66d9ef">lastmod</span>: <span style="color:#e6db74">&#34;{{ now.Format &#34;</span><span style="color:#e6db74">2006-01-02</span><span style="color:#e6db74">&#34; }}&#34;</span>
---
</code></pre></div><p>In the first line the post <code>title</code> is set which is taken from the file name. I use filenames like <code>2020-01-02-a-post.md</code> on my blog which include the full date and then the post tile and the <code>.md</code> file extension for markdown. The <code>.md</code> is automatically stripped away which leaves a string like <code>2020-01-02-a-post</code>. The first replace (<code>replace .Name &quot;-&quot; &quot; &quot;</code>) turns this into <code>2020 01 02 a post</code>, the next replace (<code>replace (replace .Name &quot;-&quot; &quot; &quot;) (now.Format &quot;2006 01 02 &quot;) &quot;&quot;</code>) takes this string and strips the date, see the detailed steps below.</p>
<p>We assume that <code>.Name</code> equals &ldquo;2020-01-02-a-post&rdquo;:</p>
<ol>
<li><code>replace (replace .Name &quot;-&quot; &quot; &quot;) (now.Format &quot;2006 01 02 &quot;) &quot;&quot;</code></li>
<li><code>replace &quot;2020 01 02 a post&quot; (now.Format &quot;2006 01 02 &quot;) &quot;&quot;</code></li>
<li><code>replace &quot;2020 01 02 a post&quot; &quot;2020 01 02&quot; &quot;&quot;</code></li>
<li><code>&quot;a post&quot;</code></li>
</ol>
<p>So after the whole code is executed, we have the plain title. This title is then passed to the function named <code>title</code> which is doing capitalization, leaving us with a nicely formatted title.</p>
<p>As shown above, I also set the <code>date</code> and <code>lastmod</code> times using Hugo template functions.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">date</span>: <span style="color:#e6db74">&#34;{{ now.Format &#34;</span><span style="color:#e6db74">2006-01-02</span><span style="color:#e6db74">&#34; }}&#34;</span>
<span style="color:#66d9ef">lastmod</span>: <span style="color:#e6db74">&#34;{{ now.Format &#34;</span><span style="color:#e6db74">2006-01-02</span><span style="color:#e6db74">&#34; }}&#34;</span>
</code></pre></div><p>Both dates will be set to the same as this (new) article hasn&rsquo;t been modified yet. <code>lastmod</code> does only change when I update an article later on.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/tags/hugo" term="hugo" label="hugo"/><category scheme="https://kevingimbel.de/tags/static_website" term="static_website" label="static_website"/><category scheme="https://kevingimbel.de/tags/automation" term="automation" label="automation"/></entry><entry><title type="html">Bash script: ws</title><link href="https://kevingimbel.de/blog/2017/01/bash-script-ws/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2015/01/snippet-sass-source-maps-with-gulp/?utm_source=atom_feed" rel="related" type="text/html" title="Snippet: SASS Source Maps with Gulp"/><link href="https://kevingimbel.de/blog/2014/01/labels-in-gmail/?utm_source=atom_feed" rel="related" type="text/html" title="Labels in GMail"/><link href="https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Writing NodeJS cli tools"/><link href="https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Useful Web Developer Tools"/><id>https://kevingimbel.de/blog/2017/01/bash-script-ws/</id><published>2017-01-12T19:22:48+01:00</published><updated>2017-01-12T19:22:48+01:00</updated><content type="html"><![CDATA[<p>For the past year or so I had a little function in my <code>.bash_profile</code> file which made my interaction with the terminal roughly 9001% better - yeah, over 9000! This little function is called <code>ws</code> and makes switching between projects inside my workspace a lot easier. Both my private and work projects are inside the <code>~/Development</code> directory. If I want to get to a project I would normally navigate like <code>cd ~/Development/private/github/kevingimbel/kevingimbel.com</code> - even with tab completion I am too lazy to type this every time I want to work on my website, so I wrote a script for it!</p>
<h3 id="the-script-ws">The script: <code>ws</code></h3>
<p>The script is actually a shell function and it looks like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#66d9ef">function</span> ws<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
  local workspace<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/Development&#34;</span>
	<span style="color:#75715e"># $1 is the target directory</span>
  local target_dir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span>
  <span style="color:#75715e"># We start searching from the workspace dir</span>
  cd $workspace
  <span style="color:#75715e"># -maxdepth is the max directories to go &#34;down&#34;</span>
  <span style="color:#75715e"># head -n1 gives back the first result</span>
  workspace_path<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>find . -maxdepth <span style="color:#ae81ff">3</span> -type d -name <span style="color:#e6db74">&#34;*</span>$target_dir<span style="color:#e6db74">*&#34;</span> | head -n1<span style="color:#66d9ef">)</span>
  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span>  -z <span style="color:#e6db74">&#34;</span>$workspace_path<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    echo <span style="color:#e6db74">&#34;Directory &#39;</span>$target_dir<span style="color:#e6db74">&#39; not found. Changing to </span>$workspace<span style="color:#e6db74">&#34;</span>
  <span style="color:#66d9ef">else</span>
    cd <span style="color:#e6db74">&#34;</span>$workspace_path<span style="color:#e6db74">&#34;</span>
  <span style="color:#66d9ef">fi</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>This function is placed <a href="https://github.com/kevingimbel/dotfiles/blob/997590a65c134326ca051e1e28a78f947673831d/.zshrc#L14-L28">inside my ~/.bash_profile</a> or <code>~/.zshrc</code> so the function is available on every terminal start. It might look odd if your not too farmiliar with shell scripts but it is really rather simple and basic - let&rsquo;s explore it line by line.</p>
<p>With <code>function ws()</code> we declare the function name. In shell scripts a function name has parentheses after it tho it does not take arguments this way (If you know why this is, <a href="https://github.com/kevingimbel/kevingimbel.com/issues">open an issue and explain it please</a> or <a href="https://twitter.com/_kevinatari">tweet me</a>!). The next lines declare a local variable, <code>workspace</code> and then <code>target_dir=$1</code> were I assign whatever is passed to the function as being the target directory the user is trying to find. Then, I execute <code>cd $workspace</code> to go to the workspace directory and start a search with <code>workspace_path=$(find -maxdepth 3 -type d -name &quot;*$target_dir*&quot; | head -n1)</code> - now that might look weird. What happens here is the following:</p>
<ul>
<li>We declare a variable, <code>workspace_path</code></li>
<li>We execute a function with <code>$()</code></li>
<li>We use <code>find . -maxdepth 3 -type d -name &quot;*$target_dor*&quot;</code> to search for a <code>d</code>irectory with a name similar to <code>$target_dir</code> (the variable from earlier)</li>
<li>We then pipe (<code>|</code>) the output from find to <code>head</code> and read in the first line <code>-n1</code> - this is the first match</li>
<li>The return value from <code>$(find ... | head -n1)</code> is then available in the <code>$workspace_path</code> variable</li>
</ul>
<p><code>$workspace_path</code> now holds whatever directory was found - or nothing. This is why we check if it is empty (<code>-z &quot;$workspace_path&quot;</code>) in the <code>if</code> block.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span>  -z <span style="color:#e6db74">&#34;</span>$workspace_path<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
  echo <span style="color:#e6db74">&#34;Directory &#39;</span>$target_dir<span style="color:#e6db74">&#39; not found. Changing to </span>$workspace<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">else</span>
  cd <span style="color:#e6db74">&#34;</span>$workspace_path<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">fi</span>
</code></pre></div><p>This reads: If <code>$workspace_path</code> is empty, then <code>echo</code> the directory was not found and notify the user we changed to <code>$workspace</code> with the <code>cd $workspace</code> earlier. Else, <code>cd</code> into the found directory. And that&rsquo;s it! Some examples can be seen in the screenshot below.</p>

<figure >
  

    <img src="/images/posts/2017/bash-ws/bash-ws-function-in-use.png"
      alt="Using the ws function to navigate through my workspace"
       />
    
  
  <figcaption>
    <p>
      Using the ws function to navigate through my workspace
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>I am sure the <code>ws</code> function can be improved more but it has served my needs well so far. One optimisation might be to use the second argument, <code>$2</code>, as parameter for <code>-maxdepth</code>.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/categories/devops" term="devops" label="devops"/><category scheme="https://kevingimbel.de/tags/cli" term="cli" label="cli"/><category scheme="https://kevingimbel.de/tags/bash" term="bash" label="bash"/><category scheme="https://kevingimbel.de/tags/scripting" term="scripting" label="scripting"/><category scheme="https://kevingimbel.de/tags/automation" term="automation" label="automation"/><category scheme="https://kevingimbel.de/tags/workflow" term="workflow" label="workflow"/><category scheme="https://kevingimbel.de/tags/productivity" term="productivity" label="productivity"/></entry></feed>