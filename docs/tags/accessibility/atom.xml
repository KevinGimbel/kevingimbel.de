<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.63.1">Hugo</generator><title type="html"><![CDATA[accessibility on KevOps]]></title>
    
    
    
            <link href="https://kevingimbel.de/tags/accessibility/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://kevingimbel.de/tags/accessibility/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://kevingimbel.de/tags/accessibility/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2020-04-28T12:09:45+02:00</updated>
    
    
    
    
        <id>https://kevingimbel.de/tags/accessibility/</id>
    
        
        <entry>
            <title type="html"><![CDATA[CSS Custom Properties and a new look]]></title>
            <link href="https://kevingimbel.de/blog/2017/11/css-custom-properties-and-a-new-look/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2017/04/2017-week-10-11-12-13/?utm_source=atom_feed" rel="related" type="text/html" title="2017, week 10, 11, 12, 13" />
                <link href="https://kevingimbel.de/blog/2017/03/2017-week-8-and-9/?utm_source=atom_feed" rel="related" type="text/html" title="2017, week 8 and 9" />
                <link href="https://kevingimbel.de/blog/2017/02/2017-week-seven/?utm_source=atom_feed" rel="related" type="text/html" title="2017, week seven" />
                <link href="https://kevingimbel.de/blog/2017/02/2017-week-five/?utm_source=atom_feed" rel="related" type="text/html" title="2017, week five" />
                <link href="https://kevingimbel.de/blog/2017/01/2017-week-four/?utm_source=atom_feed" rel="related" type="text/html" title="2017, week four" />
            
                <id>https://kevingimbel.de/blog/2017/11/css-custom-properties-and-a-new-look/</id>
            
            
            <published>2017-11-26T10:56:13+01:00</published>
            <updated>2017-11-26T10:56:13+01:00</updated>
            
            
            <content type="html"><![CDATA[<p>You may have noticed that some things changed on this website. I completly re-wrote the Front-End and created a new theme with a focus on accessibility and well-structured content. On the web, Accessibility is enabled by default; All you need is a good HTML structure and your website is almost ready to go! A second important part of accessibility is color and contrast as well as font sizing. I decided to let users choose their own color scheme, font-size, and dark or light mode - all done with CSS Custom Properties (<abbr title="Also known as">aka</abbr>
 CSS variables).</p>
<p>CSS variables are a <a href="https://www.w3.org/TR/css-variables-1/" title="Read the CSS variable specs">native CSS feature</a> which enables us as developers to re-use colors, font-sizes, and other properties throught our stylesheets. You may think <em>&ldquo;But wait! Sass, Less, and Stylus had variables for years!&quot;</em> and you&rsquo;re right - the pre processors, which generate a CSS file, have had variables for years. What they did not have, however, is the abbility to modify and change these variables on the fly after the CSS had been generated. With CSS Custom Properties and some JavaScript we can modify the variables at runtime and the browser will re-render all pieces of the page which are using the variable - and that&rsquo;s exactly what I am doing with the settings on this website to change the accent colors and font sizing.</p>
<p>Below I will explain step by step how CSS variables look, work, and how we can use them to alter the look of a website - even persistent without any backend code!</p>
<h2 id="css-variables">CSS variables</h2>
<h3 id="browser-support">Browser Support</h3>
<p>Let&rsquo;s jump directly into browser support, which is looking pretty good in my opinion!</p>


<p class="ciu_embed" data-feature="css-variables" data-periods="future_1,current,past_1,past_2">
    <a href="http://caniuse.com/#feat=css-variables">Can I Use css-variables?</a> Data on support for the css-variables feature across the major browsers from caniuse.com.
</p>
<p><code>77.90%</code> (as of November 26. 2017) is not perfect but certainly good enough for me and my private website. I&rsquo;d probably not rely on CSS Custom Properties in client projects yet tho.</p>
<h3 id="syntax">Syntax</h3>
<p>A CSS variable is a word preceded by two dashes (<code>--</code>), which looks like the following examples.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">--color</span><span style="color:#f92672">:</span> #ddd<span style="color:#f92672">;</span>
<span style="color:#f92672">--base-font-size</span><span style="color:#f92672">:</span> <span style="color:#f92672">12px</span><span style="color:#f92672">;</span>
<span style="color:#f92672">--breakpoint-large</span><span style="color:#f92672">:</span> <span style="color:#f92672">1200px</span><span style="color:#f92672">;</span>
</code></pre></div><p>Just like any CSS property they &ldquo;cascade down&rdquo;. A variable defined at the top of the document on the <code>:root</code> or <code>html</code> selector will be defined everywhere in the document. To use a CSS variable we need to get it somehow. It&rsquo;s not enough to reference it, for example this does not work.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">/</span><span style="color:#f92672">/</span> <span style="color:#f92672">Does</span> <span style="color:#f92672">not</span> <span style="color:#f92672">work</span><span style="color:#f92672">!</span>
.<span style="color:#a6e22e">my-selector</span> {
  <span style="color:#66d9ef">color</span>: <span style="color:#f92672">--</span><span style="color:#66d9ef">color</span>;
}
</code></pre></div><p>With CSS variables we need to retrieve the value by calling a <code>var</code> function. This function also takes a fallback parameter in case the variable is not set.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">/</span><span style="color:#f92672">/</span> <span style="color:#f92672">This</span> <span style="color:#f92672">does</span> <span style="color:#f92672">work</span>
.<span style="color:#a6e22e">my-selector</span> {
  <span style="color:#66d9ef">color</span>: <span style="color:#a6e22e">var</span>(<span style="color:#f92672">-</span><span style="color:#f92672">-</span><span style="color:#66d9ef">color</span>, <span style="color:#ae81ff">#333</span>)
}
</code></pre></div><p><code>.my-selector</code> will have a color value equal to whatever is stored inside the <code>--color</code> variable or <code>#333</code> if it is not set.</p>
<p>A variable can later be changed to be &ldquo;locally scoped&rdquo;. For this example we define a custom property named <code>--color</code> and set its value to <code>red</code>. We say all h1 elements should use the <code>--color</code> variable for their font-color. Then we create a CSS class named <code>local-scope</code> and inside we change the <code>--color</code> to <code>blue</code>. A <code>h1</code> element inside the <code>local-scope</code> will use the re-defined color value.</p>








<p data-height="256" data-theme-id="dark" data-slug-hash="78d261a36ecded2b75d5260cb7056fce" data-default-tab="html,result" data-user="" data-embed-version="2" data-pen-title="CSS Variables - Cascading &amp; local scope" data-preview="" data-editable="" class="codepen">
    See the Pen <a href="https://codepen.io/kevingimbel/pen/78d261a36ecded2b75d5260cb7056fce/">CSS Variables - Cascading &amp; local scope</a> on <a href="https://codepen.io">CodePen</a>.
</p>

<p>We do not need to change the <code>h1</code> selector because <code>h1</code> will always have a font-color equal to <code>--color</code> - we only need to change the variable inside the local scope. The third <code>h1</code> element is outside the local scope and so it takes the  original <code>--color</code> value (red).</p>
<p>This type of inheritance is a powerful tool CSS has given us (&ldquo;us&rdquo; being developers). At runtime, when the website is loaded and all CSS is parsed and the website has been painted to the screen, we can still change these properties on-the-fly with JavaScript and the browser will simply re-render the parts that need changing. Of course, you can already change CSS on the go with JavaScript. You could select for example a bunch of elements by class name and then change their color to be <code>blue</code> instead of red. With CSS Custom Properties you don&rsquo;t need to do this! All we need to do is change the variable at a higher level, for example on the <code>body</code> element as the following example illustrates.</p>








<p data-height="256" data-theme-id="dark" data-slug-hash="5245628703a6a223215cf5a30cf8294d" data-default-tab="html,result" data-user="" data-embed-version="2" data-pen-title="CSS Variables - Changing with JS" data-preview="" data-editable="" class="codepen">
    See the Pen <a href="https://codepen.io/kevingimbel/pen/5245628703a6a223215cf5a30cf8294d/">CSS Variables - Changing with JS</a> on <a href="https://codepen.io">CodePen</a>.
</p>

<p>Click on the <code>Change color</code> button above and all the non-scoped <code>h1</code> elements will turn green. All we need for this to work is set an inline style on the <code>body</code> element.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">style</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;--color: green;&#34;</span>;
</code></pre></div><p>I use this technique to change the secondary and primary colors of my website from the settings menu. <a href="https://github.com/kevingimbel/kevingimbel.com/blob/9f11b96f428f01b1ae14f8673c2e4f48e8ee3b21/themes/next/static/js/a11y.settings.js#L83-L84" title="View source code on GitHub.com">These two lines</a> set the CSS variables <code>--color-accent-primary</code> and <code>--color-accent-secondary</code> which by default are dark blue and yellow.</p>
<h3 id="recap">Recap</h3>
<p>So let&rsquo;s recap this real quick:</p>
<ul>
<li>CSS variables (also called CSS Custom Properties) are a native CSS feature</li>
<li>They cascade &ldquo;down&rdquo; in the CSS, just like any other property (<code>font-size</code>, <code>color</code>, etc.)</li>
<li>They can be locally scoped, that is changed for a certain element and it&rsquo;s children</li>
<li>They can be changed with JavaScript at runtime and the browser will re-render every element which uses them</li>
</ul>
<p>At this point it becomes clear why they are an advantage over pre-processor variables. We have more control of changing them and they present us with a powerful new way to implement multiple layouts for our websites.</p>
<h2 id="implementing-persistent-settings">Implementing persistent settings</h2>
<p>As I mentioned before for my website (this very blog you read right now), the Settings are persistent. If you change the font size or colors and navigate to a new page you&rsquo;ll still have your custom styles - not my default styles. I do not use any backend software like PHP, Go, or Ruby; Instead this website is a static website, which means all HTML pages are rendered before and then deployed to <a href="https://www.netlify.com/">Netlify</a>. So there is no backend which can save your settings and then send them back to your browser once you navigate to a new site.</p>
<p>The saving part is done on the client side, inside your browser. A browser feature called <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">Local Storage</a>. Local Storage is a text-based, key-value storage which developers can use to store (small) text based values inside the browser. This allows us to have some sort of persitent storage on the client side without the need for a backend. For my use case (storing settings) this is perfect.</p>
<p>When you open the settings menu and click &ldquo;Save&rdquo; I grab all the values with JavaScript (<a href="https://github.com/kevingimbel/kevingimbel.com/blob/9f11b96f428f01b1ae14f8673c2e4f48e8ee3b21/themes/next/static/js/a11y.settings.js#L123-L138">See the code on GitHub</a>)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">settingsForm</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;submit&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
  <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">preventDefault</span>();
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">fd</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">FormData</span>(<span style="color:#a6e22e">settingsForm</span>).<span style="color:#a6e22e">entries</span>();

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cssRule</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">fd</span>) {
    <span style="color:#a6e22e">lsSettings</span>[<span style="color:#a6e22e">cssRule</span>[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">cssRule</span>[<span style="color:#ae81ff">1</span>];
  }

  <span style="color:#a6e22e">setStylesAndCreateForgroundColors</span>(<span style="color:#a6e22e">lsSettings</span>);
  <span style="color:#a6e22e">populateSettingsFromArray</span>(<span style="color:#a6e22e">lsSettings</span>);

  <span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#39;a11y_settings&#39;</span>, <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">lsSettings</span>));
  document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">remove</span>(<span style="color:#e6db74">&#39;page-settings--open&#39;</span>);
  document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">setAttribute</span>(<span style="color:#e6db74">&#39;tabindex&#39;</span>, <span style="color:#e6db74">&#34;0&#34;</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
});
</code></pre></div><p>There&rsquo;s quite a lot going on. The important bit for now is <code>localStorage.setItem('a11y_settings', JSON.stringify(lsSettings));</code>. This line sets a new item in the local storage named <code>a11y_settings</code>, scoped to my website (kevingimbel.com). This JSON object holds all relevant information for your custom settings and looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;--body-invert&#34;</span>: <span style="color:#ae81ff">0</span>,
  <span style="color:#f92672">&#34;--color-accent-primary&#34;</span>: <span style="color:#e6db74">&#34;#3e934b&#34;</span>,
  <span style="color:#f92672">&#34;--color-accent-secondary&#34;</span>: <span style="color:#e6db74">&#34;#70cfff&#34;</span>
}
</code></pre></div><p>The key of the JSON object is always the CSS variable name, the value is the CSS variable value. With these settings we get the following result.</p>

<figure >
  

    <img src="/images/posts/2017/css-custom-properties/kevingimbel_com-with-custom-settings.png"
      alt="The look of kevingimbel.com with the above settings"
       />
    
  
  <figcaption>
    <p>
      The look of kevingimbel.com with the above settings
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>Because we use inline styles to change the CSS variables the HTML element will have the following styles.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;--body-invert:0; --color-accent-primary:#3e934b; --color-accent-secondary:#70cfff;&#34;</span>&gt;
</code></pre></div><p>Once the JSON is saved to local storage, I load in on page load and apply it immediately - which happens to be really fast so it seems the styles are not even applyed again! The piece of JavaScript to load the custom styles is placed above all other content, at the beginning of the <code>&lt;body&gt;</code>. To not impact performance too much I minified it and it looks like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span><span style="color:#f92672">&gt;</span>(<span style="color:#66d9ef">function</span>(){<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;a11y_settings&#34;</span>)){<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">a</span><span style="color:#f92672">=</span><span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;a11y_settings&#34;</span>));<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">o</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">a</span>){document.<span style="color:#a6e22e">documentElement</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">setProperty</span>(<span style="color:#a6e22e">o</span>,<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">o</span>]);<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">o</span><span style="color:#f92672">==</span><span style="color:#e6db74">&#34;--body-invert&#34;</span><span style="color:#f92672">&amp;&amp;</span><span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">o</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;100&#34;</span>){document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">add</span>(<span style="color:#e6db74">&#34;dark-mode&#34;</span>)}}<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">a11y</span>){<span style="color:#a6e22e">a11y</span>.<span style="color:#a6e22e">o</span><span style="color:#f92672">=</span><span style="color:#a6e22e">a</span>}}})();<span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#960050;background-color:#1e0010">s</span><span style="color:#960050;background-color:#1e0010">c</span><span style="color:#960050;background-color:#1e0010">r</span><span style="color:#960050;background-color:#1e0010">i</span><span style="color:#960050;background-color:#1e0010">p</span><span style="color:#960050;background-color:#1e0010">t</span><span style="color:#960050;background-color:#1e0010">&gt;</span>
</code></pre></div><p>Unminified the code reads as follows</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">(<span style="color:#66d9ef">function</span>(){
  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;a11y_settings&#34;</span>)) {

    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">styles</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;a11y_settings&#34;</span>));

    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">rule</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">styles</span>) {
      document.<span style="color:#a6e22e">documentElement</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">setProperty</span>(<span style="color:#a6e22e">rule</span>,<span style="color:#a6e22e">styles</span>[<span style="color:#a6e22e">rule</span>]);
      <span style="color:#75715e">// Check if we &#34;dark mode&#34; is enabled (more below!)
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">rule</span><span style="color:#f92672">==</span><span style="color:#e6db74">&#34;--body-invert&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">styles</span>[<span style="color:#a6e22e">rule</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;100&#34;</span>){
        document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">add</span>(<span style="color:#e6db74">&#34;dark-mode&#34;</span>)
      }
    }
    <span style="color:#75715e">// if a11y is defined, save the rules in the object
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">a11y</span>){
      <span style="color:#a6e22e">a11y</span>.<span style="color:#a6e22e">styles</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">styles</span>
    }
  }
})();
</code></pre></div><p>What happens here is the following:</p>
<ul>
<li>We check if there are custom setting (<code>if( localStorage.getItem(&quot;a11y_settings&quot;) )</code>)</li>
<li>Then we read it in, it&rsquo;s a JSON string so we need to parse it</li>
<li>Next we loop through all properties of the JSON, which are key-value pairs like <code>{ &quot;--color&quot;: &quot;#ddd&quot; }</code></li>
<li>Each key-value pair is set as inline style on the documentElement (the <code>html</code> element)</li>
</ul>
<p>For the <code>--body-invert</code> value we take an extra step and set a CSS class on the body. This is used for the dark mode which requires the extra class to work properly. The dark-mode is a CSS filter. What I do is invert the body with a CSS Filter so the default light theme becomes a dark theme. The CodePen below shows this in action. By adding the <code>dark-mode</code> class to the second block we invert all colors, which results in the block being dark.</p>








<p data-height="256" data-theme-id="dark" data-slug-hash="604946ab15c48299b1f7b54b7a758cfb" data-default-tab="html,result" data-user="" data-embed-version="2" data-pen-title="CSS Filter Invert" data-preview="" data-editable="" class="codepen">
    See the Pen <a href="https://codepen.io/kevingimbel/pen/604946ab15c48299b1f7b54b7a758cfb/">CSS Filter Invert</a> on <a href="https://codepen.io">CodePen</a>.
</p>

<p>That&rsquo;s exactly what happens when you click &ldquo;Dark mode&rdquo; in the settings menu above. So why do we need the class <code>dark-mode</code>? Because with <code>filter: invert(100%)</code> everything is inverted including images and videos - which we do not want. These elements should not be inverted so we need to apply a <code>filter: invert(100%)</code> to them when dark mode is active, which is done with the following CSS snipped.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> <span style="color:#f92672">img</span><span style="color:#f92672">,</span>
<span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> <span style="color:#f92672">video</span><span style="color:#f92672">,</span>
<span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> <span style="color:#f92672">iframe</span> {
  <span style="color:#66d9ef">filter</span>: invert(<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>) <span style="color:#75715e">!important</span>;
}
</code></pre></div><p>This basically means we apply the filter two times, which results in resetting it. The images get inverted from the first rule, then inverted again to normal color.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">/</span><span style="color:#f92672">/</span> <span style="color:#f92672">Invert</span> <span style="color:#f92672">everything</span>
<span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> {
  <span style="color:#66d9ef">filter</span>: invert(<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>);
}
<span style="color:#f92672">/</span><span style="color:#f92672">/</span> <span style="color:#f92672">Invert</span> <span style="color:#f92672">img</span><span style="color:#f92672">,</span> <span style="color:#f92672">video</span><span style="color:#f92672">,</span> <span style="color:#f92672">and</span> <span style="color:#f92672">iframe</span> <span style="color:#f92672">again</span><span style="color:#f92672">,</span> <span style="color:#f92672">resulting</span> <span style="color:#f92672">in</span> <span style="color:#f92672">resetting</span> <span style="color:#f92672">the</span> <span style="color:#f92672">original</span> <span style="color:#f92672">invert</span><span style="color:#f92672">.</span>
<span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> <span style="color:#f92672">img</span><span style="color:#f92672">,</span>
<span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> <span style="color:#f92672">video</span><span style="color:#f92672">,</span>
<span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> <span style="color:#f92672">iframe</span> {
  <span style="color:#66d9ef">filter</span>: invert(<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>) <span style="color:#75715e">!important</span>;
}
</code></pre></div><p>And that&rsquo;s it for CSS variables and the redesign. You get to choose how my blog looks, what font-size to use and if a dark or light theme is best for you. I might add more options to the settings in the future, but for now I&rsquo;m happy with the result.</p>
<p>Got any feedback? Want to tell me how much the news design sucks? Love it? Hit me up on <a href="https://twitter.com/_kevinatari" title="Find me on twitter">Twitter @_kevinatari</a></p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/redesign" term="redesign" label="redesign" />
                             
                                <category scheme="https://kevingimbel.de/tags/css" term="css" label="css" />
                             
                                <category scheme="https://kevingimbel.de/tags/personal" term="personal" label="personal" />
                             
                                <category scheme="https://kevingimbel.de/tags/modernization" term="modernization" label="modernization" />
                             
                                <category scheme="https://kevingimbel.de/tags/accessibility" term="accessibility" label="accessibility" />
                            
                        
                    
                
            
        </entry>
    
</feed>
