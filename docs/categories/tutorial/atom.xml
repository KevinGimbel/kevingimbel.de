<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.60.0">Hugo</generator><title type="html"><![CDATA[tutorial on Portfolio and blog of Kevin Gimbel, DevOps Engineer and Full-Stack Developer]]></title>
    
    
    
            <link href="https://kevingimbel.de/categories/tutorial/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://kevingimbel.de/categories/tutorial/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://kevingimbel.de/categories/tutorial/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2020-01-07T09:11:25+01:00</updated>
    
    
    
    
        <id>https://kevingimbel.de/categories/tutorial/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Hugo: ignore _index.md in list templates]]></title>
            <link href="https://kevingimbel.de/blog/2020/01/hugo-ignore-_index.md-in-list-templates/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2020/01/hugo-compare-dates-to-flag-old-content/?utm_source=atom_feed" rel="related" type="text/html" title="Hugo: compare dates to flag old content" />
                <link href="https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/?utm_source=atom_feed" rel="related" type="text/html" title="Bullgit loves Jekyll" />
                <link href="https://kevingimbel.de/blog/2018/09/mastodon-embed-shortcode-for-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Mastodon Embed Shortcode for hugo" />
                <link href="https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/?utm_source=atom_feed" rel="related" type="text/html" title="Deploy a static site with git" />
                <link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Farewell Jekyll, Hello Hugo" />
            
                <id>https://kevingimbel.de/blog/2020/01/hugo-ignore-_index.md-in-list-templates/</id>
            
            
            <published>2020-01-03T00:00:00+00:00</published>
            <updated>2020-01-03T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>While creating my new website I also added more sections, namely a <a href="/blog/">blog</a>, <a href="/photography/">photography</a>, and <a href="/art/">art</a> section. All of these use list templates and render &ldquo;article&rdquo;-like content previews. I wanted to add some content to these lists and Hugo has a special file named <code>_index.md</code> for that. This file can be used to create index pages for lists.</p>
<p>When I did that I somehow also included the index files in the post listings which was not what I wanted, so I added a if statement to my <code>article-preview.html</code> template that is used to render article previews.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{ if ne .File.LogicalName &#34;_index.md&#34; }}
&lt;<span style="color:#f92672">article</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;article article--in-list&#34;</span> <span style="color:#a6e22e">aria-labelledby</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;article-heading-{{ .File.UniqueID }}&#34;</span>&gt;
    [...]
&lt;/<span style="color:#f92672">article</span>&gt;
{{ end }}
</code></pre></div><p><code>{{ if ne .File.LogicalName &quot;_index.md&quot; }}</code> checks if the file name is not <code>_index.md</code> - this will ignore all <code>_index.md</code> files from being rendered with the <code>article-preview.html</code> template.</p>
<p>It does the job but feels wrong and hacky, so if you know a better solution, please let me know on <a href="https://github.com/kevingimbel/kevingimbel.de" title="Report issue on GitHub">GitHub</a> or <a href="https://bullgit.party/@kevin" title="Contact me on Mastodon">Mastodon</a>.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/hugo" term="hugo" label="hugo" />
                             
                                <category scheme="https://kevingimbel.de/tags/cms" term="cms" label="cms" />
                             
                                <category scheme="https://kevingimbel.de/tags/static_website" term="static_website" label="static_website" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Hugo: compare dates to flag old content]]></title>
            <link href="https://kevingimbel.de/blog/2020/01/hugo-compare-dates-to-flag-old-content/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/?utm_source=atom_feed" rel="related" type="text/html" title="Bullgit loves Jekyll" />
                <link href="https://kevingimbel.de/blog/2018/09/mastodon-embed-shortcode-for-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Mastodon Embed Shortcode for hugo" />
                <link href="https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/?utm_source=atom_feed" rel="related" type="text/html" title="Deploy a static site with git" />
                <link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Farewell Jekyll, Hello Hugo" />
                <link href="https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/?utm_source=atom_feed" rel="related" type="text/html" title="Ghost in the shell" />
            
                <id>https://kevingimbel.de/blog/2020/01/hugo-compare-dates-to-flag-old-content/</id>
            
            
            <published>2020-01-02T00:00:00+00:00</published>
            <updated>2020-01-02T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>With the recent redesign of my website I also wanted to add a note to old articles. The IT world is changing fast and information can quickly be outdated, so I decided to add an automatically generated note to every post that is older than 4 years. Using the Hugo <a href="https://gohugo.io/functions/math/">Math</a> function and <a href="https://gohugo.io/variables/page/#page-variables">Date</a> values it can be accomplished in automated-enough fashion.</p>
<h3 id="partial">Partial</h3>
<p>First I created a new partial named <code>single-header.html</code> and added it to all my <code>single.html</code> templates. The file contains the following code which I will explain step by step.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{ $now := int (now.Format &#34;2006&#34;) }}
{{ $article_age := sub $now (int (.Date.Format &#34;2006&#34;)) }}

{{ if gt $article_age 4 }}
&lt;<span style="color:#f92672">section</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;age-note&#34;</span>&gt;
    &lt;<span style="color:#f92672">h2</span>&gt;ATTENTION!&lt;/<span style="color:#f92672">h2</span>&gt;
    &lt;<span style="color:#f92672">p</span>&gt;This article is over 4 years old, it may be outdated!&lt;/<span style="color:#f92672">p</span>&gt;
&lt;/<span style="color:#f92672">section</span>&gt;
{{ end }}
</code></pre></div><p>The magic all happens in the first 2 lines. First the &ldquo;now&rdquo; time is retrieved, this is the build time - not the current time when the page is loaded in the browser. Then we calculate the different using the Hugo built-in  <code>sub</code> function, giving the two dates in year format (<code>2020</code>, <code>2015</code>, &hellip;) as arguments.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$article_age :<span style="color:#f92672">=</span> sub $now <span style="color:#f92672">(</span>int <span style="color:#f92672">(</span>.Date.Format <span style="color:#e6db74">&#34;2006&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span>
<span style="color:#75715e"># For an aricle written in 2013 the code looks like</span>
<span style="color:#75715e"># $article_age = sub 2020 2013</span>
</code></pre></div><p>After filling in all variables and doing the subtraction, the <code>$article_age</code> variable contains an integer, like <code>7</code> or <code>3</code>. The next line of code checks if the number <code>$article_age</code> is greater than 4, which means the article is older than 4 years. If this is true, the note is displayed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{ if gt $article_age 4 }}
    $article_age is greater than 4
{{ end }}
</code></pre></div><p>Because we are doing a <code>gt</code> (greater than) comparison only articles that are older than 4 years (5 and more) will be flagged.</p>
<h2 id="see-it-in-action">See it in action</h2>
<p>A live example can be seen on my page, for example in the <a href="/blog/2013-08-12-hello-world/">oldest post &ldquo;Hello world&rdquo;</a> or in any post from <a href="http://localhost:1313/blog/#2015">2015 and before</a>.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/hugo" term="hugo" label="hugo" />
                             
                                <category scheme="https://kevingimbel.de/tags/cms" term="cms" label="cms" />
                             
                                <category scheme="https://kevingimbel.de/tags/static_website" term="static_website" label="static_website" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Safe calc usage in CSS]]></title>
            <link href="https://kevingimbel.de/blog/2020/01/safe-calc-usage-in-css/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2017/11/css-custom-properties-and-a-new-look/?utm_source=atom_feed" rel="related" type="text/html" title="CSS Custom Properties and a new look" />
                <link href="https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/?utm_source=atom_feed" rel="related" type="text/html" title="Getting into Performance Measurement" />
                <link href="https://kevingimbel.de/blog/2014/07/conditional-css/?utm_source=atom_feed" rel="related" type="text/html" title="Conditional CSS" />
                <link href="https://kevingimbel.de/blog/2014/01/web-development-in-2014/?utm_source=atom_feed" rel="related" type="text/html" title="Web Development in 2014" />
                <link href="https://kevingimbel.de/blog/2013/11/pseudo-product-flags/?utm_source=atom_feed" rel="related" type="text/html" title="Pseudo Product Flags" />
            
                <id>https://kevingimbel.de/blog/2020/01/safe-calc-usage-in-css/</id>
            
            
            <published>2020-01-01T00:00:00+00:00</published>
            <updated>2020-01-02T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p><code>calc</code> is a great CSS function to calculate values, e.g. margins or widths. What makes it especially great is that it can combine different values, for example <code>calc(100% - 4rem - 1px)</code> is valid and works in modern browsers - in simpler words: Calc works with different units like <code>em</code>, <code>%</code>, <code>px</code>, etc.</p>
<p>The problem with calc is that if it doesn't work you may get a unexpected result. Take the following code for example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">author</span> {
    <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">4</span><span style="color:#66d9ef">rem</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">rem</span>;
    <span style="color:#66d9ef">width</span>: calc(<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span>);
    <span style="color:#66d9ef">margin-left</span>: <span style="color:#ae81ff">-2</span><span style="color:#66d9ef">rem</span>;
    <span style="color:#66d9ef">margin-top</span>: <span style="color:#ae81ff">2</span><span style="color:#66d9ef">rem</span>;
}
</code></pre></div><p>This code calculates the width of the element by taking into account the paddings and borders, then offsets the element to the left (<code>margin-left: -2rem</code>) so it appears to be full-width. If calc does not work, the element will just be moved to the left and appears off-center - it looks wrong and unexpected.</p>
<p>A more robust version is to also calculate the offset. This version is shown below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">author</span> {
    <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">4</span><span style="color:#66d9ef">rem</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">rem</span>;
    <span style="color:#66d9ef">width</span>: calc(<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span>);
    <span style="color:#66d9ef">margin-left</span>: calc(<span style="color:#ae81ff">0</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span>);
    <span style="color:#66d9ef">margin-top</span>: <span style="color:#ae81ff">2</span><span style="color:#66d9ef">rem</span>;
}
</code></pre></div><p>If calc does not work, both the <code>width</code> and <code>margin-left</code> are ignored and the box appears just as any other content would, without any offset to the left. The interesting part is the second <code>calc</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">offset-example</span>  {
    <span style="color:#66d9ef">margin-left</span>: calc(<span style="color:#ae81ff">0</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span>);
}
</code></pre></div><p>By using <code>0rem - 2rem</code> we can create a <code>-2rem</code> offset to the left. The <code>1px</code> is the border around the parent element which appears on both sides, so we add that to our calculation to stay within the border - otherwise it would look wrong again.</p>
<h2 id="update">Update</h2>
<p>Due to changes during development, the changes described here are not available on my website.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/css" term="css" label="css" />
                             
                                <category scheme="https://kevingimbel.de/tags/calc" term="calc" label="calc" />
                             
                                <category scheme="https://kevingimbel.de/tags/fallback" term="fallback" label="fallback" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Using the Terminal: The Prompt]]></title>
            <link href="https://kevingimbel.de/blog/2017/03/using-the-terminal-the-prompt/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2017/01/bash-script-ws/?utm_source=atom_feed" rel="related" type="text/html" title="Bash script: ws" />
                <link href="https://kevingimbel.de/blog/2015/01/snippet-sass-source-maps-with-gulp/?utm_source=atom_feed" rel="related" type="text/html" title="Snippet: SASS Source Maps with Gulp" />
                <link href="https://kevingimbel.de/blog/2014/01/labels-in-gmail/?utm_source=atom_feed" rel="related" type="text/html" title="Labels in GMail" />
                <link href="https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Useful Web Developer Tools" />
            
                <id>https://kevingimbel.de/blog/2017/03/using-the-terminal-the-prompt/</id>
            
            
            <published>2017-03-29T18:34:37+01:00</published>
            <updated>2017-03-29T18:34:37+01:00</updated>
            
            
            <content type="html"><![CDATA[<p>The Terminal (or <em>bash</em>, <em>shell</em>, <em>console</em>) is an incredibly powerful program available on (almost) all operating systems such as Mac OS, Windows, or Linux Distributions like Ubuntu, Mint, Fedora, CentOS, &hellip; - you get the picture. Using the terminal in an efficient way to navigate the computer or writing your own programs and snippets to enhance your workflows is incredibly powerful. I already <a href="/bash-script-ws/">wrote about one custom script named <code>ws</code></a> which enhances my daily workflows. This article marks the first of many to come about using and configuring your terminal. This tutorial is written for MacOS and Linux, though most of it will work on Windows 10 if you use Bash.</p>
<p>To get started with this tutorial open up your terminal. If you don't know how to open a terminal your first mission is to find out how! (<em>Hint: Google is your friend!</em>). Once the terminal is open we can start with some basic operations.</p>
<p><em>Note:</em> On newer Windows versions you should use Bash if available! This tutorial will probably not work with older Windows Verisons (XP, 7, maybe even 8) and the Windows Terminal (e.g. CMD).</p>
<p>In this tutorial we will customize the Prompt. To do so, we will use VIM, a command-line Editor available in most systems (including servers) - VIM is powerful but horribly unfamiliar at first. If you prefer to use a different editor do so, but I highly recomment to learn the basics of VIM - it'll help you once you start interacting with systems that do not have a graphical user interface (e.g. Servers, Containers).</p>
<h2 id="preface-vim">Preface: VIM</h2>
<blockquote>
<p>Below I explain some basics for using VIM, which is used throughout this tutorial to edit files. If you know how to use VIM, <a href="https://kevingimbel.de/blog/2017/03/using-the-terminal-the-prompt/
#the-prompt">skip to the next section</a></p>
</blockquote>
<p><a href="http://www.vim.org/">VIM</a> is am incredibly powerful text editor available from the command line. It's a bit weird to get used to at first but once you know your way around you'll become quite productive with it. It's easier to edit config files with VIM compared to opening them in a Editor like Atom or Sublime Text. VIM can be used by executing the <code>vim</code> command from a terminal which shows the default vim startup screen as seen below.</p>

<figure >
  

    <img src="/images/posts/2017/terminal/prompt/vim-empty-file.png"
      alt="An empty file opened in VIM"
       />
    
  
  <figcaption>
    <p>
      An empty file opened in VIM
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>To start writing text we need to enter Input Mode. This is done by typing an <code>i</code>. Afterwards, we can write. VIM has three different modes: Input, Visual and Normal. To leave a mode and return to normal, you need to press <code>ESC</code>. Visual Mode can be used to select multiple lines or copy/paste things around. Insert Mode is mainly used for writing text and Normal Mode is used for navigation, e.g to move to the Top of a file (<code>gg</code>) or bottom of a file (<code>SHIFT+G</code>). VIM works a lot with shortcuts which is why we can edit text files so fast with it. Consider the following example HTML tag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;some-class-name another-class-name yet more classes&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</code></pre></div><p>To remove all classes and add a new class name you would move your mouse to the line, select everything between <code>&quot;</code> and <code>&quot;</code>, and then enter the new class name. In VIM, you can enter Normal Mode, place the cursor inside the element and press <code>ci&quot;</code> (<em>change in &ldquo;</em>). The entrie text will be removed and VIM enters Insert Mode inside the <code>&quot;&quot;</code>. To change a word, you write <code>cw</code>. To write text inside the tag, <code>cit</code> (change in tag) and the cursor is placed inside the <code>&lt;div&gt;</code>. Additional to the default movement and replacing there are plugins to make this even faster or smarter, like <a href="https://github.com/tpope/vim-surround">surround.vim</a>.</p>
<p>So, VIM is quite an editor. Get used to it, you'll thank me later! What we need to know for basic file editing and this tutorial is the following:</p>
<ul>
<li><code>i</code> is pressed to enter Insert Mode</li>
<li><code>ESC</code> is pressed to exit a mode, e.g. Insert or Visual</li>
<li>all commands starting with <code>:</code> are executed by pressing the <code>&lt;Enter&gt;</code> key, e.g. <code>:wq&lt;Enter&gt;</code></li>
<li><code>:</code> is pressed to enter a command (literally type a <code>:</code>, e.g. with <code>SHIFT+.</code> or wherever it is on your keyboard)</li>
<li><code>:w</code> means <code>write</code>. To write a file, press <code>SHIFT+.</code>, then <code>w</code>, then <code>Enter</code>.</li>
<li>To quit the editor, write <code>:q</code>, then <code>Enter</code>. To force quit without saving, type <code>:q!</code>, then <code>Enter</code></li>
<li>Moving the cursor is done with UP, DOWN, RIGHT, and LEFT Arrow Keys or <code>h,j,k,l</code> in Normal Mode or Visual Mode
<ul>
<li><code>h</code> = left</li>
<li><code>j</code> = down</li>
<li><code>k</code> = up</li>
<li><code>l</code> = right</li>
</ul>
</li>
</ul>
<p>Lots of VIM Tips can be found in the <a href="http://vim.wikia.com/wiki/Vim_Tips_Wiki">VIM Wikia</a>.</p>
<h2 id="the-prompt">The Prompt</h2>
<p>One your terminal is open you should see a Dollar Sign (<code>$</code>) or similar symbol, like shown below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">~ $
</code></pre></div><p>This is the Prompt. The Prompt shows the current directory (<code>~</code>) and most of the time has a fixed sign, e.g. <code>$</code>. Other prompts might use symbols like <code># </code>, <code>%` </code>bash-3.2$<code>or</code>kevin@ubuntu: $`. The prompt is configurable and comes with different defaults depending on the operating system. So, each line below is how a prompt may look.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">kevin@MacBook-Pro: ~ $
~/Development #
/usr/share/docs %
root@ubuntu: / $
</code></pre></div><p>The Prompt can be changed by updating the <code>PS1</code> environment variable. Environment variables are available to the entire system and can be used to configure programs or create shortcuts. The <code>PS1</code> is defined inside the <code>.bashrc</code>, <code>.zshrc</code>, or other shell runtime file. If you are not sure which shell your are using, run <code>echo $SHELL</code> which gives back a string like <code>/bin/zsh</code> or <code>/bin/bash</code>. To change the PS1, open the config file (either <code>.bashrc</code> or <code>.zshrc</code>) inside an editor like <code>vim</code> - from the command line.</p>
<pre><code>$ vim $HOME/.bashrc
</code></pre><p>If the files is not empty, go to the bottom (<code>SHIFT+G</code> in vim) and enter input mode (press <code>i</code>). Write the following, then save the file and quit:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">export PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;MY CUSTOM PROMPT &#34;</span>
</code></pre></div><blockquote>
<p><em>Note:</em> To write a file in VIM, press <code>:</code> and then type <code>w</code> and press enter.</p>
</blockquote>
<p>Now we need to reload the configuration file (<code>.bashrc</code>) by typing <code>source ~/.bashrc</code> into the terminal and hitting enter. The prompt now looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">MY CUSTOM PROMPT
</code></pre></div><p>Congrats, your first custom prompt! That's not a useful prompt, however, because it will always show <code>MY CUSTOM PROMPT</code>. A prompt that shows the current directory would be more useful. As it happens, we can use variables inside the Prompt and there are pre-defined variables which hold informations like the current directory, the current logged-in user, the hostname, and man more! Let's start with the working directory - the directory on the file system we are currently in. The working directory is stored inside the <code>\W</code> variable and we can use it like so</p>
<pre><code>$ vim ~/.bashrc
export PS1=&quot;\W $&quot;
</code></pre><p>Save the fie (<code>:wq</code>) and reload the configuration with <code>source ~/.bashrc</code>. The prompt now looks like shown below.</p>

<figure >
  

    <img src="/images/posts/2017/terminal/prompt/prompt-simple-working-directory.png"
      alt="A simple prompt showing the Working Directory"
       />
    
  
  <figcaption>
    <p>
      A simple prompt showing the Working Directory
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>The first part before the <code>$</code> will be different for you, depending on where on your computer you currently are. To find out where you are, type <code>pwd</code> which shows the current path. You will see that <code>pwd</code> shows a lot more than what we see in the prompt! That is because the variable <code>\W</code> holds only the current directory without a full path. To get the full path, we need to use <code>\w</code>. Change your <code>.bashrc</code> file so the <code>PS1</code> uses the <code>\w</code> variable, reload the configuration (<code>source ~/.bashrc</code>) and see what happens. Your prompt should look similar to the one below.</p>

<figure >
  

    <img src="/images/posts/2017/terminal/prompt/prompt-long-working-directory.png"
      alt="Using \w, we get the full path from the HOME directory"
       />
    
  
  <figcaption>
    <p>
      Using \w, we get the full path from the HOME directory
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>The full directory path can be helpful but it can also get really long. I like to have a line break in my <code>PS1</code> so that I can enter text below the directory listing. To have a line break add a <code>\n</code> character before <code>$</code> - the <code>$</code>-symbol will then move to the next line as shown below.</p>

<figure >
  

    <img src="/images/posts/2017/terminal/prompt/prompt-with-new-line.png"
      alt="A terminal prompt with a new line"
       />
    
  
  <figcaption>
    <p>
      A terminal prompt with a new line
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>Looking good! The last thing we need - or I want - is to have some color in my prompt so that it's easier to recognize the path or see the hostname - to add color we can either use escape characters like <code>\[\033[34m\]</code> or - what I prefer - <code>tput</code>. You can <a href="http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html">read more on escape characters</a> if you wish. I will focus on <a href="https://linux.die.net/man/1/tput"><code>tput</code></a>. I like to define my color variables first and then use them later. To define a variable in shell scripting write <code>variableName=&quot;value&quot;</code>. If you need to execute a program to get your variable value, you have to surround it with <code>$()</code>. For example to read the content of the file <code>test.txt</code> into the variable <code>content</code>, you'd write <code>content=&quot;$(cat test.txt)&quot;</code>.</p>
<p>Define and use colors in <code>.bashrc</code> or <code>.zshrc</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#75715e"># predefine variables</span>
ps1_green<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>tput setaf 2<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
ps1_yellow<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>tput setaf 3<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
ps1_reset<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>tput sgr0<span style="color:#66d9ef">)</span><span style="color:#e6db74">\e[m</span><span style="color:#e6db74">&#34;</span>
export PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$ps1_green<span style="color:#e6db74">\w\n</span>$ps1_yellow<span style="color:#e6db74">\$</span>$ps1_reset<span style="color:#e6db74"> </span><span style="color:#e6db74">&#34;</span>
</code></pre></div><p><em>Note: A great reference for this technique is <a href="http://linux.101hacks.com/ps1-examples/prompt-color-using-tput/">this handy list</a></em></p>
<p>In my testing I needed to use <code>\e[m</code> to properly reset the new lines. Otherwise commands would sometimes become cluttered when navigating back with <code>arrow up</code>.</p>
<p>So that's it for the first part of customizing and using the terminal. Below are some of the <code>tput</code> colors from <a href="http://linux.101hacks.com/ps1-examples/prompt-color-using-tput/">linux.101hacks.com</a> - mostly as a reference for myself. 😁</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>tput bold</code></td>
<td>Turn on <strong>bold</strong> text</td>
</tr>
<tr>
<td><code>tput smul</code></td>
<td>Begin underline mode</td>
</tr>
<tr>
<td><code>tput rmul</code></td>
<td>Exit underline mode</td>
</tr>
<tr>
<td><code>tput sgr0</code></td>
<td>Reset code, turns off all attributes</td>
</tr>
<tr>
<td><code>tput setaf</code></td>
<td>Set forground color using <a href="https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI escape</a></td>
</tr>
<tr>
<td><code>tput setab</code></td>
<td>Set background color using <a href="https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI escape</a></td>
</tr>
</tbody>
</table>
<p>And here are the 8 color codes you can combine with <code>tput setaf</code> and <code>tput setab</code>.</p>
<table>
<thead>
<tr>
<th>Code</th>
<th>Color</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0</code></td>
<td>Black</td>
</tr>
<tr>
<td><code>1</code></td>
<td>Red</td>
</tr>
<tr>
<td><code>2</code></td>
<td>Green</td>
</tr>
<tr>
<td><code>3</code></td>
<td>Yellow</td>
</tr>
<tr>
<td><code>4</code></td>
<td>Blue</td>
</tr>
<tr>
<td><code>5</code></td>
<td>Magenta</td>
</tr>
<tr>
<td><code>6</code></td>
<td>Cyan</td>
</tr>
<tr>
<td><code>7</code></td>
<td>White</td>
</tr>
</tbody>
</table>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/devops" term="devops" label="devops" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/workflow" term="workflow" label="workflow" />
                             
                                <category scheme="https://kevingimbel.de/tags/productivity" term="productivity" label="productivity" />
                             
                                <category scheme="https://kevingimbel.de/tags/apps" term="apps" label="apps" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[ReactJS - Hello World!]]></title>
            <link href="https://kevingimbel.de/blog/2015/05/reactjs-hello-world/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://kevingimbel.de/blog/2015/05/reactjs-hello-world/</id>
            
            
            <published>2015-05-07T00:00:00+00:00</published>
            <updated>2015-05-07T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>This article is the first in a series about <a href="http://facebook.github.io/react/">ReactJS</a>, a JavaScript library for building user interfaces. It is actively developed at Facebook and Instagram, while Instagram uses React to build their web app. At Facebook, however, React plays a role in the &ldquo;background&rdquo;, featuring administrative screens such as the Ads Managment.</p>
<p>React itself says one very important and true thing about itself:</p>
<blockquote>
<p>Lots of people use React as the V in MVC. Since React makes no assumptions about the rest of your technology stack, it's easy to try it out on a small feature in an existing project.</p>
</blockquote>
<p>Instead of frameworks such as <a href="https://angularjs.org/">Angular</a> or <a href="http://emberjs.com/">Ember</a>, React only covers the visual part and state of an UI. It won't help you structure your applicationit will not do anything other than render DOM parts and control their state. At this, however, React is amazingly good!</p>
<h3 id="jsxlike-syntax">JSX-like syntax</h3>
<p>React uses a XML like syntax called JSX. JSX seems horrible at first, at least to me, but becomes really powerful once you're used to it. Here is an example of two <code>div</code>s, one written in React JSX syntax and one in pure JavaScript. We assume the variable <code>dynamicContent</code> will hold some content that is generated before.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">// React JSX DIV
var myJSXDiv = &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">className</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;lorem&#34;</span>&gt;{dynamicContent}&lt;/<span style="color:#f92672">div</span>&gt;;
// pure JS DIV
var myJSDiv = &#39;&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;lorem&#34;</span>&gt;&#39;+ dynamicContent +&#39;&lt;/<span style="color:#f92672">div</span>&gt;&#39;;
</code></pre></div><p>Weird isn't it? Writing junks of HTML without quotes in a JavaScript file looks totally wrong at first, however React is being compiled to pure JavaScript before it will hit your servers. Therefore, it really only is a way of easy writing - when you create a few DOM Elements in React you'll soon start to love the JSX-like syntax.</p>
<h3 id="hello-world">Hello World!</h3>
<p>As in every framework and language, let's start by outputting a <code>Hello World!</code> string. To archive this we will do the following:</p>
<ul>
<li>Create a new React Class or Component</li>
<li>Invoke a <code>render()</code> function within that Component</li>
<li>Render the Component to the DOM</li>
</ul>
<h4 id="reactcreateclass">React.createClass(</h4>
<p>Every Class is created with the <code>React.createClass</code> function that is passed an Object and at least a <code>render</code> function (A Class is basically a UI Component, therefor I'll call it Component from now on). The <code>render</code> function is used to return HTML that will be rendered to the DOM later. Every render function needs a <code>return</code> with some HTML. Below is the React Script to return a <code>h1</code> holding the String &ldquo;Hello World!&quot;.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">HelloWorld</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">createClass</span>({
  <span style="color:#a6e22e">render</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>() {
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">h1</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">Hello</span> <span style="color:#a6e22e">World</span><span style="color:#f92672">!</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#960050;background-color:#1e0010">h</span><span style="color:#960050;background-color:#1e0010">1</span><span style="color:#960050;background-color:#1e0010">&gt;</span>
  }
})
</code></pre></div><p>We can invoke out new React Component by calling the <code>React.render()</code> function. This function takes two parameters: first the Component to render and then the DOM Node where it should be rendered. The Component name in this case is the variable <code>HelloWorld</code> that'll be passed just like a HTML element: <code>&lt;HelloWorld /&gt;</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// Renders the HelloWorld Component into the Body.
</span><span style="color:#75715e"></span><span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">render</span>(<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">HelloWorld</span> <span style="color:#f92672">/</span><span style="color:#f92672">&gt;</span>, document.<span style="color:#a6e22e">body</span>);
</code></pre></div><p>And here's a working <a href="http://codepen.io">Pen</a> with additional comments.</p>
<!-- raw HTML omitted -->
<p>So far, we wrote our first ever React Component and rendered it into the DOM. Anyway, rendering static data is not so cool is it? Using a Framework to render junks of DOM Elements and static Markup isn't fun either. So next, we'll see how we can re-use a Component, pass data to it and embed one Component into another Component so it is repeated based on passed data - fun!</p>
<h3 id="hello-friend">Hello {friend}!</h3>
<p>React has its own template-engine-thingy. Instead of typing static strings you can pass data and use it in the return of the Render Function (or in any other function inside the component for that matter). All passed data is accessible via <code>this.props</code> and passed like <code>&lt;HelloWorld name=&quot;Kevin&quot; /&gt;</code>, which would than be accessed like <code>this.props.name</code>. Here's an example of this in action.</p>
<!-- raw HTML omitted -->
<p>However, to re-use the <code>HelloWorld</code> component we need to create another Component and use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"><code>Array.map</code></a> function to go over an Array of names.</p>
<p>So what we do now is the following:</p>
<ul>
<li>We extend the <code>&lt;HelloWorld /&gt;</code> component to accept a property</li>
<li>We create a new Component that renders multiple instances of <code>&lt;HelloWorld /&gt;</code></li>
<li>We render the new Component into the document</li>
</ul>
<p>This sounds complex but it is quite doable so let's start right away by extending the <code>HelloWorld</code> component and re-naming it to <code>Hello</code> since it will greet all kinds of people now.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// The new Hello Component
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Hello</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">createClass</span>({
  <span style="color:#a6e22e">render</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>() {
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">h1</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">Hello</span> {<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">name</span>}<span style="color:#f92672">!</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#960050;background-color:#1e0010">h</span><span style="color:#960050;background-color:#1e0010">1</span><span style="color:#960050;background-color:#1e0010">&gt;</span>
  }
});
</code></pre></div><p>With this simple change we can invoke the Component like <code>&lt;Hello name=&quot;Kevin&quot; /&gt;</code> and it will return <code>&lt;h1&gt;Hello Kevin!&lt;/h1&gt;</code>. However, to create a List of our friends we need a new Component. This Component will be called <code>FriendList</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">FriendList</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">createClass</span>({
  <span style="color:#a6e22e">render</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>() {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">allGreetings</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">folks</span>.<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">person</span>) {
      <span style="color:#66d9ef">return</span> <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">Hello</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">person</span>} <span style="color:#f92672">/</span><span style="color:#f92672">&gt;</span>;
    });

    <span style="color:#66d9ef">return</span>(
      <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">div</span><span style="color:#f92672">&gt;</span>{<span style="color:#a6e22e">allGreetings</span>}<span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#960050;background-color:#1e0010">d</span><span style="color:#960050;background-color:#1e0010">i</span><span style="color:#960050;background-color:#1e0010">v</span><span style="color:#960050;background-color:#1e0010">&gt;</span>
    )
  }
});
</code></pre></div><p>Quite a lot going on here. Let's break it down. First, we need to get all the greetings together. This is done by assigning them to a new variable called <code>allGreetings</code>. With Array.map() we go through the Array that'll be passed to the <code>FriendList</code> component when it is rendered, we call this property <code>folks</code>, so it is passed like <code>&lt;FriendList folks={friendArray} /&gt;</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// this.props.folks.map() goes over every entry in the array
</span><span style="color:#75715e"></span><span style="color:#75715e">// and returns a new Hello Component.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">allGreetings</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">folks</span>.<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">person</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">Hello</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">person</span>} <span style="color:#f92672">/</span><span style="color:#f92672">&gt;</span>;
});
</code></pre></div><p>What happens here is:</p>
<ul>
<li>we go through all the names in <code>this.props.folks</code></li>
<li>For each name, we return a new <code>&lt;Hello /&gt;</code> Component passing in the name of the person</li>
<li>All the HTML from all the Components now is assigned to the <code>allGreetings</code> variable</li>
</ul>
<p>So we have our HTML but we need to return it, right? Right! So the next line returns the generated HTML from the <code>FriendList</code> Component.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// the two parentese are optional but I like them for
</span><span style="color:#75715e"></span><span style="color:#75715e">// &#34;grouping&#34; the return. The div however is required.
</span><span style="color:#75715e"></span><span style="color:#75715e">// Every return must be wrapped in an DOM Element.
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span>(
      <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">div</span><span style="color:#f92672">&gt;</span>{<span style="color:#a6e22e">allGreetings</span>}<span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#960050;background-color:#1e0010">d</span><span style="color:#960050;background-color:#1e0010">i</span><span style="color:#960050;background-color:#1e0010">v</span><span style="color:#960050;background-color:#1e0010">&gt;</span>
    )
</code></pre></div><p>So here we return a <code>div</code> holding our generated HTML. The <code>div</code> is required because every React Component must return a HTML Container - and the <code>allGreetings</code> variable holds multiple containers so we need a new one. The parentese are optional but I prefer them for grouping the output. Next, we need to invoke our new Component.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// Here we create an Array of all the people we want to greet. In this
</span><span style="color:#75715e"></span><span style="color:#75715e">// case it&#39;s members from Team bullgit! http://bullg.it
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">allThePeople</span> <span style="color:#f92672">=</span> [
  <span style="color:#e6db74">&#34;Kevin&#34;</span>, <span style="color:#e6db74">&#34;Luky&#34;</span>, <span style="color:#e6db74">&#34;Jess&#34;</span>, <span style="color:#e6db74">&#34;Felix&#34;</span>, <span style="color:#e6db74">&#34;Max&#34;</span>, <span style="color:#e6db74">&#34;Nika&#34;</span>, <span style="color:#e6db74">&#34;Gregor&#34;</span>, <span style="color:#e6db74">&#34;Tim&#34;</span>, <span style="color:#e6db74">&#34;Jan&#34;</span>
]
<span style="color:#75715e">// and then we pass it to the FriendList Component.
</span><span style="color:#75715e"></span><span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">render</span>(<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">FriendList</span> <span style="color:#a6e22e">folks</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">allThePeople</span>}<span style="color:#f92672">/</span><span style="color:#f92672">&gt;</span>, document.<span style="color:#a6e22e">body</span>);
</code></pre></div><p>We create a normal JavaScript Array with our Friends&rsquo; names as strings, then pass it to the React component as the attribute <code>folks</code>. This array will then be accessible as <code>this.props.folks</code> from within the Component. And, as before, here is a Pen showing the output as well as some more comments on the code.</p>
<!-- raw HTML omitted -->
<p>That's it for creating a Component and re-using it inside another Component. For the next tutorial we'll see how we can use a state to give our Components some interaction. If you've got any questions or have found an issue, hit me up at <a href="https://twitter.com/_kevinatari">@_kevinatari</a>.</p>
<!-- raw HTML omitted -->
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/react" term="react" label="react" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Getting into Performance Measurement]]></title>
            <link href="https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2015/01/getting-into-vim-again/?utm_source=atom_feed" rel="related" type="text/html" title="Getting into vim - again" />
                <link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/?utm_source=atom_feed" rel="related" type="text/html" title="Endless Multi-Dimensional Navigation" />
                <link href="https://kevingimbel.de/blog/2014/07/conditional-css/?utm_source=atom_feed" rel="related" type="text/html" title="Conditional CSS" />
                <link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/?utm_source=atom_feed" rel="related" type="text/html" title="A closer look to closure" />
                <link href="https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Useful Web Developer Tools" />
            
                <id>https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/</id>
            
            
            <published>2015-03-10T00:00:00+00:00</published>
            <updated>2015-03-10T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>I've spent the past week developing some features for our own website at work.
We're using WordPress and I almost always enjoy working with WordPress beside
Magento projects, it's way easier to keep an overview and with a good overview
of data flow and available data it's easier to measure and find performance
bottleneck. In the following post I want to examine my workflow and the way I
refactored our code base to increase the speed and overall performance of our
site.</p>
<h3 id="mesuring-load-times">Mesuring load times</h3>
<h4 id="webpagetestorg">WebPageTest.org</h4>
<p>With <a href="http://webpagetest.org">WebPageTest.org</a> it is quite easy to measure load
times, render times, asset loading times and non cached assets. WPT even shows
which assets should be cached or served via a CDN. Initially it checks for First
View  and Repeat View and outputs a table of numbers and fancy graphics. The
thing I've been most interested in were First View and Content Breakdown. The
Content Breakdown showed that ~66% of our landing page consist of images so
optimizing these images (see below) was a natural approach to boost performance.
When testing with WebPageTest I like to select the second fastest Internet
connection and a location somewhere relevant (for this site America, for our own
somewhere in Germany).</p>
<p>Then I watch the videos and see how the loading wents on. At first it was a
blank page and after 2.5s the page &ldquo;suddenly&rdquo; rendered all content at once. This
was not the desired behavior and so I started testing more.</p>
<h4 id="chrome-developer-tools">(Chrome) Developer Tools</h4>
<p>Using the Developer Tools I cleared the cache and measured a &ldquo;fresh&rdquo; load of our
site to see how content is loaded and where rendering starts. It turned out that
rendering was blocked by several JavaScript files (third party) and Google
Fonts, which where loaded from within our CSS files as well as the high amount
of non-optimized images. All these things can be seen in the Network Tab.</p>
<p>In Chrome there are 2 vertical lines - blue and red. The blue line marks the
time at which the <code>DOMContentLoaded</code> event is fired, that is when the DOM is
ready to be manipulated by JavaScript. The red line marks the moment where the
<code>load</code> event fires. This event indicates that all content (CSS, JavaScript,
Images, etc.) has been loaded.</p>
<blockquote>
<p>Measuring performance and finding obvious bottlenecks has become fairly easy
nowadays. With Tools like <a href="http://webpagetest.org">WebPageTest.org</a>, Developer
Tools or automated testing suits there are a ton of ways to analyze a
the loading behavior of a website.</p>
</blockquote>
<p>With these two tools I started tracking down the various performance issues.
First of all the blocking JavaScript and a bit of unused code.</p>
<h3 id="unused-code">Unused Code</h3>
<p>While checking the Network Tab in Chrome Dev Tools I've seen that out of 16 Requests
one JavaScript Analytics Library was blocking the
rendering by almost 600-800ms. Because it was barely used I removed this one so
there was already a big improvement by removing unused or barely used code - one
should always check for unused plugins, libs and CSS - this is the most basic
&ldquo;improvement&rdquo; and optimization.</p>
<blockquote>
<p>Regularly refactor your code base to see where unused code exists or
code can be optimized. By ueing a Pre-Processor it's easy to remove the code
from production but keep it for later by using an <a href="http://sass-guidelin.es/#main-file">import system</a>.</p>
</blockquote>
<h3 id="minify">Minify</h3>
<p>Minifying files is always a good thing. No doubt. Use
<a href="https://github.com/mishoo/UglifyJS">Uglify</a> for JavaScript
and your favorite pre-proccessor's compress function.</p>
<h3 id="images">Images</h3>
<p>Next I found that our landing page is pretty image heavy, especially with a big
banner image. To reduce the size I searched for plugins to automate the process
but couldn't find a good one so I tried out <a href="http://pngquant.org/">PNGQuant</a> a
Command Line tool for PNG optimization. With this tool I could reduce the size
of almost any image by 50-70% which again reduced the load time by 100-200ms.</p>
<blockquote>
<p>Always optimize images, either with a tool before uploading them or with a
Plugin. Not optimizing images is a waste of time (literally) and bad for users.</p>
</blockquote>
<h3 id="fonts">Fonts</h3>
<p>As I mentioned earlier, rendering was also blocked by Google Fonts being
directly included into our Stylesheets. Out of curiosity I checked if loading it
asynchronously via the provided snippet from Google Fonts would help and indeed
it did! We saved almost 100ms simply by loading the Font files asynchronously.</p>
<p>On the very First View this can make the content &lsquo;jump&rsquo; a bit because the
initial view loads with a fallback font (sans-serif, for example) and then once
the Font is loaded from Google's CDN it replaces the old font with the new font
on-the-fly. This may looks ugly and if you absolutely can not live with it you
must take the 100ms-slower Pill and include the fonts in your CSS where they'll
be loaded before the CSS is rendered - therefore no delay.</p>
<p>Below is the function that'll load the fonts via a script tag that as the
<code>async</code> attribute set.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">WebFontConfig</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">google</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">families</span><span style="color:#f92672">:</span> [ <span style="color:#e6db74">&#39;Open+Sans:400,300,600:latin&#39;</span> ] }
};
(<span style="color:#66d9ef">function</span>() {
 <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wf</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;script&#39;</span>);
 <span style="color:#a6e22e">wf</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;https:&#39;</span> <span style="color:#f92672">==</span> document.<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">protocol</span> <span style="color:#f92672">?</span> <span style="color:#e6db74">&#39;https&#39;</span>
   <span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;http&#39;</span>) <span style="color:#f92672">+</span>
 <span style="color:#e6db74">&#39;://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js&#39;</span>;
 <span style="color:#a6e22e">wf</span>.<span style="color:#a6e22e">type</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;text/javascript&#39;</span>;
 <span style="color:#a6e22e">wf</span>.<span style="color:#a6e22e">async</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;true&#39;</span>;
 <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">s</span> <span style="color:#f92672">=</span>
 document.<span style="color:#a6e22e">getElementsByTagName</span>(<span style="color:#e6db74">&#39;script&#39;</span>)[<span style="color:#ae81ff">0</span>];
 <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">parentNode</span>.<span style="color:#a6e22e">insertBefore</span>(<span style="color:#a6e22e">wf</span>, <span style="color:#a6e22e">s</span>);
 })(); 
</code></pre></div><blockquote>
<p>Font rendering from within CSS can block the overall load time of the CSS
file. Splitting out the fonts from the CSS and loading them via JavaScript (if
possible) may increase the initial load time of the website.</p>
</blockquote>
<h3 id="serverside-optimizations">Server-side optimizations</h3>
<p>There's quite a lot to do when optimizing from the server side. From things like
optimizing Queries, Caching Queries to using the variety of Apache or Nginx
Modules and settings to optimize the servers workflow. While we have our site at
a specific WordPress Hoster our access to server features is mainly limited to
their admin interface and using the <code>.htaccess</code> - which is what I did.</p>
<h4 id="expire-dates">Expire Dates</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"># caching for 1 month
&lt;<span style="color:#f92672">IfModule</span> <span style="color:#a6e22e">mod_expires</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#a6e22e">c</span>&gt;
 ExpiresActive On
 ExpiresByType text/css &#34;access plus 1 month&#34;
 ExpiresByType text/javascript &#34;access plus 1 month&#34;
 ExpiresByType text/html &#34;access plus 1 month&#34;
 ExpiresByType application/javascript &#34;access plus 1 month&#34;
 ExpiresByType image/gif &#34;access plus 1 month&#34;
 ExpiresByType image/jpeg &#34;access plus 1 month&#34;
 ExpiresByType image/png &#34;access plus 1 month&#34;
 ExpiresByType image/x-icon &#34;access plus 1 month&#34;

  &lt;<span style="color:#f92672">FilesMatch</span> <span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#960050;background-color:#1e0010">(</span><span style="color:#a6e22e">gif</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">jpe</span><span style="color:#960050;background-color:#1e0010">?</span><span style="color:#a6e22e">g</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">png</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">ico</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">css</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">js</span><span style="color:#960050;background-color:#1e0010">)</span><span style="color:#960050;background-color:#1e0010">$</span><span style="color:#960050;background-color:#1e0010">&#34;</span>&gt;
    Header set Cache-Control &#34;public&#34;
  &lt;/<span style="color:#f92672">FilesMatch</span>&gt;
&lt;/<span style="color:#f92672">IfModule</span>&gt;
</code></pre></div><h4 id="compression-with-moddeflate">Compression with mod_deflate</h4>
<p>With this snippet above we tell the server to cache certain file types by 1
month (if they don't change of course). This way the server can sent back the
files from its cache instead of re-generating the files all the time. Next I
used <code>mod_deflate</code> to compress the files before they are sent to the client.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"># Deflate Compression by FileType
&lt;<span style="color:#f92672">IfModule</span> <span style="color:#a6e22e">mod_deflate</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#a6e22e">c</span>&gt;
 AddOutputFilterByType DEFLATE text/plain
 AddOutputFilterByType DEFLATE text/html
 AddOutputFilterByType DEFLATE text/xml
 AddOutputFilterByType DEFLATE text/css
 AddOutputFilterByType DEFLATE text/javascript
 AddOutputFilterByType DEFLATE application/xml
 AddOutputFilterByType DEFLATE application/xhtml+xml
 AddOutputFilterByType DEFLATE application/rss+xml
 AddOutputFilterByType DEFLATE application/atom_xml
 AddOutputFilterByType DEFLATE application/javascript
 AddOutputFilterByType DEFLATE application/x-javascript
&lt;/<span style="color:#f92672">IfModule</span>&gt;
</code></pre></div><p>Now all our files are cached and gzip (compressed). Additionally our Hoster has
its own cache (Varnish) which should benefit to our sites overall performance, too.</p>
<blockquote>
<p>Use your servers configuration to serve compressed and/or cached files instead
of re-generating the files on every request. Make sure to cache static content
like images, javascript or css.</p>
</blockquote>
<h3 id="lazyload-javascript">Lazy-load JavaScript</h3>
<p>We've been using our own delayed load for JavaScript assets ever since I started
working at <a href="http://synoa.de">Synoa</a>. We use the following function to include
our minified JavaScript after the DOM is loaded, if possible.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">loadAfterDom</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">script</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;script&#39;</span>);
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">body</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">body</span>;
  
  <span style="color:#a6e22e">script</span>.<span style="color:#a6e22e">type</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;text/javascript&#39;</span>;
  <span style="color:#a6e22e">script</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;path/to/main.min.js&#39;</span>;
  
  document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">script</span>);
}
<span style="color:#75715e">// load the script when the DOM is constructed
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span>(window.<span style="color:#a6e22e">addEventListener</span>) {
  window.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;DOMContentLoaded&#39;</span>, <span style="color:#a6e22e">loadAfterDom</span>, <span style="color:#66d9ef">false</span>);
} <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(window.<span style="color:#a6e22e">attachEvent</span>) {
  window.<span style="color:#a6e22e">attachEvent</span>(<span style="color:#e6db74">&#39;load&#39;</span>, <span style="color:#a6e22e">loadAfterDom</span>);  
} <span style="color:#66d9ef">else</span> {
  window.<span style="color:#a6e22e">onload</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">loadAfterDom</span>;  
}
</code></pre></div><p>This little script loads the <code>main.min.js</code> file after the DOM is constructed so
it doesn't block the rendering of the page.</p>
<blockquote>
<p>Lazy loading JavaScript only works when JavaScript is not needed for the
initial view (which it shouldn't). When you need JavaScript on render time to
hide elements, for example, it may be better to hide them initially and show them after the
page is loaded!</p>
</blockquote>
<h3 id="what-could-be-done-next">What could be done next?</h3>
<p>Next we could think about inlining our Critical Path CSS using a Grunt or Gulp
task, as Google PageSpeed suggests all the time. I've yet never done this before
and need to try it before I can say if it's worth or not.</p>
<p>In another round we could review the entire code base and replace the legacy
Compass compiler with modern, <a href="https://github.com/sass/node-sass">node-sass</a> and
<a href="https://github.com/sass/libsass">Libsass</a>, a C++ implementation of Sass that is
a lot faster than Ruby, to increase compile performance. Most of the vendor
prefixing is done using own mixins or compass functions (which are legacy), so
handing the prefixing job to <a href="https://github.com/postcss/autoprefixer">Autoprefixer</a>
is another desirable improvement.</p>
<h3 id="result">Result</h3>
<p>At this point, our website performs at 900ms-1.2s in load time for the front page
and 700-800ms for most sub pages. Yet there is still optimization that need to
be done, especially the question on how to integrate the optimization into
everyone's workflow. While developers could use a grunt/gulp/cli task the people
who actually write content need an easy way to handle the optimization of
uploaded files. The last resort of more optimization is the server respond time
on which we don't have any influence.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript" />
                             
                                <category scheme="https://kevingimbel.de/tags/tools" term="tools" label="tools" />
                             
                                <category scheme="https://kevingimbel.de/tags/css" term="css" label="css" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Snippet: theme-color for Android 5.0]]></title>
            <link href="https://kevingimbel.de/blog/2014/11/snippet-theme-color-for-android-5.0/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Useful Web Developer Tools" />
            
                <id>https://kevingimbel.de/blog/2014/11/snippet-theme-color-for-android-5.0/</id>
            
            
            <published>2014-11-21T00:00:00+00:00</published>
            <updated>2014-11-21T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Just yesterday I got my Android 5.0 update which also features a new way multi-tasking works and Chrome interacts with
this multi-tasking. In fact, all recently opened tabs are available via the multi-tasking button (square to the down
right on Stock Android) instead of an in-app button like it used to be. This not only is very handy actually since you
can switch between apps and websites seamlessly you can also set your own status bar colors for chrome which are used on
the page and in the multi-tasking overview.</p>
<h3 id="oneliner">One-liner!</h3>
<p>All it takes is a simple one-liner of HTML: a <code>&lt;meta&gt;</code>-tag!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;theme-color&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#5677fc&#34;</span>&gt;
</code></pre></div><p>The content can be any valid CSS color and that's it - nothing more to do!</p>
<h3 id="results">Results</h3>
<!-- raw HTML omitted -->
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/android" term="android" label="android" />
                             
                                <category scheme="https://kevingimbel.de/tags/chrome" term="chrome" label="chrome" />
                             
                                <category scheme="https://kevingimbel.de/tags/html" term="html" label="html" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Endless Multi-Dimensional Navigation]]></title>
            <link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/?utm_source=atom_feed" rel="related" type="text/html" title="A closer look to closure" />
                <link href="https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/?utm_source=atom_feed" rel="related" type="text/html" title="Passing Arguments in JavaScript" />
                <link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="related" type="text/html" title="Pure JavaScript slider" />
                <link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/?utm_source=atom_feed" rel="related" type="text/html" title="To infinity and beyond" />
                <link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="related" type="text/html" title="i-js" />
            
                <id>https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/</id>
            
            
            <published>2014-08-22T00:00:00+00:00</published>
            <updated>2014-08-22T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>The past I decided to get my head around multi-dimensional navigations, like navigations that can have (endless) sub navigations nested inside them and so I started to try some ideas on <a href="http://codepen.io">CodePen</a>. My first idea was to have a trigger element that, when clicked, triggeres the nearest Sub Navigation to activate it (e.g. giving it an <code>open</code> class). The JavaScript for this looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">d</span> <span style="color:#f92672">=</span> document,
    <span style="color:#a6e22e">trigger</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">d</span>.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;#trigger&#39;</span>),
    <span style="color:#a6e22e">subNav</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">trigger</span>.<span style="color:#a6e22e">parentNode</span>.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;.sub-nav&#39;</span>);

<span style="color:#a6e22e">trigger</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;click&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
  <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">preventDefault</span>(); <span style="color:#75715e">// cancels reload on &lt;a&gt; tags
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">subNav</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">toggle</span>(<span style="color:#e6db74">&#39;open&#39;</span>);
});
</code></pre></div><p>So with this, each time the trigger is clicked the sub navigation will get the class applied or removed
(<code>classList.toggle()</code>). The <code>subNav</code> class is markup related, because the trigger is inside a <code>&lt;li&gt;</code>, as well as the sub
nav, so <code>this.parentNode</code> will return the <code>&lt;li&gt;</code> element.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">ul</span>&gt;
  &lt;<span style="color:#f92672">li</span>&gt;
    &lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;trigger&#34;</span>&gt;+&lt;/<span style="color:#f92672">span</span>&gt; <span style="color:#75715e">&lt;!--</span><span style="color:#75715e"> this.parentNode returns the &lt;li&gt;
</span><span style="color:#75715e">      &lt;ul class=&#34;sub</span><span style="color:#75715e">-</span><span style="color:#75715e">nav&#34;&gt;
</span><span style="color:#75715e">        ...
</span><span style="color:#75715e">      &lt;/ul&gt;
</span><span style="color:#75715e">  &lt;/li&gt;
</span><span style="color:#75715e">&lt;/ul&gt;
</span></code></pre></div><p>So the basic markup for navigations is now like this</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"> &lt;<span style="color:#f92672">ul</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;my-nav-wrapper-class&#34;</span>&gt;
    &lt;<span style="color:#f92672">li</span> <span style="color:#a6e22e">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span>&gt; Sub nav &lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;xy&#34;</span> <span style="color:#a6e22e">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span>&gt;+&lt;/<span style="color:#f92672">span</span>&gt;
      &lt;<span style="color:#f92672">ul</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sub-nav&#34;</span> <span style="color:#a6e22e">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
      &lt;/<span style="color:#f92672">ul</span>&gt;
    &lt;/<span style="color:#f92672">li</span>&gt;
 &lt;/<span style="color:#f92672">ul</span>&gt;
</code></pre></div><p>One of the most important things here is the <code>data-id</code> attribute which groups the navigations, triggers and (endless)
sub navigations together and is used to reference each of them.</p>
<h3 id="event-bubbling">Event Bubbling</h3>
<p>Yet before we get to the actual code it's important to understand event bubbling. If you already know what it is skip
this section and continue with &ldquo;Finaly: Code&rdquo; below.
Event Bubbling is the concept of how the browser handles events. Your're most likly familiar with <code>e.preventDefault()</code>
for click events applied to <code>&lt;a&gt;</code>-tags. This function stops the normal event bubbling so the browser doesn't reload
the page - which is the default action for <code>&lt;a&gt;</code>-tags.
So in our case the behavior we make use of is event bubbling, as said before. Take a look at the graphic below and then
read on.
<img src="https://i.kevingimbel.me/sc/event_flow_v1.png" alt="&ldquo;Event Bubbling for this navigation&rdquo;">
When the even get's triggered it finds no handler and the event literally goes up the DOM until it finds a handler. Node
by node the little event walks up until finally the navigation wrapper says &ldquo;Yes little event! I got you, I'll handle
that!&rdquo; - and that's it. When the handler attached to the navigation handles the event it will also populate it's <code>el</code>
variable with whatever <code>e.target</code> currently is. <code>e.target</code> happens to always be the <strong>triggering element</strong>, so it is
very similar to <code>this</code>, yet even more flexible!</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                             
                                <category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[A closer look to closure]]></title>
            <link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/?utm_source=atom_feed" rel="related" type="text/html" title="Passing Arguments in JavaScript" />
                <link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="related" type="text/html" title="Pure JavaScript slider" />
                <link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/?utm_source=atom_feed" rel="related" type="text/html" title="To infinity and beyond" />
                <link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="related" type="text/html" title="i-js" />
            
                <id>https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/</id>
            
            
            <published>2014-07-20T00:00:00+00:00</published>
            <updated>2014-07-20T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Closure is a very interesting concept in JavaScript. It basically determinse where and how variables or
functions are accessable and where not. Since this is an essential part of JavaScript and one can run into quite some
problems I want to try and give short introduction to closure and what it can be good for. It's good to have at least
basic understanding of JavaScript.</p>
<p>So before I start I'd like to say that I consider myself a JavaScript beginner and this is how I understand closure
and scopes at the moment. If you happen to find mistakes please <a href="https://twitter.com/_kevinatari">tweet me</a> or <a href="https://github.com/kevingimbel/kevingimbel.github.io/issues?page=1&amp;state=open">open an
issue</a>.</p>
<p>Consider the following example</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;

(<span style="color:#66d9ef">function</span>(){
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
}());

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">x</span>);
</code></pre></div><p>What value will <code>x</code> have when logged to the console? 5 or 10? The correct answer is 5, because inside the immediate
executing function <code>var x</code> does not reference the previously defined <code>var x</code>. They're both standalone and do not effect
each other. Let's try this again and see what happens now</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;

(<span style="color:#66d9ef">function</span>() {
  <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
}());

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">x</span>);
</code></pre></div><p>What value will <code>x</code> have now? Still 5, because it's the same function but we only left the <code>var</code> keyword? Nope, now <code>x</code>
inside the immediate executing function references the previously defined <code>var x</code> and will update it's value, so
<code>console.log(x)</code> results to 10 this time. As you can see just now, leaving out the single word <code>var</code> can change how your
program behaves. The missing var statment, where closure hits hard and overrides the variable, can really be annoying
because JavaScript doesn't throw errors. Overriding values inside a closure, e.g. the immediate executing function, is
perfectly fine.</p>
<p>So what happens if we pass <code>x</code>, which is 10 now, to the immediate executing function and declare &lsquo;x = 15&rsquo; inside the
functions body? Will <code>x</code> become 15 or stay 10?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">// x is 10 at this point
</span><span style="color:#75715e"></span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">x</span>){
	<span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">15</span>;
}(<span style="color:#a6e22e">x</span>));
</code></pre></div><p>As the result shows, x is still 10. But wait, wasn't it supposed to be overridden if we don't declare <code>var x = 15</code>? Well
that is true, but since we pass x as a parameter, x is &ldquo;re-defined&rdquo; as a local variable and, inside the functions body, it is
indeed 15 - outside it is not.</p>
<!-- raw HTML omitted -->
<h3 id="what-can-closures-do-for-me">What can closures do for me?</h3>
<p>What can it do? Good stuff. Closures can help to organize code and keep the global namespace clear. In general one shouldn't write variables into the global namespace because they're almost asking to be overriden or changed. Let's say one writes a function like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">assert</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">con</span>, <span style="color:#a6e22e">msg</span>) {
  <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">con</span>) {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#a6e22e">msg</span>);
  } <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">msg</span>);
  }
}
</code></pre></div><p>That's a super simple assert function to see if a statment (<code>con</code>dition) is true or false. If it's false we'll log a console.error(), if not we'll log a normal console.log() statement. This is great and perfectly fine unless someone else
tries to use a function with the same name. Then there'll be a &ldquo;conflict&rdquo; and the last declared function overrides the other. (In this example I'll use a function called myFunction)</p>
<!-- raw HTML omitted -->
<p>So still, what can closure do for me? It can save my declared functions - inside a closure. So far all closure examples were immediate executing function, but Objects also create closures, assigning all there properties to a specific &ldquo;namespace&rdquo;.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myFunction</span>() <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
}

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myNamespace</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">myFunction</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>() {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
  }
}
</code></pre></div><p>This way we introduce one variable to the global scope: myNamespace and keep all the functions inside this scope.
Therefore, the myFunction() is still accessable within the scope and has the expected results, no matter who
declares myFunction in the globale scope.</p>
<!-- raw HTML omitted -->
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript" />
                             
                                <category scheme="https://kevingimbel.de/tags/closure" term="closure" label="closure" />
                             
                                <category scheme="https://kevingimbel.de/tags/scoping" term="scoping" label="scoping" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Passing Arguments in JavaScript]]></title>
            <link href="https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="related" type="text/html" title="Pure JavaScript slider" />
                <link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/?utm_source=atom_feed" rel="related" type="text/html" title="To infinity and beyond" />
                <link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="related" type="text/html" title="i-js" />
            
                <id>https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/</id>
            
            
            <published>2014-05-23T00:00:00+00:00</published>
            <updated>2014-05-23T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>One of my favorite aspects of JavaScript is that it is unbelievable flexible. I am currently reading &ldquo;Secrets of the JavaScript Ninja&rdquo; by the amazing <a href="http://ejohn.org">John Resig</a> and try to play around with JavaScript whenever I've the time to do so. Just yesteday I needed to pass as many arguments to a function as the user wants which means I can't check for every possible thingy. Anyway, I'll cover this in a small write-up aka a blog post. Yay!</p>
<p>First of all we should have some use case or scenario. I needed the a variable number of options for my <a href="https://github.com/bullgit/Bulllog">Bulllog</a> script that takes any number of CSS oroperty-value pairs and applies them to your console.logs (Chrome only, sadly). Anyway, CSS is a good example in my opinion so we'll write a small css() function that can be applies to an element.</p>
<p>First of all, what should this function do? It should:</p>
<ul>
<li>Take any number of CSS property-value pairs</li>
<li>apply them to our element</li>
<li>respond (console.log()) errors if any happen</li>
</ul>
<h3 id="the-functions">The functions</h3>
<p>We'll start with the basic: getting an element and manipulating its CSS.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">	<span style="color:#75715e">// Getting the element
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>( <span style="color:#e6db74">&#39;.test&#39;</span> );
	<span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">background</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;red&#39;</span>;
	<span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">style</span>[<span style="color:#e6db74">&#39;background&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;black&#39;</span>;
</code></pre></div><p>Both of the above ways (<code>el.style.background</code> and <code>el.style['background']</code>) work the exact same way. But that's not much fun, right? Why should we want to set our styles this way and where's the dynamic functional stuff at all? Lets extend the script with a <code>css</code> function.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">css</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">css</span>( <span style="color:#a6e22e">el</span>, <span style="color:#a6e22e">options</span> ) {
	<span style="color:#75715e">/*1 */</span>
  <span style="color:#66d9ef">if</span>( <span style="color:#66d9ef">typeof</span>(<span style="color:#a6e22e">el</span>) <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;object&#39;</span> ) {
    <span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">el</span>;
  } <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>( <span style="color:#a6e22e">el</span> );
  }
	<span style="color:#75715e">/* 2 */</span>
  <span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">style</span>[<span style="color:#a6e22e">opts</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;red&#39;</span>;
}
</code></pre></div><p>What this script does:</p>
<ol>
<li>check if el is already an object, if so we don't need to select it again. That'd be the case if we pass the previously defined <code>el</code> directly to the function.  We can also use <code>css('.my-class', 'background');</code></li>
<li>Set the desired property, e.g. background, color to be red.</li>
</ol>
<p>Alright, that's not bad but why should we want to sett everything to red? You're right - we don't want this. Next up: for in loops!</p>
<h3 id="for-key-in-obj">For key in obj</h3>
<p>For loops are always fun and especially <code>for in</code> loops. They're perfect for our needs because we'll pass a list (or better an Object) with property-value pairs to our function and need to process them so they can be applies as styles. Our modified function now looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">css</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">css</span>( <span style="color:#a6e22e">el</span>, <span style="color:#a6e22e">options</span> ) {
	<span style="color:#66d9ef">if</span>( <span style="color:#66d9ef">typeof</span>( <span style="color:#a6e22e">el</span> ) <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;object&#39;</span> ) {
		<span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">el</span>;
	} <span style="color:#66d9ef">else</span> {
		<span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#a6e22e">el</span>);
	}
	<span style="color:#75715e">/* 1 */</span>
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">styleProperties</span> <span style="color:#f92672">=</span> [],
      <span style="color:#a6e22e">styleValues</span> <span style="color:#f92672">=</span> [];
  <span style="color:#75715e">/* 2 */</span>
  <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">key</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">options</span>) {
    <span style="color:#75715e">/* 3 */</span>
		<span style="color:#a6e22e">styleProperties</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">key</span>);
    <span style="color:#a6e22e">styleValues</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">options</span>[<span style="color:#a6e22e">key</span>])
  }
}
</code></pre></div><ol>
<li>We need to create an empty array to store all our property-value pairs in.</li>
<li>We start our for in loop. We go over every key in our options object.</li>
<li>Every propery-value pair gets pushed into our arrays, the properties into the <code>styleProperties</code> array and the values into the <code>styleValues</code> array.
I'm sure there is a more elegant way to do this, but I couldn't really think of any - so I'm as always up for improvments!</li>
</ol>
<p>Our <code>css()</code> function just got a lot more flexible! Before we could only set any property to one value (everything we want to <code>red</code>), now we can pass a lot of property-value pairs and they'll get processes by our function! Awesome, right?
Calling the function would now look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">	<span style="color:#a6e22e">css</span>(<span style="color:#e6db74">&#39;.my-div&#39;</span>, {
	  <span style="color:#a6e22e">color</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;yellow&#39;</span>,
	  <span style="color:#a6e22e">background</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#333&#39;</span>
	});
</code></pre></div><h3 id="almost-there">Almost there</h3>
<p>So far we can pass a list (object) of property-value pairs and process them into two nice arrays. However, the function does not apply these styles yet which is why we have to do one last step.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">  <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">styleProperties</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">style</span>[<span style="color:#a6e22e">styleProperties</span>[<span style="color:#a6e22e">i</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">styleValues</span>[<span style="color:#a6e22e">i</span>];
  }
</code></pre></div><p>We iterate over the array (doesn't matter which because both are exatctly the same size) and extract the matching properties and values. That's the point where we actually apply the styles.</p>
<p>The result looks like this.</p>
<!-- raw HTML omitted -->
<p>With this technique you can make any function accept any amount of property-value pairs by simply passing in an object. This would also work when you define the object itsef as a variable (see the second div). It's important to know that properties like <code>font-size</code> must be written in quotes (e.g. <code>&quot;font-size&quot;: &quot;1em&quot;</code>), otherwise the script will fail.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Pure JavaScript slider]]></title>
            <link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/?utm_source=atom_feed" rel="related" type="text/html" title="To infinity and beyond" />
                <link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="related" type="text/html" title="i-js" />
            
                <id>https://kevingimbel.de/blog/2014/02/pure-javascript-slider/</id>
            
            
            <published>2014-02-22T00:00:00+00:00</published>
            <updated>2014-02-22T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>The great thing when you're a beginner in any programming language (or in anything in general) is, that even small successes make you happy and proud of what you did. I'm very  proud of my <a href="http://kevingimbel.com/to-infinity-and-beyond/">back to top script</a> even though it's not perfect at all. I could make a back to top button with jQuery in a few minutes but it wouldn't be that much fun. However, I made another JavaScript thing I'm proud of: A pure JavaScript slider.</p>
<!-- raw HTML omitted -->
<p>The slider runs forever in a loop, animating images to the left until the last image is reached. When the last image is reached it will animate all back to the first image (I'm not happy with this animation yet) and will start over. Pretty simple. The hardest part for me was - and still is - the animation timing. I'm may over-thinking stuff but I can't figure out a formula to calculate a good timing based on how many images the slider has. If someone has an idea, fork the pen or <a href="http://twitter.com/_kevinatari">tweet me</a>.</p>
<p>First of all I defined some variables.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">     <span style="color:#75715e">// current image is 0
</span><span style="color:#75715e"></span> <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">current</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
     <span style="color:#75715e">// used for loops
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">i</span>,
     <span style="color:#75715e">// the whole slider element
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">slider</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;[data-js=&#34;sslide&#34;]&#39;</span>),
     <span style="color:#75715e">// all images inside the slider
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">allImages</span> <span style="color:#f92672">=</span>  <span style="color:#a6e22e">slider</span>.<span style="color:#a6e22e">querySelectorAll</span>(<span style="color:#e6db74">&#39;img&#39;</span>),
     <span style="color:#75715e">// the width of 1 image based on all images (used in % later)
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">imgWidth</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">ceil</span>(<span style="color:#ae81ff">100</span> <span style="color:#f92672">/</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span>),
     <span style="color:#75715e">// the slider width based on the number of images
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">sliderWidth</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>;
</code></pre></div><p>Next I set the width of all images as well as the slider.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    
  <span style="color:#a6e22e">slider</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">width</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">sliderWidth</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;%&#39;</span>;
    
  <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#a6e22e">allImages</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">width</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">imgWidth</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;%&#39;</span>;
  }
</code></pre></div><p>Now the slider and images have the correct width (in percent) and I began to make the animation part. It's made with the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.setInterval">setInterval</a> JavaScript function.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">animateLeft</span>(<span style="color:#a6e22e">cur</span>) {
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
          <span style="color:#a6e22e">time</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">animate</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span>() {
      <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">imgWidth</span>) {
        <span style="color:#a6e22e">allImages</span>[<span style="color:#a6e22e">cur</span>].<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">marginLeft</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">i</span>  <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;%&#34;</span>;
        <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>;
      } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">clearInterval</span>(<span style="color:#a6e22e">animate</span>);
      }
      }, <span style="color:#a6e22e">time</span>);  
   }
</code></pre></div><p>The interval runs as long as <code>i</code> is smaller or equal to the image width. Because the interval is set to 50ms it runs &ldquo;fast&rdquo; and sets the images <code>margin-left</code> rapidly to <code>-i%</code> and because it runs as long as <code>i</code> is smaller than the image width it hides the image completely to the left. Pretty simple right? However, <code>time</code> is at the moment a variable that is set to 50 because I couldn't figure out a good way to calculate it.</p>
<p>Another function I use is <code>animateRight</code> that is just the opposite of <code>animateLeft</code>. It is only used to animate all images back to the start and has the same markup as <code>animateLeft</code> expect it runs revers (<code>i--</code>). I combine it with a <code>reset</code> function that also resets the <code>current</code> variable to 0.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">  <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">animateRight</span>(<span style="color:#a6e22e">cur</span>) {
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">imgWidth</span>,
          <span style="color:#a6e22e">time</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">animate</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span>() {
      <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">sliderWidth</span>) {
        <span style="color:#a6e22e">allImages</span>[<span style="color:#a6e22e">cur</span>].<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">marginLeft</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;%&#34;</span>;
        <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span>;
      } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">clearInterval</span>(<span style="color:#a6e22e">animate</span>);
      }
      }, <span style="color:#a6e22e">time</span>);  
   } 
    
    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">reset</span>() {
      <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">animateRight</span>(<span style="color:#a6e22e">i</span>);
      }
      <span style="color:#75715e">// resseting the current image to the first image
</span><span style="color:#75715e"></span>      <span style="color:#a6e22e">current</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    }   
</code></pre></div><p>That's all the functions I needed for this slider - I could've combined the <code>animateLeft</code> and <code>animateRight</code> function and if I continue developing this slider I'll make it. Last thing to do: Call a final interval that handles the sliding of all images.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span> () {
      <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">current</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>) {
        <span style="color:#a6e22e">animateLeft</span>(<span style="color:#a6e22e">current</span>);
        <span style="color:#a6e22e">current</span><span style="color:#f92672">++</span>;
        
      } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">reset</span>();
      }
    }, <span style="color:#ae81ff">3000</span>);
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Labels in GMail]]></title>
            <link href="https://kevingimbel.de/blog/2014/01/labels-in-gmail/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://kevingimbel.de/blog/2014/01/labels-in-gmail/</id>
            
            
            <published>2014-01-08T00:00:00+00:00</published>
            <updated>2014-01-08T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In case your company is using <a href="http://www.google.com/intx/de/enterprise/apps/business/campaign/business-email-by-google-de.html?utm_campaign=emea-smb-apps-bkws-de&amp;utm_medium=cpc&amp;utm_source=google&amp;utm_term=gmail%20business">GMail Business</a> there's one thing that comes to your daily work-life I really love about GMail: <strong>Labels</strong>. Labels are used to sort eMails automatically and - what I really love about - without removing them from the Inbox into 1000 folders. Instead they just get a Label and their own &ldquo;View&rdquo; inside GMail - on Desktop as well as Mobile which makes them even better!</p>
<p>Unfortunately they're kinda hidden and not really promoted by Google. To set up automatic labels you first you need to click the <strong>gear</strong> in the upper right, then <strong>Settings</strong> and then, in the top navigation just below the search input <strong>Filters</strong>. Now there's a &ldquo;Create new Filter&rdquo; link you should click. (I personally always search for this link because it is not highlighted in any way).</p>
<p>However, a dialog pops up where you can enter a bunch of stuff: From, To, Subject, Has words, Has not words, Has Attachment and Don't include chats. Pretty obvious what can be done here, right? Indeed but the thing is: When you work with a CallTracker system most of the input emails are not from a specific eMail so filtering after an eMail address is not an option. I currently stick with filtering the Subject Line for everything project. I'll give a example:</p>
<ul>
<li>Project Name: Project X</li>
<li>CallTracker Schemata: &ldquo;[Project X - TASK #1 ] Description of the Task&hellip;&rdquo;</li>
<li>Expected Subject from Clients/Colleags: &ldquo;Project X&rdquo;, &ldquo;project-x.com&rdquo;, &ldquo;Project-X&rdquo;</li>
</ul>
<p>So the rule I'd define here for the subject would be the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> <span style="color:#75715e"># Subject</span>
 <span style="color:#e6db74">&#34;Project X&#34;</span> OR project-x.com OR <span style="color:#e6db74">&#34;[Project X&#34;</span> OR <span style="color:#e6db74">&#34;Project-X&#34;</span>
</code></pre></div><p>The <strong>OR</strong> tells GMail to look for any of these Subject lines and put a label on it. The quotes are only used if there's a space between the words.
This rule covers the CallTracker as well as the other eMail Subjects so that everything gets sorted automatically into it's own Label view. I also try to match the Brand color with the Label color to have a visual difference for myself.</p>
<!-- raw HTML omitted -->
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/work" term="work" label="work" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/gmail" term="gmail" label="gmail" />
                             
                                <category scheme="https://kevingimbel.de/tags/productivity" term="productivity" label="productivity" />
                             
                                <category scheme="https://kevingimbel.de/tags/workflow" term="workflow" label="workflow" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Pseudo Product Flags]]></title>
            <link href="https://kevingimbel.de/blog/2013/11/pseudo-product-flags/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2013/10/custom-radio-buttons/?utm_source=atom_feed" rel="related" type="text/html" title="Custom Radio Buttons" />
                <link href="https://kevingimbel.de/blog/2013/10/from-0-to-sass/?utm_source=atom_feed" rel="related" type="text/html" title="From 0 To Sass" />
                <link href="https://kevingimbel.de/blog/2013/09/a-bit-sticky/?utm_source=atom_feed" rel="related" type="text/html" title="A bit sticky" />
            
                <id>https://kevingimbel.de/blog/2013/11/pseudo-product-flags/</id>
            
            
            <published>2013-11-24T00:00:00+00:00</published>
            <updated>2013-11-24T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>For a recent client Project I had to create Product Flags that are displayed at the top of each product. The Flags should have different colors and different values (which also have different lengths). The values are applied via the <code>data</code> Attribute and the colors are also controlled via a data Attribute. The &ldquo;Problem&rdquo; with this task was that it's not only a few different length, it's a multi-language system and therefore can end up in a lot of different width of the product flags - a &ldquo;fixed&rdquo; solution, like applying a <code>max-width</code> of let's say 20em, isn't the best solution for this so I ended up creating a flexible solution.</p>
<h3 id="the-setup">The Setup</h3>
<p>First of all I had a Product and a <code>div</code> that holds the flag (in this example &ldquo;Tag&rdquo;).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">article</span>&gt;
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;tag&#34;</span> <span style="color:#a6e22e">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#a6e22e">data-tagname</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;STAR WARS&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
  &lt;<span style="color:#f92672">hgroup</span>&gt;
    &lt;<span style="color:#f92672">h2</span>&gt;Awesome Star Wars Cup&lt;/<span style="color:#f92672">h2</span>&gt;
      &lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.getdigital.de/web/getdigital/gfx/products/__generated__resized/1100x1100/R2D2_Relief_Mug_Titel.jpg&#34;</span> <span style="color:#a6e22e">alt</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span> /&gt;
  &lt;/<span style="color:#f92672">hgroup</span>&gt;
  &lt;<span style="color:#f92672">p</span>&gt;(img via &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.getdigital.de/R2D2-3D-Relief-Becher.html&#34;</span>&gt;getDigital.de&lt;/<span style="color:#f92672">a</span>&gt;)&lt;/<span style="color:#f92672">p</span>&gt;
&lt;/<span style="color:#f92672">article</span>&gt;
</code></pre></div><p>The <code>data-id</code> controls the color of the tag and the <code>data-tagname</code> controls the content of it. In the real-world example they're applied via a Content Management System and, as I said before, can vary in length. The HTML Job is done with this setup and now comes the most fun part: The (S)CSS.</p>
<h3 id="css">CSS</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">  .<span style="color:#a6e22e">tag</span> {
    <span style="color:#66d9ef">width</span>:<span style="color:#66d9ef">auto</span>;
    <span style="color:#66d9ef">height</span>:<span style="color:#66d9ef">auto</span>;
    <span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">absolute</span>;
    <span style="color:#66d9ef">top</span>:<span style="color:#ae81ff">-1</span><span style="color:#66d9ef">em</span>;
    <span style="color:#66d9ef">left</span>:<span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">background</span>:<span style="color:#ae81ff">#8e44ad</span>; <span style="color:#960050;background-color:#1e0010">/</span><span style="color:#960050;background-color:#1e0010">/</span> <span style="color:#960050;background-color:#1e0010">s</span><span style="color:#960050;background-color:#1e0010">t</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">n</span><span style="color:#960050;background-color:#1e0010">d</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">r</span><span style="color:#960050;background-color:#1e0010">d</span> <span style="color:#960050;background-color:#1e0010">b</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">c</span><span style="color:#960050;background-color:#1e0010">k</span><span style="color:#960050;background-color:#1e0010">g</span><span style="color:#960050;background-color:#1e0010">r</span><span style="color:#960050;background-color:#1e0010">o</span><span style="color:#960050;background-color:#1e0010">u</span><span style="color:#960050;background-color:#1e0010">n</span><span style="color:#960050;background-color:#1e0010">d</span> <span style="color:#960050;background-color:#1e0010">i</span><span style="color:#960050;background-color:#1e0010">f</span> <span style="color:#960050;background-color:#1e0010">t</span><span style="color:#960050;background-color:#1e0010">h</span><span style="color:#960050;background-color:#1e0010">e</span><span style="color:#960050;background-color:#1e0010">r</span><span style="color:#960050;background-color:#1e0010">e</span><span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#960050;background-color:#1e0010">s</span> <span style="color:#960050;background-color:#1e0010">n</span><span style="color:#960050;background-color:#1e0010">o</span> <span style="color:#960050;background-color:#1e0010">d</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">t</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#960050;background-color:#1e0010">i</span><span style="color:#960050;background-color:#1e0010">d</span>
    <span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">.5</span><span style="color:#66d9ef">em</span>;
}
</code></pre></div><p>The basic tag should be position absolute on the left of the article and <code>-1em</code> on top of the article (this comes because the article has a padding of 1.5em and I want it to be half the way out of the article container). So far there is a tag with auto width and auto height. With the next snippet we'll get the data-tagname inside out pseudo element.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">    <span style="color:#f92672">&amp;</span>:<span style="color:#a6e22e">before</span> {
      <span style="color:#66d9ef">content</span>:attr(data<span style="color:#f92672">-</span>tagname);
    }
</code></pre></div><p>and a small triangle behind it</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">    <span style="color:#f92672">&amp;</span>:<span style="color:#a6e22e">after</span> {
      <span style="color:#66d9ef">content</span>:<span style="color:#e6db74">&#34;&#34;</span>;
      <span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">absolute</span>;
      <span style="color:#66d9ef">left</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
      <span style="color:#66d9ef">top</span>:<span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">border-top</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span> <span style="color:#66d9ef">solid</span> <span style="color:#66d9ef">transparent</span>;
      <span style="color:#66d9ef">border-left</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span> <span style="color:#66d9ef">solid</span> <span style="color:#a6e22e">darken</span>(<span style="color:#ae81ff">#8e44ad</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>); <span style="color:#960050;background-color:#1e0010">/</span><span style="color:#960050;background-color:#1e0010">/</span> <span style="color:#960050;background-color:#1e0010">f</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">l</span><span style="color:#960050;background-color:#1e0010">l</span><span style="color:#960050;background-color:#1e0010">b</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">c</span><span style="color:#960050;background-color:#1e0010">k</span> <span style="color:#960050;background-color:#1e0010">i</span><span style="color:#960050;background-color:#1e0010">f</span> <span style="color:#960050;background-color:#1e0010">n</span><span style="color:#960050;background-color:#1e0010">o</span> <span style="color:#960050;background-color:#1e0010">d</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">t</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#960050;background-color:#1e0010">i</span><span style="color:#960050;background-color:#1e0010">d</span> <span style="color:#960050;background-color:#1e0010">i</span><span style="color:#960050;background-color:#1e0010">s</span> <span style="color:#960050;background-color:#1e0010">g</span><span style="color:#960050;background-color:#1e0010">i</span><span style="color:#960050;background-color:#1e0010">v</span><span style="color:#960050;background-color:#1e0010">e</span><span style="color:#960050;background-color:#1e0010">n</span>
    }
</code></pre></div><p>Success! The first basic tag is finished, but why the <code>data-id</code> you may ask? Because they make the magic! As I said before the color is controlled via <code>data-id</code> and here's how this works:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">&amp;</span><span style="color:#f92672">[</span><span style="color:#f92672">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span><span style="color:#f92672">]</span> {
  <span style="color:#66d9ef">background</span>:<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-1</span>;
    <span style="color:#960050;background-color:#1e0010">&amp;</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">f</span><span style="color:#960050;background-color:#1e0010">t</span><span style="color:#960050;background-color:#1e0010">e</span><span style="color:#960050;background-color:#1e0010">r</span> <span style="color:#960050;background-color:#1e0010">{</span>
      <span style="color:#66d9ef">border-left-color</span>:<span style="color:#a6e22e">darken</span>(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-1</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);
  }
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>If you repeat this for all your <code>data-id</code>s and colors you'll end up having some sweet Product Flags. The whole code for my product flags looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">  .<span style="color:#a6e22e">tag</span> {
    <span style="color:#66d9ef">width</span>:<span style="color:#66d9ef">auto</span>;
    <span style="color:#66d9ef">height</span>:<span style="color:#66d9ef">auto</span>;
    <span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">absolute</span>;
    <span style="color:#66d9ef">top</span>:<span style="color:#ae81ff">-1</span><span style="color:#66d9ef">em</span>;
    <span style="color:#66d9ef">left</span>:<span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">background</span>:<span style="color:#ae81ff">#8e44ad</span>; <span style="color:#75715e">/* fallback if no data-id is given */</span>
    <span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">.5</span><span style="color:#66d9ef">em</span>;

    <span style="color:#960050;background-color:#1e0010">&amp;</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#960050;background-color:#1e0010">b</span><span style="color:#960050;background-color:#1e0010">e</span><span style="color:#960050;background-color:#1e0010">f</span><span style="color:#960050;background-color:#1e0010">o</span><span style="color:#960050;background-color:#1e0010">r</span><span style="color:#960050;background-color:#1e0010">e</span> <span style="color:#960050;background-color:#1e0010">{</span>
      <span style="color:#66d9ef">content</span>:attr(data<span style="color:#f92672">-</span>tagname);
    }
    <span style="color:#f92672">/</span><span style="color:#f92672">/</span> <span style="color:#f92672">there</span><span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">s</span> <span style="color:#f92672">always</span> <span style="color:#f92672">a</span> <span style="color:#f92672">triangle</span> <span style="color:#f92672">behind</span> <span style="color:#f92672">it</span>
    <span style="color:#f92672">&amp;</span>:<span style="color:#a6e22e">after</span> {
      <span style="color:#66d9ef">content</span>:<span style="color:#e6db74">&#34;&#34;</span>;
      <span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">absolute</span>;
      <span style="color:#66d9ef">left</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
      <span style="color:#66d9ef">top</span>:<span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">border-top</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span> <span style="color:#66d9ef">solid</span> <span style="color:#66d9ef">transparent</span>;
      <span style="color:#66d9ef">border-left</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span> <span style="color:#66d9ef">solid</span> <span style="color:#a6e22e">darken</span>(<span style="color:#ae81ff">#8e44ad</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);  <span style="color:#75715e">/* fallback if no data-id is given */</span>
    }


    <span style="color:#f92672">/</span><span style="color:#f92672">/</span> <span style="color:#f92672">the</span> <span style="color:#f92672">data-id</span> <span style="color:#f92672">controls</span> <span style="color:#f92672">the</span> <span style="color:#f92672">colors</span>
    <span style="color:#f92672">&amp;</span><span style="color:#f92672">[</span><span style="color:#f92672">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span><span style="color:#f92672">]</span> {
      <span style="color:#66d9ef">background</span>:<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-1</span>;
      <span style="color:#960050;background-color:#1e0010">&amp;</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">f</span><span style="color:#960050;background-color:#1e0010">t</span><span style="color:#960050;background-color:#1e0010">e</span><span style="color:#960050;background-color:#1e0010">r</span> <span style="color:#960050;background-color:#1e0010">{</span>
        <span style="color:#66d9ef">border-left-color</span>:<span style="color:#a6e22e">darken</span>(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-1</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);
      }
    <span style="color:#960050;background-color:#1e0010">}</span>

    <span style="color:#f92672">&amp;</span><span style="color:#f92672">[</span><span style="color:#f92672">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2&#34;</span><span style="color:#f92672">]</span> {
      <span style="color:#66d9ef">background</span>:<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-2</span>;

      <span style="color:#960050;background-color:#1e0010">&amp;</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">f</span><span style="color:#960050;background-color:#1e0010">t</span><span style="color:#960050;background-color:#1e0010">e</span><span style="color:#960050;background-color:#1e0010">r</span> <span style="color:#960050;background-color:#1e0010">{</span>
        <span style="color:#66d9ef">border-left-color</span>:<span style="color:#a6e22e">darken</span>(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-2</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);
      }
    <span style="color:#960050;background-color:#1e0010">}</span>


    <span style="color:#f92672">&amp;</span><span style="color:#f92672">[</span><span style="color:#f92672">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;3&#34;</span><span style="color:#f92672">]</span> {
      <span style="color:#66d9ef">background</span>:<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-3</span>;

      <span style="color:#960050;background-color:#1e0010">&amp;</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">f</span><span style="color:#960050;background-color:#1e0010">t</span><span style="color:#960050;background-color:#1e0010">e</span><span style="color:#960050;background-color:#1e0010">r</span> <span style="color:#960050;background-color:#1e0010">{</span>
        <span style="color:#66d9ef">border-left-color</span>:<span style="color:#a6e22e">darken</span>(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-3</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);
      }
    <span style="color:#960050;background-color:#1e0010">}</span>

    <span style="color:#f92672">&amp;</span><span style="color:#f92672">[</span><span style="color:#f92672">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;4&#34;</span><span style="color:#f92672">]</span> {
      <span style="color:#66d9ef">background</span>:<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-4</span>;

      <span style="color:#960050;background-color:#1e0010">&amp;</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">f</span><span style="color:#960050;background-color:#1e0010">t</span><span style="color:#960050;background-color:#1e0010">e</span><span style="color:#960050;background-color:#1e0010">r</span> <span style="color:#960050;background-color:#1e0010">{</span>
        <span style="color:#66d9ef">border-left-color</span>:<span style="color:#a6e22e">darken</span>(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-4</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);
      }
    <span style="color:#960050;background-color:#1e0010">}</span>
    <span style="color:#960050;background-color:#1e0010">}</span> <span style="color:#f92672">/</span><span style="color:#f92672">/</span> <span style="color:#f92672">tag</span>
</code></pre></div><p>A working example can be found <a href="http://codepen.io/kevingimbel/pen/Hpazh">here on CodePen</a>. Special thanks to <a href="http://getdigital.de">getDigital.de</a> for letting me use some of their nerdy Product Images! May the force be with you.</p>
<p>In case you've any questions feel free to <a href="http://twitter.com/_kevinatari">tweet me</a> or comment on the <a href="http://codepen.io/kevingimbel/pen/Hpazh">Pen</a>.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/css" term="css" label="css" />
                             
                                <category scheme="https://kevingimbel.de/tags/interface" term="interface" label="interface" />
                             
                                <category scheme="https://kevingimbel.de/tags/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                
            
        </entry>
    
</feed>
