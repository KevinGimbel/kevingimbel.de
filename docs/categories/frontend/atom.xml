<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://gohugo.io/" version="0.72.0">Hugo</generator><title type="html">frontend on KevOps</title><link href="https://kevingimbel.de/categories/frontend/" rel="alternate" type="text/html" title="HTML"/><link href="https://kevingimbel.de/categories/frontend/index.xml" rel="alternate" type="application/rss+xml" title="RSS"/><link href="https://kevingimbel.de/categories/frontend/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2020-08-06T18:30:32+02:00</updated><id>https://kevingimbel.de/categories/frontend/</id><entry><title type="html">Random Theme</title><link href="https://kevingimbel.de/blog/2020/03/random-theme/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/?utm_source=atom_feed" rel="related" type="text/html" title="Getting into Performance Measurement"/><link href="https://kevingimbel.de/blog/2020/01/safe-calc-usage-in-css/?utm_source=atom_feed" rel="related" type="text/html" title="Safe calc usage in CSS"/><link href="https://kevingimbel.de/blog/2017/11/css-custom-properties-and-a-new-look/?utm_source=atom_feed" rel="related" type="text/html" title="CSS Custom Properties and a new look"/><link href="https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Writing NodeJS cli tools"/><link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/?utm_source=atom_feed" rel="related" type="text/html" title="Endless Multi-Dimensional Navigation"/><id>https://kevingimbel.de/blog/2020/03/random-theme/</id><published>2020-03-24T00:00:00+00:00</published><updated>2020-03-24T00:00:00+00:00</updated><content type="html"><![CDATA[<p>I&rsquo;ve decided to add some randomness to this website! You may noticed that the two main colors change on every page reload - there&rsquo;s a fixed number of &ldquo;themes&rdquo; available and they change at random.</p>
<p>To accomplish this I used the following JavaScript.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">(<span style="color:#66d9ef">function</span>(window, document, <span style="color:#66d9ef">undefined</span>) {
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">theme</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">theme</span>);
<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">theme</span>) {
    <span style="color:#66d9ef">var</span> [<span style="color:#a6e22e">colorMain</span>, <span style="color:#a6e22e">colorSecondary</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">theme</span>).<span style="color:#a6e22e">colors</span>;
    document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">style</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`--color-main:</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">colorMain</span><span style="color:#e6db74">}</span><span style="color:#e6db74">;--color-secondary:</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">colorSecondary</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>;
} <span style="color:#66d9ef">else</span> {
    <span style="color:#75715e">// [dark-color, light-color]
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Color combinations taken from https://botsin.space/@accessibleColors
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">themes</span> <span style="color:#f92672">=</span> [
        [<span style="color:#e6db74">&#34;#123D3C&#34;</span>, <span style="color:#e6db74">&#34;#90F072&#34;</span>],
        [<span style="color:#e6db74">&#34;#403D58&#34;</span>, <span style="color:#e6db74">&#34;#dea584&#34;</span>],
        [<span style="color:#e6db74">&#34;#400E3B&#34;</span>, <span style="color:#e6db74">&#34;#DCC78A&#34;</span>],
        [<span style="color:#e6db74">&#34;#17098D&#34;</span>, <span style="color:#e6db74">&#34;#EADD1C&#34;</span>],
        [<span style="color:#e6db74">&#34;#233B07&#34;</span>, <span style="color:#e6db74">&#34;#FFDD6D&#34;</span>]
    ]
    <span style="color:#66d9ef">var</span> [<span style="color:#a6e22e">colorMain</span>, <span style="color:#a6e22e">colorSecondary</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">themes</span>[Math.<span style="color:#a6e22e">floor</span>(Math.<span style="color:#a6e22e">random</span>() <span style="color:#f92672">*</span> <span style="color:#a6e22e">themes</span>.<span style="color:#a6e22e">length</span>)];
    document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">style</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`--color-main:</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">colorMain</span><span style="color:#e6db74">}</span><span style="color:#e6db74">;--color-secondary:</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">colorSecondary</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>;
}
document.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;DOMContentLoaded&#39;</span>, <span style="color:#66d9ef">function</span>() {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">schema_btn</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#34;#btn_schema&#34;</span>);
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">theme</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>);
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">theme</span>) {
        <span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">textContent</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Use random color theme&#34;</span>;
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">textContent</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Keep current color theme&#34;</span>;
    }
    <span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">display</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;block&#34;</span>;
    <span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;click&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">theme</span>) {
            window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">removeItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>);
            window.<span style="color:#a6e22e">reload</span>();
        } <span style="color:#66d9ef">else</span> {
            window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>, <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>({<span style="color:#a6e22e">colors</span><span style="color:#f92672">:</span> [<span style="color:#a6e22e">colorMain</span>, <span style="color:#a6e22e">colorSecondary</span>]}));
        }
    });
});
}(window, document));
</code></pre></div><p>Quite a lot isn&rsquo;t it? Let&rsquo;s break that down.</p>
<h3 id="random-array-elements">Random array elements</h3>
<p>The theme logic is all in this JavaScript snippet. By using nested array and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">destructing assignment</a> we can get a theme consisting of a primary and secondary color. These color combinations are hand-picked from the <a href="https://botsin.space/@accessibleColors">@accessibleColors</a> bot.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">themes</span> <span style="color:#f92672">=</span> [
    [<span style="color:#e6db74">&#34;#123D3C&#34;</span>, <span style="color:#e6db74">&#34;#90F072&#34;</span>],
    [<span style="color:#e6db74">&#34;#403D58&#34;</span>, <span style="color:#e6db74">&#34;#dea584&#34;</span>],
    [<span style="color:#e6db74">&#34;#400E3B&#34;</span>, <span style="color:#e6db74">&#34;#DCC78A&#34;</span>],
    [<span style="color:#e6db74">&#34;#17098D&#34;</span>, <span style="color:#e6db74">&#34;#EADD1C&#34;</span>],
    [<span style="color:#e6db74">&#34;#233B07&#34;</span>, <span style="color:#e6db74">&#34;#FFDD6D&#34;</span>]
]
<span style="color:#66d9ef">var</span> [<span style="color:#a6e22e">colorMain</span>, <span style="color:#a6e22e">colorSecondary</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">themes</span>[Math.<span style="color:#a6e22e">floor</span>(Math.<span style="color:#a6e22e">random</span>() <span style="color:#f92672">*</span> <span style="color:#a6e22e">themes</span>.<span style="color:#a6e22e">length</span>)];
</code></pre></div><p>Having the values I then store them in a <code>localStorage</code> entry if the user clicks on &ldquo;Keep this color theme&rdquo;. To do this, we first need to get the button element and the local storage item like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">schema_btn</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#34;#btn_schema&#34;</span>);
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">theme</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>);
</code></pre></div><p>Then we can decide what text should be inside the button&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">theme</span>) {
    <span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">textContent</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Use random color theme&#34;</span>;
} <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">textContent</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Keep current color theme&#34;</span>;
}
</code></pre></div><p>&hellip; and set the button to <code>display: block</code> - by default it is hidden with <code>display: none</code> so that people without JavaScript enabled don&rsquo;t see a useless button (they also don&rsquo;t see random themes!).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">display</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;block&#34;</span>;
</code></pre></div><p>And finally, we assign a <code>click</code> event listener and check if the <code>theme</code> is set, which means the button click resets the current theme and reloads the site, or if the theme is not set and the current schema should be safed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">schema_btn</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;click&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">theme</span>) {
        window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">removeItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>);
        window.<span style="color:#a6e22e">reload</span>();
    } <span style="color:#66d9ef">else</span> {
        window.<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#34;kgde_theme&#34;</span>, <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>({<span style="color:#a6e22e">colors</span><span style="color:#f92672">:</span> [<span style="color:#a6e22e">colorMain</span>, <span style="color:#a6e22e">colorSecondary</span>]}));
    }
});
</code></pre></div><p>If you don&rsquo;t like the current colors just refresh until you find the one you like. 😁</p>
<p>If this is a horrible addition to my website and you want a permanent off button - please <a href="https://bullgit.party/@kevin" title="Contact me on Mastodon">let me know</a>!</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/tags/web" term="web" label="web"/><category scheme="https://kevingimbel.de/tags/css" term="css" label="css"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/></entry><entry><title type="html">Hugo aliases and redirects</title><link href="https://kevingimbel.de/blog/2020/01/hugo-aliases-and-redirects/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2020/01/hugo-ignore-_index.md-in-list-templates/?utm_source=atom_feed" rel="related" type="text/html" title="Hugo: ignore _index.md in list templates"/><link href="https://kevingimbel.de/blog/2020/01/hugo-compare-dates-to-flag-old-content/?utm_source=atom_feed" rel="related" type="text/html" title="Hugo: compare dates to flag old content"/><link href="https://kevingimbel.de/blog/2018/09/mastodon-embed-shortcode-for-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Mastodon Embed Shortcode for hugo"/><link href="https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/?utm_source=atom_feed" rel="related" type="text/html" title="Deploy a static site with git"/><link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Farewell Jekyll, Hello Hugo"/><id>https://kevingimbel.de/blog/2020/01/hugo-aliases-and-redirects/</id><published>2020-01-06T00:00:00+00:00</published><updated>2020-01-06T00:00:00+00:00</updated><content type="html"><![CDATA[<p>With the recent redesign and re-structuring of my website I decided to include year and month in URLs. I previously only used the post title as URL key, so a post with title <code>Hello world</code> would be available at <code>kevingimbel.de/hello-world</code>. With the new format this includes the section, year, and month, so for example <code>kevingimbel.de/blog/2020/01/hello-world</code>.</p>
<p>To prevent all old URLs from failing with a 404 I added aliases to all old posts. <a href="https://gohugo.io/content-management/urls/#aliases">The documentation on aliases</a> is pretty short and they&rsquo;re a straight-forward, powerful tool to make content available under multiple URL paths. Just add an alias list to the front-matter of the post.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
<span style="color:#66d9ef">title</span>: <span style="color:#e6db74">&#34;My awesome post&#34;</span>
<span style="color:#66d9ef">aliases</span>:
  - /my-awesome-post/
  - /<span style="color:#ae81ff">2020-1</span>/
---
</code></pre></div><p>The above would make the post available at <code>kevingimbel.de/2020-1/</code>, <code>kevingimbel.de/my-awesome-post/</code>, and <code>kevingimbel.de/blog/2020/01/my-awesome-post</code>.</p>
<p>Hugo creates a HTML page for each alias with the following content</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
&lt;<span style="color:#f92672">html</span>&gt;
  &lt;<span style="color:#f92672">head</span>&gt;
    &lt;<span style="color:#f92672">title</span>&gt;https://example.com/posts/my-intended-url&lt;/<span style="color:#f92672">title</span>&gt;
    &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;canonical&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://example.com/posts/my-intended-url&#34;</span>/&gt;
    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;robots&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;noindex&#34;</span>&gt;
    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">http-equiv</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content-type&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/html; charset=utf-8&#34;</span>/&gt;
    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">http-equiv</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;refresh&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0; url=https://example.com/posts/my-intended-url&#34;</span>/&gt;
  &lt;/<span style="color:#f92672">head</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>The line <code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=https://example.com/posts/my-intended-url&quot;/&gt;</code> refreshes the page after 0 seconds (immediately) and redirects to the new page at <code>https://example.com/posts/my-intended-url</code>.</p>
<p>With this little bit of extra work all old URLs should work and just redirect to the new pages.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/hugo" term="hugo" label="hugo"/><category scheme="https://kevingimbel.de/tags/static_site" term="static_site" label="static_site"/><category scheme="https://kevingimbel.de/tags/seo" term="seo" label="seo"/></entry><entry><title type="html">Hugo: ignore _index.md in list templates</title><link href="https://kevingimbel.de/blog/2020/01/hugo-ignore-_index.md-in-list-templates/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2020/01/hugo-compare-dates-to-flag-old-content/?utm_source=atom_feed" rel="related" type="text/html" title="Hugo: compare dates to flag old content"/><link href="https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/?utm_source=atom_feed" rel="related" type="text/html" title="Bullgit loves Jekyll"/><link href="https://kevingimbel.de/blog/2018/09/mastodon-embed-shortcode-for-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Mastodon Embed Shortcode for hugo"/><link href="https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/?utm_source=atom_feed" rel="related" type="text/html" title="Deploy a static site with git"/><link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Farewell Jekyll, Hello Hugo"/><id>https://kevingimbel.de/blog/2020/01/hugo-ignore-_index.md-in-list-templates/</id><published>2020-01-03T00:00:00+00:00</published><updated>2020-01-03T00:00:00+00:00</updated><content type="html"><![CDATA[<p>While creating my new website I also added more sections, namely a <a href="/blog/">blog</a>, <a href="/photography/">photography</a>, and <a href="/art/">art</a> section. All of these use list templates and render &ldquo;article&rdquo;-like content previews. I wanted to add some content to these lists and Hugo has a special file named <code>_index.md</code> for that. This file can be used to create index pages for lists.</p>
<p>When I did that I somehow also included the index files in the post listings which was not what I wanted, so I added a if statement to my <code>article-preview.html</code> template that is used to render article previews.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{ if ne .File.LogicalName &#34;_index.md&#34; }}
&lt;<span style="color:#f92672">article</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;article article--in-list&#34;</span> <span style="color:#a6e22e">aria-labelledby</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;article-heading-{{ .File.UniqueID }}&#34;</span>&gt;
    [...]
&lt;/<span style="color:#f92672">article</span>&gt;
{{ end }}
</code></pre></div><p><code>{{ if ne .File.LogicalName &quot;_index.md&quot; }}</code> checks if the file name is not <code>_index.md</code> - this will ignore all <code>_index.md</code> files from being rendered with the <code>article-preview.html</code> template.</p>
<p>It does the job but feels wrong and hacky, so if you know a better solution, please let me know on <a href="https://github.com/kevingimbel/kevingimbel.de" title="Report issue on GitHub">GitHub</a> or <a href="https://bullgit.party/@kevin" title="Contact me on Mastodon">Mastodon</a>.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/tags/hugo" term="hugo" label="hugo"/><category scheme="https://kevingimbel.de/tags/cms" term="cms" label="cms"/><category scheme="https://kevingimbel.de/tags/static_website" term="static_website" label="static_website"/></entry><entry><title type="html">Hugo: compare dates to flag old content</title><link href="https://kevingimbel.de/blog/2020/01/hugo-compare-dates-to-flag-old-content/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/?utm_source=atom_feed" rel="related" type="text/html" title="Bullgit loves Jekyll"/><link href="https://kevingimbel.de/blog/2018/09/mastodon-embed-shortcode-for-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Mastodon Embed Shortcode for hugo"/><link href="https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/?utm_source=atom_feed" rel="related" type="text/html" title="Deploy a static site with git"/><link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Farewell Jekyll, Hello Hugo"/><link href="https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/?utm_source=atom_feed" rel="related" type="text/html" title="Ghost in the shell"/><id>https://kevingimbel.de/blog/2020/01/hugo-compare-dates-to-flag-old-content/</id><published>2020-01-02T00:00:00+00:00</published><updated>2020-01-02T00:00:00+00:00</updated><content type="html"><![CDATA[<p>With the recent redesign of my website I also wanted to add a note to old articles. The IT world is changing fast and information can quickly be outdated, so I decided to add an automatically generated note to every post that is older than 4 years. Using the Hugo <a href="https://gohugo.io/functions/math/">Math</a> function and <a href="https://gohugo.io/variables/page/#page-variables">Date</a> values it can be accomplished in automated-enough fashion.</p>
<h3 id="partial">Partial</h3>
<p>First I created a new partial named <code>single-header.html</code> and added it to all my <code>single.html</code> templates. The file contains the following code which I will explain step by step.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{ $now := int (now.Format &#34;2006&#34;) }}
{{ $article_age := sub $now (int (.Date.Format &#34;2006&#34;)) }}

{{ if gt $article_age 4 }}
&lt;<span style="color:#f92672">section</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;age-note&#34;</span>&gt;
    &lt;<span style="color:#f92672">h2</span>&gt;ATTENTION!&lt;/<span style="color:#f92672">h2</span>&gt;
    &lt;<span style="color:#f92672">p</span>&gt;This article is over 4 years old, it may be outdated!&lt;/<span style="color:#f92672">p</span>&gt;
&lt;/<span style="color:#f92672">section</span>&gt;
{{ end }}
</code></pre></div><p>The magic all happens in the first 2 lines. First the &ldquo;now&rdquo; time is retrieved, this is the build time - not the current time when the page is loaded in the browser. Then we calculate the different using the Hugo built-in  <code>sub</code> function, giving the two dates in year format (<code>2020</code>, <code>2015</code>, &hellip;) as arguments.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$article_age :<span style="color:#f92672">=</span> sub $now <span style="color:#f92672">(</span>int <span style="color:#f92672">(</span>.Date.Format <span style="color:#e6db74">&#34;2006&#34;</span><span style="color:#f92672">))</span>
<span style="color:#75715e"># For an aricle written in 2013 the code looks like</span>
<span style="color:#75715e"># $article_age = sub 2020 2013</span>
</code></pre></div><p>After filling in all variables and doing the subtraction, the <code>$article_age</code> variable contains an integer, like <code>7</code> or <code>3</code>. The next line of code checks if the number <code>$article_age</code> is greater than 4, which means the article is older than 4 years. If this is true, the note is displayed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{ if gt $article_age 4 }}
    $article_age is greater than 4
{{ end }}
</code></pre></div><p>Because we are doing a <code>gt</code> (greater than) comparison only articles that are older than 4 years (5 and more) will be flagged.</p>
<h2 id="see-it-in-action">See it in action</h2>
<p>A live example can be seen on my page, for example in the <a href="/blog/2013/08/hello-world/">oldest post &ldquo;Hello world&rdquo;</a> or in any post from <a href="http://localhost:1313/blog/#2015">2015 and before</a>.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/tags/hugo" term="hugo" label="hugo"/><category scheme="https://kevingimbel.de/tags/cms" term="cms" label="cms"/><category scheme="https://kevingimbel.de/tags/static_website" term="static_website" label="static_website"/></entry><entry><title type="html">Safe calc usage in CSS</title><link href="https://kevingimbel.de/blog/2020/01/safe-calc-usage-in-css/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2017/11/css-custom-properties-and-a-new-look/?utm_source=atom_feed" rel="related" type="text/html" title="CSS Custom Properties and a new look"/><link href="https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/?utm_source=atom_feed" rel="related" type="text/html" title="Getting into Performance Measurement"/><link href="https://kevingimbel.de/blog/2014/07/conditional-css/?utm_source=atom_feed" rel="related" type="text/html" title="Conditional CSS"/><link href="https://kevingimbel.de/blog/2014/01/web-development-in-2014/?utm_source=atom_feed" rel="related" type="text/html" title="Web Development in 2014"/><link href="https://kevingimbel.de/blog/2013/11/pseudo-product-flags/?utm_source=atom_feed" rel="related" type="text/html" title="Pseudo Product Flags"/><id>https://kevingimbel.de/blog/2020/01/safe-calc-usage-in-css/</id><published>2020-01-01T00:00:00+00:00</published><updated>2020-01-02T00:00:00+00:00</updated><content type="html"><![CDATA[<p><code>calc</code> is a great CSS function to calculate values, e.g. margins or widths. What makes it especially great is that it can combine different values, for example <code>calc(100% - 4rem - 1px)</code> is valid and works in modern browsers - in simpler words: Calc works with different units like <code>em</code>, <code>%</code>, <code>px</code>, etc.</p>
<p>The problem with calc is that if it doesn&rsquo;t work you may get a unexpected result. Take the following code for example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">author</span> {
    <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">4</span><span style="color:#66d9ef">rem</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">rem</span>;
    <span style="color:#66d9ef">width</span>: calc(<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span>);
    <span style="color:#66d9ef">margin-left</span>: <span style="color:#ae81ff">-2</span><span style="color:#66d9ef">rem</span>;
    <span style="color:#66d9ef">margin-top</span>: <span style="color:#ae81ff">2</span><span style="color:#66d9ef">rem</span>;
}
</code></pre></div><p>This code calculates the width of the element by taking into account the paddings and borders, then offsets the element to the left (<code>margin-left: -2rem</code>) so it appears to be full-width. If calc does not work, the element will just be moved to the left and appears off-center - it looks wrong and unexpected.</p>
<p>A more robust version is to also calculate the offset. This version is shown below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">author</span> {
    <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">4</span><span style="color:#66d9ef">rem</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">rem</span>;
    <span style="color:#66d9ef">width</span>: calc(<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span>);
    <span style="color:#66d9ef">margin-left</span>: calc(<span style="color:#ae81ff">0</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span>);
    <span style="color:#66d9ef">margin-top</span>: <span style="color:#ae81ff">2</span><span style="color:#66d9ef">rem</span>;
}
</code></pre></div><p>If calc does not work, both the <code>width</code> and <code>margin-left</code> are ignored and the box appears just as any other content would, without any offset to the left. The interesting part is the second <code>calc</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">offset-example</span>  {
    <span style="color:#66d9ef">margin-left</span>: calc(<span style="color:#ae81ff">0</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span>);
}
</code></pre></div><p>By using <code>0rem - 2rem</code> we can create a <code>-2rem</code> offset to the left. The <code>1px</code> is the border around the parent element which appears on both sides, so we add that to our calculation to stay within the border - otherwise it would look wrong again.</p>
<h2 id="update">Update</h2>
<p>Due to changes during development, the changes described here are not available on my website.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/tags/css" term="css" label="css"/><category scheme="https://kevingimbel.de/tags/calc" term="calc" label="calc"/><category scheme="https://kevingimbel.de/tags/fallback" term="fallback" label="fallback"/></entry><entry><title type="html">Mastodon Embed Shortcode for hugo</title><link href="https://kevingimbel.de/blog/2018/09/mastodon-embed-shortcode-for-hugo/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/?utm_source=atom_feed" rel="related" type="text/html" title="Deploy a static site with git"/><link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Farewell Jekyll, Hello Hugo"/><id>https://kevingimbel.de/blog/2018/09/mastodon-embed-shortcode-for-hugo/</id><published>2018-09-12T00:00:00+00:00</published><updated>2018-09-12T00:00:00+00:00</updated><content type="html"><![CDATA[<p>You may know that <a href="https://github.com/kevingimbel/hugo-shortcodes">I made some shortcodes for Hugo</a>, the static site generator I am using to create this website. So far I made a shortcode for <a href="https://caniuse.com">caniuse.com</a> and <a href="https://codepen.io">codepen.io</a> which allow to embed CodePen and &ldquo;Can I Use&rdquo; embeds easily with Hugos build-in Shortcode system.</p>
<p>Today I made another one which allows embeds from Mastodon, the decentralized Twitter-like social network. An example embed is shown below.</p>






<iframe src= "https://mastodon.social/@kevingimbel/100700713283716694/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="600" height="333"></iframe>

<p>The Source Code can be found <a href="https://github.com/kevingimbel/hugo-shortcodes/tree/master/mastodon">on GitHub.com</a></p>
<h2 id="configuration">Configuration</h2>
<p>The shortcode is fairly simple and requires only one attribute: The link to a single toot, e.g. <a href="https://mastodon.social/@kevingimbel/100700713283716694">https://mastodon.social/@kevingimbel/100700713283716694</a>.</p>
<pre><code>{{&lt; mastodon status=&quot;https://mastodon.social/@kevingimbel/100700713283716694&quot; &gt;}}
</code></pre><p>Additional parameters:</p>
<pre><code># All parameters
{{&lt; mastodon status=&quot;https://mastodon.social/@kevingimbel/100700713283716694&quot; width=&quot;1000&quot; height=&quot;500&quot; &gt;}}
</code></pre><p>Below is a short description for each parameter</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>status</code></td>
<td>The link to the status</td>
</tr>
<tr>
<td><code>width</code></td>
<td>The width of the iframe</td>
</tr>
<tr>
<td><code>height</code></td>
<td>The height of the iframe</td>
</tr>
</tbody>
</table>
<h2 id="examples">Examples</h2>
<p>





<iframe src= "https://mastodon.social/@rootsworks/100666238685414786/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="400" height="333"></iframe>







<iframe src= "https://mastodon.social/@prashere/539624/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="300" height="333"></iframe>







<iframe src= "https://octodon.social/@spacekookie/100680807257148198/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="800" height="333"></iframe>
</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/shortcode" term="shortcode" label="shortcode"/><category scheme="https://kevingimbel.de/tags/hugo" term="hugo" label="hugo"/><category scheme="https://kevingimbel.de/tags/mastodon" term="mastodon" label="mastodon"/></entry><entry><title type="html">CSS Custom Properties and a new look</title><link href="https://kevingimbel.de/blog/2017/11/css-custom-properties-and-a-new-look/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2017/04/2017-week-10-11-12-13/?utm_source=atom_feed" rel="related" type="text/html" title="2017, week 10, 11, 12, 13"/><link href="https://kevingimbel.de/blog/2017/03/2017-week-8-and-9/?utm_source=atom_feed" rel="related" type="text/html" title="2017, week 8 and 9"/><link href="https://kevingimbel.de/blog/2017/02/2017-week-seven/?utm_source=atom_feed" rel="related" type="text/html" title="2017, week seven"/><link href="https://kevingimbel.de/blog/2017/02/2017-week-five/?utm_source=atom_feed" rel="related" type="text/html" title="2017, week five"/><link href="https://kevingimbel.de/blog/2017/01/2017-week-four/?utm_source=atom_feed" rel="related" type="text/html" title="2017, week four"/><id>https://kevingimbel.de/blog/2017/11/css-custom-properties-and-a-new-look/</id><published>2017-11-26T10:56:13+01:00</published><updated>2017-11-26T10:56:13+01:00</updated><content type="html"><![CDATA[<p>You may have noticed that some things changed on this website. I completly re-wrote the Front-End and created a new theme with a focus on accessibility and well-structured content. On the web, Accessibility is enabled by default; All you need is a good HTML structure and your website is almost ready to go! A second important part of accessibility is color and contrast as well as font sizing. I decided to let users choose their own color scheme, font-size, and dark or light mode - all done with CSS Custom Properties (<abbr title="Also known as">aka</abbr>
 CSS variables).</p>
<p>CSS variables are a <a href="https://www.w3.org/TR/css-variables-1/" title="Read the CSS variable specs">native CSS feature</a> which enables us as developers to re-use colors, font-sizes, and other properties throught our stylesheets. You may think <em>&ldquo;But wait! Sass, Less, and Stylus had variables for years!&quot;</em> and you&rsquo;re right - the pre processors, which generate a CSS file, have had variables for years. What they did not have, however, is the abbility to modify and change these variables on the fly after the CSS had been generated. With CSS Custom Properties and some JavaScript we can modify the variables at runtime and the browser will re-render all pieces of the page which are using the variable - and that&rsquo;s exactly what I am doing with the settings on this website to change the accent colors and font sizing.</p>
<p>Below I will explain step by step how CSS variables look, work, and how we can use them to alter the look of a website - even persistent without any backend code!</p>
<h2 id="css-variables">CSS variables</h2>
<h3 id="browser-support">Browser Support</h3>
<p>Let&rsquo;s jump directly into browser support, which is looking pretty good in my opinion!</p>




<p class="ciu_embed" data-feature="css-variables" data-periods="future_1,current,past_1,past_2" data-accessible-colours="">
    <picture>
        <source type="image/webp" srcset="https://caniuse.bitsofco.de/image/css-variables.webp">
        <source type="image/png" srcset="https://caniuse.bitsofco.de/image/css-variables.png">
        <img src="https://caniuse.bitsofco.de/image/css-variables.jpg" alt="Data on support for the css-variables feature across the major browsers from caniuse.com">
    </picture>
</p>
<p><code>77.90%</code> (as of November 26. 2017) is not perfect but certainly good enough for me and my private website. I&rsquo;d probably not rely on CSS Custom Properties in client projects yet tho.</p>
<h3 id="syntax">Syntax</h3>
<p>A CSS variable is a word preceded by two dashes (<code>--</code>), which looks like the following examples.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">--color</span><span style="color:#f92672">:</span> #ddd<span style="color:#f92672">;</span>
<span style="color:#f92672">--base-font-size</span><span style="color:#f92672">:</span> <span style="color:#f92672">12px</span><span style="color:#f92672">;</span>
<span style="color:#f92672">--breakpoint-large</span><span style="color:#f92672">:</span> <span style="color:#f92672">1200px</span><span style="color:#f92672">;</span>
</code></pre></div><p>Just like any CSS property they &ldquo;cascade down&rdquo;. A variable defined at the top of the document on the <code>:root</code> or <code>html</code> selector will be defined everywhere in the document. To use a CSS variable we need to get it somehow. It&rsquo;s not enough to reference it, for example this does not work.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">//</span> <span style="color:#f92672">Does</span> <span style="color:#f92672">not</span> <span style="color:#f92672">work</span><span style="color:#f92672">!</span>
.<span style="color:#a6e22e">my-selector</span> {
  <span style="color:#66d9ef">color</span>: <span style="color:#f92672">--</span><span style="color:#66d9ef">color</span>;
}
</code></pre></div><p>With CSS variables we need to retrieve the value by calling a <code>var</code> function. This function also takes a fallback parameter in case the variable is not set.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">//</span> <span style="color:#f92672">This</span> <span style="color:#f92672">does</span> <span style="color:#f92672">work</span>
.<span style="color:#a6e22e">my-selector</span> {
  <span style="color:#66d9ef">color</span>: <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span><span style="color:#66d9ef">color</span>, <span style="color:#ae81ff">#333</span>)
}
</code></pre></div><p><code>.my-selector</code> will have a color value equal to whatever is stored inside the <code>--color</code> variable or <code>#333</code> if it is not set.</p>
<p>A variable can later be changed to be &ldquo;locally scoped&rdquo;. For this example we define a custom property named <code>--color</code> and set its value to <code>red</code>. We say all h1 elements should use the <code>--color</code> variable for their font-color. Then we create a CSS class named <code>local-scope</code> and inside we change the <code>--color</code> to <code>blue</code>. A <code>h1</code> element inside the <code>local-scope</code> will use the re-defined color value.</p>








<p data-height="256" data-theme-id="dark" data-slug-hash="78d261a36ecded2b75d5260cb7056fce" data-default-tab="html,result" data-user="kevingimbel" data-embed-version="2" data-pen-title="CSS Variables - Cascading &amp; local scope" data-preview="false" data-editable="true" class="codepen">
    See the Pen <a href="https://codepen.io/kevingimbel/pen/78d261a36ecded2b75d5260cb7056fce/">CSS Variables - Cascading &amp; local scope</a> on <a href="https://codepen.io">CodePen</a>.
</p>

<p>We do not need to change the <code>h1</code> selector because <code>h1</code> will always have a font-color equal to <code>--color</code> - we only need to change the variable inside the local scope. The third <code>h1</code> element is outside the local scope and so it takes the  original <code>--color</code> value (red).</p>
<p>This type of inheritance is a powerful tool CSS has given us (&ldquo;us&rdquo; being developers). At runtime, when the website is loaded and all CSS is parsed and the website has been painted to the screen, we can still change these properties on-the-fly with JavaScript and the browser will simply re-render the parts that need changing. Of course, you can already change CSS on the go with JavaScript. You could select for example a bunch of elements by class name and then change their color to be <code>blue</code> instead of red. With CSS Custom Properties you don&rsquo;t need to do this! All we need to do is change the variable at a higher level, for example on the <code>body</code> element as the following example illustrates.</p>








<p data-height="256" data-theme-id="dark" data-slug-hash="5245628703a6a223215cf5a30cf8294d" data-default-tab="html,result" data-user="kevingimbel" data-embed-version="2" data-pen-title="CSS Variables - Changing with JS" data-preview="false" data-editable="true" class="codepen">
    See the Pen <a href="https://codepen.io/kevingimbel/pen/5245628703a6a223215cf5a30cf8294d/">CSS Variables - Changing with JS</a> on <a href="https://codepen.io">CodePen</a>.
</p>

<p>Click on the <code>Change color</code> button above and all the non-scoped <code>h1</code> elements will turn green. All we need for this to work is set an inline style on the <code>body</code> element.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">style</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;--color: green;&#34;</span>;
</code></pre></div><p>I use this technique to change the secondary and primary colors of my website from the settings menu. <a href="https://github.com/kevingimbel/kevingimbel.com/blob/9f11b96f428f01b1ae14f8673c2e4f48e8ee3b21/themes/next/static/js/a11y.settings.js#L83-L84" title="View source code on GitHub.com">These two lines</a> set the CSS variables <code>--color-accent-primary</code> and <code>--color-accent-secondary</code> which by default are dark blue and yellow.</p>
<h3 id="recap">Recap</h3>
<p>So let&rsquo;s recap this real quick:</p>
<ul>
<li>CSS variables (also called CSS Custom Properties) are a native CSS feature</li>
<li>They cascade &ldquo;down&rdquo; in the CSS, just like any other property (<code>font-size</code>, <code>color</code>, etc.)</li>
<li>They can be locally scoped, that is changed for a certain element and it&rsquo;s children</li>
<li>They can be changed with JavaScript at runtime and the browser will re-render every element which uses them</li>
</ul>
<p>At this point it becomes clear why they are an advantage over pre-processor variables. We have more control of changing them and they present us with a powerful new way to implement multiple layouts for our websites.</p>
<h2 id="implementing-persistent-settings">Implementing persistent settings</h2>
<p>As I mentioned before for my website (this very blog you read right now), the Settings are persistent. If you change the font size or colors and navigate to a new page you&rsquo;ll still have your custom styles - not my default styles. I do not use any backend software like PHP, Go, or Ruby; Instead this website is a static website, which means all HTML pages are rendered before and then deployed to <a href="https://www.netlify.com/">Netlify</a>. So there is no backend which can save your settings and then send them back to your browser once you navigate to a new site.</p>
<p>The saving part is done on the client side, inside your browser. A browser feature called <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">Local Storage</a>. Local Storage is a text-based, key-value storage which developers can use to store (small) text based values inside the browser. This allows us to have some sort of persitent storage on the client side without the need for a backend. For my use case (storing settings) this is perfect.</p>
<p>When you open the settings menu and click &ldquo;Save&rdquo; I grab all the values with JavaScript (<a href="https://github.com/kevingimbel/kevingimbel.com/blob/9f11b96f428f01b1ae14f8673c2e4f48e8ee3b21/themes/next/static/js/a11y.settings.js#L123-L138">See the code on GitHub</a>)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">settingsForm</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;submit&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
  <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">preventDefault</span>();
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">fd</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">FormData</span>(<span style="color:#a6e22e">settingsForm</span>).<span style="color:#a6e22e">entries</span>();

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cssRule</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">fd</span>) {
    <span style="color:#a6e22e">lsSettings</span>[<span style="color:#a6e22e">cssRule</span>[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">cssRule</span>[<span style="color:#ae81ff">1</span>];
  }

  <span style="color:#a6e22e">setStylesAndCreateForgroundColors</span>(<span style="color:#a6e22e">lsSettings</span>);
  <span style="color:#a6e22e">populateSettingsFromArray</span>(<span style="color:#a6e22e">lsSettings</span>);

  <span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#39;a11y_settings&#39;</span>, <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">lsSettings</span>));
  document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">remove</span>(<span style="color:#e6db74">&#39;page-settings--open&#39;</span>);
  document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">setAttribute</span>(<span style="color:#e6db74">&#39;tabindex&#39;</span>, <span style="color:#e6db74">&#34;0&#34;</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
});
</code></pre></div><p>There&rsquo;s quite a lot going on. The important bit for now is <code>localStorage.setItem('a11y_settings', JSON.stringify(lsSettings));</code>. This line sets a new item in the local storage named <code>a11y_settings</code>, scoped to my website (kevingimbel.com). This JSON object holds all relevant information for your custom settings and looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;--body-invert&#34;</span>: <span style="color:#ae81ff">0</span>,
  <span style="color:#f92672">&#34;--color-accent-primary&#34;</span>: <span style="color:#e6db74">&#34;#3e934b&#34;</span>,
  <span style="color:#f92672">&#34;--color-accent-secondary&#34;</span>: <span style="color:#e6db74">&#34;#70cfff&#34;</span>
}
</code></pre></div><p>The key of the JSON object is always the CSS variable name, the value is the CSS variable value. With these settings we get the following result.</p>

<figure >
  

    <img src="/images/posts/2017/css-custom-properties/kevingimbel_com-with-custom-settings.png"
      alt="The look of kevingimbel.com with the above settings"
       />
    
  
  <figcaption>
    <p>
      The look of kevingimbel.com with the above settings
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>Because we use inline styles to change the CSS variables the HTML element will have the following styles.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;--body-invert:0; --color-accent-primary:#3e934b; --color-accent-secondary:#70cfff;&#34;</span>&gt;
</code></pre></div><p>Once the JSON is saved to local storage, I load in on page load and apply it immediately - which happens to be really fast so it seems the styles are not even applyed again! The piece of JavaScript to load the custom styles is placed above all other content, at the beginning of the <code>&lt;body&gt;</code>. To not impact performance too much I minified it and it looks like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span><span style="color:#f92672">&gt;</span>(<span style="color:#66d9ef">function</span>(){<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;a11y_settings&#34;</span>)){<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">a</span><span style="color:#f92672">=</span><span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;a11y_settings&#34;</span>));<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">o</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">a</span>){document.<span style="color:#a6e22e">documentElement</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">setProperty</span>(<span style="color:#a6e22e">o</span>,<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">o</span>]);<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">o</span><span style="color:#f92672">==</span><span style="color:#e6db74">&#34;--body-invert&#34;</span><span style="color:#f92672">&amp;&amp;</span><span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">o</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;100&#34;</span>){document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">add</span>(<span style="color:#e6db74">&#34;dark-mode&#34;</span>)}}<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">a11y</span>){<span style="color:#a6e22e">a11y</span>.<span style="color:#a6e22e">o</span><span style="color:#f92672">=</span><span style="color:#a6e22e">a</span>}}})();<span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/script&gt;</span>
</code></pre></div><p>Unminified the code reads as follows</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">(<span style="color:#66d9ef">function</span>(){
  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;a11y_settings&#34;</span>)) {

    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">styles</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#34;a11y_settings&#34;</span>));

    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">rule</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">styles</span>) {
      document.<span style="color:#a6e22e">documentElement</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">setProperty</span>(<span style="color:#a6e22e">rule</span>,<span style="color:#a6e22e">styles</span>[<span style="color:#a6e22e">rule</span>]);
      <span style="color:#75715e">// Check if we &#34;dark mode&#34; is enabled (more below!)
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">rule</span><span style="color:#f92672">==</span><span style="color:#e6db74">&#34;--body-invert&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">styles</span>[<span style="color:#a6e22e">rule</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;100&#34;</span>){
        document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">add</span>(<span style="color:#e6db74">&#34;dark-mode&#34;</span>)
      }
    }
    <span style="color:#75715e">// if a11y is defined, save the rules in the object
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">a11y</span>){
      <span style="color:#a6e22e">a11y</span>.<span style="color:#a6e22e">styles</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">styles</span>
    }
  }
})();
</code></pre></div><p>What happens here is the following:</p>
<ul>
<li>We check if there are custom setting (<code>if( localStorage.getItem(&quot;a11y_settings&quot;) )</code>)</li>
<li>Then we read it in, it&rsquo;s a JSON string so we need to parse it</li>
<li>Next we loop through all properties of the JSON, which are key-value pairs like <code>{ &quot;--color&quot;: &quot;#ddd&quot; }</code></li>
<li>Each key-value pair is set as inline style on the documentElement (the <code>html</code> element)</li>
</ul>
<p>For the <code>--body-invert</code> value we take an extra step and set a CSS class on the body. This is used for the dark mode which requires the extra class to work properly. The dark-mode is a CSS filter. What I do is invert the body with a CSS Filter so the default light theme becomes a dark theme. The CodePen below shows this in action. By adding the <code>dark-mode</code> class to the second block we invert all colors, which results in the block being dark.</p>








<p data-height="256" data-theme-id="dark" data-slug-hash="604946ab15c48299b1f7b54b7a758cfb" data-default-tab="html,result" data-user="kevingimbel" data-embed-version="2" data-pen-title="CSS Filter Invert" data-preview="false" data-editable="true" class="codepen">
    See the Pen <a href="https://codepen.io/kevingimbel/pen/604946ab15c48299b1f7b54b7a758cfb/">CSS Filter Invert</a> on <a href="https://codepen.io">CodePen</a>.
</p>

<p>That&rsquo;s exactly what happens when you click &ldquo;Dark mode&rdquo; in the settings menu above. So why do we need the class <code>dark-mode</code>? Because with <code>filter: invert(100%)</code> everything is inverted including images and videos - which we do not want. These elements should not be inverted so we need to apply a <code>filter: invert(100%)</code> to them when dark mode is active, which is done with the following CSS snipped.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> <span style="color:#f92672">img</span><span style="color:#f92672">,</span>
<span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> <span style="color:#f92672">video</span><span style="color:#f92672">,</span>
<span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> <span style="color:#f92672">iframe</span> {
  <span style="color:#66d9ef">filter</span>: invert(<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>) <span style="color:#75715e">!important</span>;
}
</code></pre></div><p>This basically means we apply the filter two times, which results in resetting it. The images get inverted from the first rule, then inverted again to normal color.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">//</span> <span style="color:#f92672">Invert</span> <span style="color:#f92672">everything</span>
<span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> {
  <span style="color:#66d9ef">filter</span>: invert(<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>);
}
<span style="color:#f92672">//</span> <span style="color:#f92672">Invert</span> <span style="color:#f92672">img</span><span style="color:#f92672">,</span> <span style="color:#f92672">video</span><span style="color:#f92672">,</span> <span style="color:#f92672">and</span> <span style="color:#f92672">iframe</span> <span style="color:#f92672">again</span><span style="color:#f92672">,</span> <span style="color:#f92672">resulting</span> <span style="color:#f92672">in</span> <span style="color:#f92672">resetting</span> <span style="color:#f92672">the</span> <span style="color:#f92672">original</span> <span style="color:#f92672">invert</span><span style="color:#f92672">.</span>
<span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> <span style="color:#f92672">img</span><span style="color:#f92672">,</span>
<span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> <span style="color:#f92672">video</span><span style="color:#f92672">,</span>
<span style="color:#f92672">body</span>.<span style="color:#a6e22e">dark-mode</span> <span style="color:#f92672">iframe</span> {
  <span style="color:#66d9ef">filter</span>: invert(<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>) <span style="color:#75715e">!important</span>;
}
</code></pre></div><p>And that&rsquo;s it for CSS variables and the redesign. You get to choose how my blog looks, what font-size to use and if a dark or light theme is best for you. I might add more options to the settings in the future, but for now I&rsquo;m happy with the result.</p>
<p>Got any feedback? Want to tell me how much the news design sucks? Love it? Hit me up on <a href="https://twitter.com/_kevinatari" title="Find me on twitter">Twitter @_kevinatari</a></p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/redesign" term="redesign" label="redesign"/><category scheme="https://kevingimbel.de/tags/css" term="css" label="css"/><category scheme="https://kevingimbel.de/tags/personal" term="personal" label="personal"/><category scheme="https://kevingimbel.de/tags/modernization" term="modernization" label="modernization"/><category scheme="https://kevingimbel.de/tags/accessibility" term="accessibility" label="accessibility"/></entry><entry><title type="html">ReactJS - Hello World!</title><link href="https://kevingimbel.de/blog/2015/05/reactjs-hello-world/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://kevingimbel.de/blog/2015/05/reactjs-hello-world/</id><published>2015-05-07T00:00:00+00:00</published><updated>2015-05-07T00:00:00+00:00</updated><content type="html"><![CDATA[<p>This article is the first in a series about <a href="http://facebook.github.io/react/">ReactJS</a>, a JavaScript library for building user interfaces. It is actively developed at Facebook and Instagram, while Instagram uses React to build their web app. At Facebook, however, React plays a role in the &ldquo;background&rdquo;, featuring administrative screens such as the Ads Managment.</p>
<p>React itself says one very important and true thing about itself:</p>
<blockquote>
<p>Lots of people use React as the V in MVC. Since React makes no assumptions about the rest of your technology stack, it&rsquo;s easy to try it out on a small feature in an existing project.</p>
</blockquote>
<p>Instead of frameworks such as <a href="https://angularjs.org/">Angular</a> or <a href="http://emberjs.com/">Ember</a>, React only covers the visual part and state of an UI. It won&rsquo;t help you structure your applicationit will not do anything other than render DOM parts and control their state. At this, however, React is amazingly good!</p>
<h3 id="jsx-like-syntax">JSX-like syntax</h3>
<p>React uses a XML like syntax called JSX. JSX seems horrible at first, at least to me, but becomes really powerful once you&rsquo;re used to it. Here is an example of two <code>div</code>s, one written in React JSX syntax and one in pure JavaScript. We assume the variable <code>dynamicContent</code> will hold some content that is generated before.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">// React JSX DIV
var myJSXDiv = &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">className</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;lorem&#34;</span>&gt;{dynamicContent}&lt;/<span style="color:#f92672">div</span>&gt;;
// pure JS DIV
var myJSDiv = &#39;&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;lorem&#34;</span>&gt;&#39;+ dynamicContent +&#39;&lt;/<span style="color:#f92672">div</span>&gt;&#39;;
</code></pre></div><p>Weird isn&rsquo;t it? Writing junks of HTML without quotes in a JavaScript file looks totally wrong at first, however React is being compiled to pure JavaScript before it will hit your servers. Therefore, it really only is a way of easy writing - when you create a few DOM Elements in React you&rsquo;ll soon start to love the JSX-like syntax.</p>
<h3 id="hello-world">Hello World!</h3>
<p>As in every framework and language, let&rsquo;s start by outputting a <code>Hello World!</code> string. To archive this we will do the following:</p>
<ul>
<li>Create a new React Class or Component</li>
<li>Invoke a <code>render()</code> function within that Component</li>
<li>Render the Component to the DOM</li>
</ul>
<h4 id="reactcreateclass">React.createClass({})</h4>
<p>Every Class is created with the <code>React.createClass</code> function that is passed an Object and at least a <code>render</code> function (A Class is basically a UI Component, therefor I&rsquo;ll call it Component from now on). The <code>render</code> function is used to return HTML that will be rendered to the DOM later. Every render function needs a <code>return</code> with some HTML. Below is the React Script to return a <code>h1</code> holding the String &ldquo;Hello World!&rdquo;.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">HelloWorld</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">createClass</span>({
  <span style="color:#a6e22e">render</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>() {
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">h1</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">Hello</span> <span style="color:#a6e22e">World</span><span style="color:#f92672">!&lt;</span><span style="color:#960050;background-color:#1e0010">/h1&gt;</span>
  }
})
</code></pre></div><p>We can invoke out new React Component by calling the <code>React.render()</code> function. This function takes two parameters: first the Component to render and then the DOM Node where it should be rendered. The Component name in this case is the variable <code>HelloWorld</code> that&rsquo;ll be passed just like a HTML element: <code>&lt;HelloWorld /&gt;</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// Renders the HelloWorld Component into the Body.
</span><span style="color:#75715e"></span><span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">render</span>(<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">HelloWorld</span> <span style="color:#f92672">/&gt;</span>, document.<span style="color:#a6e22e">body</span>);
</code></pre></div><p>And here&rsquo;s a working <a href="http://codepen.io">Pen</a> with additional comments.</p>
<!-- raw HTML omitted -->
<p>So far, we wrote our first ever React Component and rendered it into the DOM. Anyway, rendering static data is not so cool is it? Using a Framework to render junks of DOM Elements and static Markup isn&rsquo;t fun either. So next, we&rsquo;ll see how we can re-use a Component, pass data to it and embed one Component into another Component so it is repeated based on passed data - fun!</p>
<h3 id="hello-friend">Hello {friend}!</h3>
<p>React has its own template-engine-thingy. Instead of typing static strings you can pass data and use it in the return of the Render Function (or in any other function inside the component for that matter). All passed data is accessible via <code>this.props</code> and passed like <code>&lt;HelloWorld name=&quot;Kevin&quot; /&gt;</code>, which would than be accessed like <code>this.props.name</code>. Here&rsquo;s an example of this in action.</p>
<!-- raw HTML omitted -->
<p>However, to re-use the <code>HelloWorld</code> component we need to create another Component and use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"><code>Array.map</code></a> function to go over an Array of names.</p>
<p>So what we do now is the following:</p>
<ul>
<li>We extend the <code>&lt;HelloWorld /&gt;</code> component to accept a property</li>
<li>We create a new Component that renders multiple instances of <code>&lt;HelloWorld /&gt;</code></li>
<li>We render the new Component into the document</li>
</ul>
<p>This sounds complex but it is quite doable so let&rsquo;s start right away by extending the <code>HelloWorld</code> component and re-naming it to <code>Hello</code> since it will greet all kinds of people now.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// The new Hello Component
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Hello</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">createClass</span>({
  <span style="color:#a6e22e">render</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>() {
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">h1</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">Hello</span> {<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">name</span>}<span style="color:#f92672">!&lt;</span><span style="color:#960050;background-color:#1e0010">/h1&gt;</span>
  }
});
</code></pre></div><p>With this simple change we can invoke the Component like <code>&lt;Hello name=&quot;Kevin&quot; /&gt;</code> and it will return <code>&lt;h1&gt;Hello Kevin!&lt;/h1&gt;</code>. However, to create a List of our friends we need a new Component. This Component will be called <code>FriendList</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">FriendList</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">createClass</span>({
  <span style="color:#a6e22e">render</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>() {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">allGreetings</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">folks</span>.<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">person</span>) {
      <span style="color:#66d9ef">return</span> <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">Hello</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">person</span>} <span style="color:#f92672">/&gt;</span>;
    });

    <span style="color:#66d9ef">return</span>(
      <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">div</span><span style="color:#f92672">&gt;</span>{<span style="color:#a6e22e">allGreetings</span>}<span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/div&gt;</span>
    )
  }
});
</code></pre></div><p>Quite a lot going on here. Let&rsquo;s break it down. First, we need to get all the greetings together. This is done by assigning them to a new variable called <code>allGreetings</code>. With Array.map() we go through the Array that&rsquo;ll be passed to the <code>FriendList</code> component when it is rendered, we call this property <code>folks</code>, so it is passed like <code>&lt;FriendList folks={friendArray} /&gt;</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// this.props.folks.map() goes over every entry in the array
</span><span style="color:#75715e">// and returns a new Hello Component.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">allGreetings</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">folks</span>.<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">person</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">Hello</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">person</span>} <span style="color:#f92672">/&gt;</span>;
});
</code></pre></div><p>What happens here is:</p>
<ul>
<li>we go through all the names in <code>this.props.folks</code></li>
<li>For each name, we return a new <code>&lt;Hello /&gt;</code> Component passing in the name of the person</li>
<li>All the HTML from all the Components now is assigned to the <code>allGreetings</code> variable</li>
</ul>
<p>So we have our HTML but we need to return it, right? Right! So the next line returns the generated HTML from the <code>FriendList</code> Component.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// the two parentese are optional but I like them for
</span><span style="color:#75715e">// &#34;grouping&#34; the return. The div however is required.
</span><span style="color:#75715e">// Every return must be wrapped in an DOM Element.
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span>(
      <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">div</span><span style="color:#f92672">&gt;</span>{<span style="color:#a6e22e">allGreetings</span>}<span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/div&gt;</span>
    )
</code></pre></div><p>So here we return a <code>div</code> holding our generated HTML. The <code>div</code> is required because every React Component must return a HTML Container - and the <code>allGreetings</code> variable holds multiple containers so we need a new one. The parentese are optional but I prefer them for grouping the output. Next, we need to invoke our new Component.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// Here we create an Array of all the people we want to greet. In this
</span><span style="color:#75715e">// case it&#39;s members from Team bullgit! http://bullg.it
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">allThePeople</span> <span style="color:#f92672">=</span> [
  <span style="color:#e6db74">&#34;Kevin&#34;</span>, <span style="color:#e6db74">&#34;Luky&#34;</span>, <span style="color:#e6db74">&#34;Jess&#34;</span>, <span style="color:#e6db74">&#34;Felix&#34;</span>, <span style="color:#e6db74">&#34;Max&#34;</span>, <span style="color:#e6db74">&#34;Nika&#34;</span>, <span style="color:#e6db74">&#34;Gregor&#34;</span>, <span style="color:#e6db74">&#34;Tim&#34;</span>, <span style="color:#e6db74">&#34;Jan&#34;</span>
]
<span style="color:#75715e">// and then we pass it to the FriendList Component.
</span><span style="color:#75715e"></span><span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">render</span>(<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">FriendList</span> <span style="color:#a6e22e">folks</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">allThePeople</span>}<span style="color:#f92672">/&gt;</span>, document.<span style="color:#a6e22e">body</span>);
</code></pre></div><p>We create a normal JavaScript Array with our Friends&rsquo; names as strings, then pass it to the React component as the attribute <code>folks</code>. This array will then be accessible as <code>this.props.folks</code> from within the Component. And, as before, here is a Pen showing the output as well as some more comments on the code.</p>
<!-- raw HTML omitted -->
<p>That&rsquo;s it for creating a Component and re-using it inside another Component. For the next tutorial we&rsquo;ll see how we can use a state to give our Components some interaction. If you&rsquo;ve got any questions or have found an issue, hit me up at <a href="https://twitter.com/_kevinatari">@_kevinatari</a>.</p>
<!-- raw HTML omitted -->
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/react" term="react" label="react"/></entry><entry><title type="html">Getting into Performance Measurement</title><link href="https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2015/01/getting-into-vim-again/?utm_source=atom_feed" rel="related" type="text/html" title="Getting into vim - again"/><link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/?utm_source=atom_feed" rel="related" type="text/html" title="Endless Multi-Dimensional Navigation"/><link href="https://kevingimbel.de/blog/2014/07/conditional-css/?utm_source=atom_feed" rel="related" type="text/html" title="Conditional CSS"/><link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/?utm_source=atom_feed" rel="related" type="text/html" title="A closer look to closure"/><link href="https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Useful Web Developer Tools"/><id>https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/</id><published>2015-03-10T00:00:00+00:00</published><updated>2015-03-10T00:00:00+00:00</updated><content type="html"><![CDATA[<p>I&rsquo;ve spent the past week developing some features for our own website at work.
We&rsquo;re using WordPress and I almost always enjoy working with WordPress beside
Magento projects, it&rsquo;s way easier to keep an overview and with a good overview
of data flow and available data it&rsquo;s easier to measure and find performance
bottleneck. In the following post I want to examine my workflow and the way I
refactored our code base to increase the speed and overall performance of our
site.</p>
<h3 id="mesuring-load-times">Mesuring load times</h3>
<h4 id="webpagetestorg">WebPageTest.org</h4>
<p>With <a href="http://webpagetest.org">WebPageTest.org</a> it is quite easy to measure load
times, render times, asset loading times and non cached assets. WPT even shows
which assets should be cached or served via a CDN. Initially it checks for First
View  and Repeat View and outputs a table of numbers and fancy graphics. The
thing I&rsquo;ve been most interested in were First View and Content Breakdown. The
Content Breakdown showed that ~66% of our landing page consist of images so
optimizing these images (see below) was a natural approach to boost performance.
When testing with WebPageTest I like to select the second fastest Internet
connection and a location somewhere relevant (for this site America, for our own
somewhere in Germany).</p>
<p>Then I watch the videos and see how the loading wents on. At first it was a
blank page and after 2.5s the page &ldquo;suddenly&rdquo; rendered all content at once. This
was not the desired behavior and so I started testing more.</p>
<h4 id="chrome-developer-tools">(Chrome) Developer Tools</h4>
<p>Using the Developer Tools I cleared the cache and measured a &ldquo;fresh&rdquo; load of our
site to see how content is loaded and where rendering starts. It turned out that
rendering was blocked by several JavaScript files (third party) and Google
Fonts, which where loaded from within our CSS files as well as the high amount
of non-optimized images. All these things can be seen in the Network Tab.</p>
<p>In Chrome there are 2 vertical lines - blue and red. The blue line marks the
time at which the <code>DOMContentLoaded</code> event is fired, that is when the DOM is
ready to be manipulated by JavaScript. The red line marks the moment where the
<code>load</code> event fires. This event indicates that all content (CSS, JavaScript,
Images, etc.) has been loaded.</p>
<blockquote>
<p>Measuring performance and finding obvious bottlenecks has become fairly easy
nowadays. With Tools like <a href="http://webpagetest.org">WebPageTest.org</a>, Developer
Tools or automated testing suits there are a ton of ways to analyze a
the loading behavior of a website.</p>
</blockquote>
<p>With these two tools I started tracking down the various performance issues.
First of all the blocking JavaScript and a bit of unused code.</p>
<h3 id="unused-code">Unused Code</h3>
<p>While checking the Network Tab in Chrome Dev Tools I&rsquo;ve seen that out of 16 Requests
one JavaScript Analytics Library was blocking the
rendering by almost 600-800ms. Because it was barely used I removed this one so
there was already a big improvement by removing unused or barely used code - one
should always check for unused plugins, libs and CSS - this is the most basic
&ldquo;improvement&rdquo; and optimization.</p>
<blockquote>
<p>Regularly refactor your code base to see where unused code exists or
code can be optimized. By ueing a Pre-Processor it&rsquo;s easy to remove the code
from production but keep it for later by using an <a href="http://sass-guidelin.es/#main-file">import system</a>.</p>
</blockquote>
<h3 id="minify">Minify</h3>
<p>Minifying files is always a good thing. No doubt. Use
<a href="https://github.com/mishoo/UglifyJS">Uglify</a> for JavaScript
and your favorite pre-proccessor&rsquo;s compress function.</p>
<h3 id="images">Images</h3>
<p>Next I found that our landing page is pretty image heavy, especially with a big
banner image. To reduce the size I searched for plugins to automate the process
but couldn&rsquo;t find a good one so I tried out <a href="http://pngquant.org/">PNGQuant</a> a
Command Line tool for PNG optimization. With this tool I could reduce the size
of almost any image by 50-70% which again reduced the load time by 100-200ms.</p>
<blockquote>
<p>Always optimize images, either with a tool before uploading them or with a
Plugin. Not optimizing images is a waste of time (literally) and bad for users.</p>
</blockquote>
<h3 id="fonts">Fonts</h3>
<p>As I mentioned earlier, rendering was also blocked by Google Fonts being
directly included into our Stylesheets. Out of curiosity I checked if loading it
asynchronously via the provided snippet from Google Fonts would help and indeed
it did! We saved almost 100ms simply by loading the Font files asynchronously.</p>
<p>On the very First View this can make the content &lsquo;jump&rsquo; a bit because the
initial view loads with a fallback font (sans-serif, for example) and then once
the Font is loaded from Google&rsquo;s CDN it replaces the old font with the new font
on-the-fly. This may looks ugly and if you absolutely can not live with it you
must take the 100ms-slower Pill and include the fonts in your CSS where they&rsquo;ll
be loaded before the CSS is rendered - therefore no delay.</p>
<p>Below is the function that&rsquo;ll load the fonts via a script tag that as the
<code>async</code> attribute set.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">WebFontConfig</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">google</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">families</span><span style="color:#f92672">:</span> [ <span style="color:#e6db74">&#39;Open+Sans:400,300,600:latin&#39;</span> ] }
};
(<span style="color:#66d9ef">function</span>() {
 <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wf</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;script&#39;</span>);
 <span style="color:#a6e22e">wf</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;https:&#39;</span> <span style="color:#f92672">==</span> document.<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">protocol</span> <span style="color:#f92672">?</span> <span style="color:#e6db74">&#39;https&#39;</span>
   <span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;http&#39;</span>) <span style="color:#f92672">+</span>
 <span style="color:#e6db74">&#39;://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js&#39;</span>;
 <span style="color:#a6e22e">wf</span>.<span style="color:#a6e22e">type</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;text/javascript&#39;</span>;
 <span style="color:#a6e22e">wf</span>.<span style="color:#a6e22e">async</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;true&#39;</span>;
 <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">s</span> <span style="color:#f92672">=</span>
 document.<span style="color:#a6e22e">getElementsByTagName</span>(<span style="color:#e6db74">&#39;script&#39;</span>)[<span style="color:#ae81ff">0</span>];
 <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">parentNode</span>.<span style="color:#a6e22e">insertBefore</span>(<span style="color:#a6e22e">wf</span>, <span style="color:#a6e22e">s</span>);
 })(); 
</code></pre></div><blockquote>
<p>Font rendering from within CSS can block the overall load time of the CSS
file. Splitting out the fonts from the CSS and loading them via JavaScript (if
possible) may increase the initial load time of the website.</p>
</blockquote>
<h3 id="server-side-optimizations">Server-side optimizations</h3>
<p>There&rsquo;s quite a lot to do when optimizing from the server side. From things like
optimizing Queries, Caching Queries to using the variety of Apache or Nginx
Modules and settings to optimize the servers workflow. While we have our site at
a specific WordPress Hoster our access to server features is mainly limited to
their admin interface and using the <code>.htaccess</code> - which is what I did.</p>
<h4 id="expire-dates">Expire Dates</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"># caching for 1 month
&lt;<span style="color:#f92672">IfModule</span> <span style="color:#a6e22e">mod_expires</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#a6e22e">c</span>&gt;
 ExpiresActive On
 ExpiresByType text/css &#34;access plus 1 month&#34;
 ExpiresByType text/javascript &#34;access plus 1 month&#34;
 ExpiresByType text/html &#34;access plus 1 month&#34;
 ExpiresByType application/javascript &#34;access plus 1 month&#34;
 ExpiresByType image/gif &#34;access plus 1 month&#34;
 ExpiresByType image/jpeg &#34;access plus 1 month&#34;
 ExpiresByType image/png &#34;access plus 1 month&#34;
 ExpiresByType image/x-icon &#34;access plus 1 month&#34;

  &lt;<span style="color:#f92672">FilesMatch</span> <span style="color:#960050;background-color:#1e0010">&#34;\.(</span><span style="color:#a6e22e">gif</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">jpe</span><span style="color:#960050;background-color:#1e0010">?</span><span style="color:#a6e22e">g</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">png</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">ico</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">css</span><span style="color:#960050;background-color:#1e0010">|</span><span style="color:#a6e22e">js</span><span style="color:#960050;background-color:#1e0010">)$&#34;</span>&gt;
    Header set Cache-Control &#34;public&#34;
  &lt;/<span style="color:#f92672">FilesMatch</span>&gt;
&lt;/<span style="color:#f92672">IfModule</span>&gt;
</code></pre></div><h4 id="compression-with-mod_deflate">Compression with mod_deflate</h4>
<p>With this snippet above we tell the server to cache certain file types by 1
month (if they don&rsquo;t change of course). This way the server can sent back the
files from its cache instead of re-generating the files all the time. Next I
used <code>mod_deflate</code> to compress the files before they are sent to the client.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"># Deflate Compression by FileType
&lt;<span style="color:#f92672">IfModule</span> <span style="color:#a6e22e">mod_deflate</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#a6e22e">c</span>&gt;
 AddOutputFilterByType DEFLATE text/plain
 AddOutputFilterByType DEFLATE text/html
 AddOutputFilterByType DEFLATE text/xml
 AddOutputFilterByType DEFLATE text/css
 AddOutputFilterByType DEFLATE text/javascript
 AddOutputFilterByType DEFLATE application/xml
 AddOutputFilterByType DEFLATE application/xhtml+xml
 AddOutputFilterByType DEFLATE application/rss+xml
 AddOutputFilterByType DEFLATE application/atom_xml
 AddOutputFilterByType DEFLATE application/javascript
 AddOutputFilterByType DEFLATE application/x-javascript
&lt;/<span style="color:#f92672">IfModule</span>&gt;
</code></pre></div><p>Now all our files are cached and gzip (compressed). Additionally our Hoster has
its own cache (Varnish) which should benefit to our sites overall performance, too.</p>
<blockquote>
<p>Use your servers configuration to serve compressed and/or cached files instead
of re-generating the files on every request. Make sure to cache static content
like images, javascript or css.</p>
</blockquote>
<h3 id="lazy-load-javascript">Lazy-load JavaScript</h3>
<p>We&rsquo;ve been using our own delayed load for JavaScript assets ever since I started
working at <a href="http://synoa.de">Synoa</a>. We use the following function to include
our minified JavaScript after the DOM is loaded, if possible.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">loadAfterDom</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">script</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;script&#39;</span>);
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">body</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">body</span>;
  
  <span style="color:#a6e22e">script</span>.<span style="color:#a6e22e">type</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;text/javascript&#39;</span>;
  <span style="color:#a6e22e">script</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;path/to/main.min.js&#39;</span>;
  
  document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">script</span>);
}
<span style="color:#75715e">// load the script when the DOM is constructed
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span>(window.<span style="color:#a6e22e">addEventListener</span>) {
  window.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;DOMContentLoaded&#39;</span>, <span style="color:#a6e22e">loadAfterDom</span>, <span style="color:#66d9ef">false</span>);
} <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(window.<span style="color:#a6e22e">attachEvent</span>) {
  window.<span style="color:#a6e22e">attachEvent</span>(<span style="color:#e6db74">&#39;load&#39;</span>, <span style="color:#a6e22e">loadAfterDom</span>);  
} <span style="color:#66d9ef">else</span> {
  window.<span style="color:#a6e22e">onload</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">loadAfterDom</span>;  
}
</code></pre></div><p>This little script loads the <code>main.min.js</code> file after the DOM is constructed so
it doesn&rsquo;t block the rendering of the page.</p>
<blockquote>
<p>Lazy loading JavaScript only works when JavaScript is not needed for the
initial view (which it shouldn&rsquo;t). When you need JavaScript on render time to
hide elements, for example, it may be better to hide them initially and show them after the
page is loaded!</p>
</blockquote>
<h3 id="what-could-be-done-next">What could be done next?</h3>
<p>Next we could think about inlining our Critical Path CSS using a Grunt or Gulp
task, as Google PageSpeed suggests all the time. I&rsquo;ve yet never done this before
and need to try it before I can say if it&rsquo;s worth or not.</p>
<p>In another round we could review the entire code base and replace the legacy
Compass compiler with modern, <a href="https://github.com/sass/node-sass">node-sass</a> and
<a href="https://github.com/sass/libsass">Libsass</a>, a C++ implementation of Sass that is
a lot faster than Ruby, to increase compile performance. Most of the vendor
prefixing is done using own mixins or compass functions (which are legacy), so
handing the prefixing job to <a href="https://github.com/postcss/autoprefixer">Autoprefixer</a>
is another desirable improvement.</p>
<h3 id="result">Result</h3>
<p>At this point, our website performs at 900ms-1.2s in load time for the front page
and 700-800ms for most sub pages. Yet there is still optimization that need to
be done, especially the question on how to integrate the optimization into
everyone&rsquo;s workflow. While developers could use a grunt/gulp/cli task the people
who actually write content need an easy way to handle the optimization of
uploaded files. The last resort of more optimization is the server respond time
on which we don&rsquo;t have any influence.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/tags/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/css" term="css" label="css"/></entry><entry><title type="html">Snippet: theme-color for Android 5.0</title><link href="https://kevingimbel.de/blog/2014/11/snippet-theme-color-for-android-5.0/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Useful Web Developer Tools"/><id>https://kevingimbel.de/blog/2014/11/snippet-theme-color-for-android-5.0/</id><published>2014-11-21T00:00:00+00:00</published><updated>2014-11-21T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Just yesterday I got my Android 5.0 update which also features a new way multi-tasking works and Chrome interacts with
this multi-tasking. In fact, all recently opened tabs are available via the multi-tasking button (square to the down
right on Stock Android) instead of an in-app button like it used to be. This not only is very handy actually since you
can switch between apps and websites seamlessly you can also set your own status bar colors for chrome which are used on
the page and in the multi-tasking overview.</p>
<h3 id="one-liner">One-liner!</h3>
<p>All it takes is a simple one-liner of HTML: a <code>&lt;meta&gt;</code>-tag!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;theme-color&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#5677fc&#34;</span>&gt;
</code></pre></div><p>The content can be any valid CSS color and that&rsquo;s it - nothing more to do!</p>
<h3 id="results">Results</h3>
<!-- raw HTML omitted -->
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/tags/android" term="android" label="android"/><category scheme="https://kevingimbel.de/tags/chrome" term="chrome" label="chrome"/><category scheme="https://kevingimbel.de/tags/html" term="html" label="html"/></entry><entry><title type="html">Endless Multi-Dimensional Navigation</title><link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/?utm_source=atom_feed" rel="related" type="text/html" title="A closer look to closure"/><link href="https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/?utm_source=atom_feed" rel="related" type="text/html" title="Passing Arguments in JavaScript"/><link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="related" type="text/html" title="Pure JavaScript slider"/><link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/?utm_source=atom_feed" rel="related" type="text/html" title="To infinity and beyond"/><link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="related" type="text/html" title="i-js"/><id>https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/</id><published>2014-08-22T00:00:00+00:00</published><updated>2014-08-22T00:00:00+00:00</updated><content type="html"><![CDATA[<p>The past I decided to get my head around multi-dimensional navigations, like navigations that can have (endless) sub navigations nested inside them and so I started to try some ideas on <a href="http://codepen.io">CodePen</a>. My first idea was to have a trigger element that, when clicked, triggeres the nearest Sub Navigation to activate it (e.g. giving it an <code>open</code> class). The JavaScript for this looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">d</span> <span style="color:#f92672">=</span> document,
    <span style="color:#a6e22e">trigger</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">d</span>.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;#trigger&#39;</span>),
    <span style="color:#a6e22e">subNav</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">trigger</span>.<span style="color:#a6e22e">parentNode</span>.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;.sub-nav&#39;</span>);

<span style="color:#a6e22e">trigger</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;click&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
  <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">preventDefault</span>(); <span style="color:#75715e">// cancels reload on &lt;a&gt; tags
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">subNav</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">toggle</span>(<span style="color:#e6db74">&#39;open&#39;</span>);
});
</code></pre></div><p>So with this, each time the trigger is clicked the sub navigation will get the class applied or removed
(<code>classList.toggle()</code>). The <code>subNav</code> class is markup related, because the trigger is inside a <code>&lt;li&gt;</code>, as well as the sub
nav, so <code>this.parentNode</code> will return the <code>&lt;li&gt;</code> element.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">ul</span>&gt;
  &lt;<span style="color:#f92672">li</span>&gt;
    &lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;trigger&#34;</span>&gt;+&lt;/<span style="color:#f92672">span</span>&gt; <span style="color:#75715e">&lt;!-- this.parentNode returns the &lt;li&gt;
</span><span style="color:#75715e">      &lt;ul class=&#34;sub-nav&#34;&gt;
</span><span style="color:#75715e">        ...
</span><span style="color:#75715e">      &lt;/ul&gt;
</span><span style="color:#75715e">  &lt;/li&gt;
</span><span style="color:#75715e">&lt;/ul&gt;
</span></code></pre></div><p>So the basic markup for navigations is now like this</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"> &lt;<span style="color:#f92672">ul</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;my-nav-wrapper-class&#34;</span>&gt;
    &lt;<span style="color:#f92672">li</span> <span style="color:#a6e22e">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span>&gt; Sub nav &lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;xy&#34;</span> <span style="color:#a6e22e">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span>&gt;+&lt;/<span style="color:#f92672">span</span>&gt;
      &lt;<span style="color:#f92672">ul</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sub-nav&#34;</span> <span style="color:#a6e22e">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
        &lt;<span style="color:#f92672">li</span>&gt;Sub Nav Item&lt;/<span style="color:#f92672">li</span>&gt;
      &lt;/<span style="color:#f92672">ul</span>&gt;
    &lt;/<span style="color:#f92672">li</span>&gt;
 &lt;/<span style="color:#f92672">ul</span>&gt;
</code></pre></div><p>One of the most important things here is the <code>data-id</code> attribute which groups the navigations, triggers and (endless)
sub navigations together and is used to reference each of them.</p>
<h3 id="event-bubbling">Event Bubbling</h3>
<p>Yet before we get to the actual code it&rsquo;s important to understand event bubbling. If you already know what it is skip
this section and continue with &ldquo;Finaly: Code&rdquo; below.
Event Bubbling is the concept of how the browser handles events. Your&rsquo;re most likly familiar with <code>e.preventDefault()</code>
for click events applied to <code>&lt;a&gt;</code>-tags. This function stops the normal event bubbling so the browser doesn&rsquo;t reload
the page - which is the default action for <code>&lt;a&gt;</code>-tags.
So in our case the behavior we make use of is event bubbling, as said before. Take a look at the graphic below and then
read on.
<img src="https://i.kevingimbel.me/sc/event_flow_v1.png" alt="&ldquo;Event Bubbling for this navigation&rdquo;">
When the even get&rsquo;s triggered it finds no handler and the event literally goes up the DOM until it finds a handler. Node
by node the little event walks up until finally the navigation wrapper says &ldquo;Yes little event! I got you, I&rsquo;ll handle
that!&rdquo; - and that&rsquo;s it. When the handler attached to the navigation handles the event it will also populate it&rsquo;s <code>el</code>
variable with whatever <code>e.target</code> currently is. <code>e.target</code> happens to always be the <strong>triggering element</strong>, so it is
very similar to <code>this</code>, yet even more flexible!</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/></entry><entry><title type="html">Conditional CSS</title><link href="https://kevingimbel.de/blog/2014/07/conditional-css/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/01/web-development-in-2014/?utm_source=atom_feed" rel="related" type="text/html" title="Web Development in 2014"/><link href="https://kevingimbel.de/blog/2013/11/pseudo-product-flags/?utm_source=atom_feed" rel="related" type="text/html" title="Pseudo Product Flags"/><link href="https://kevingimbel.de/blog/2013/10/custom-radio-buttons/?utm_source=atom_feed" rel="related" type="text/html" title="Custom Radio Buttons"/><link href="https://kevingimbel.de/blog/2013/10/from-0-to-sass/?utm_source=atom_feed" rel="related" type="text/html" title="From 0 To Sass"/><link href="https://kevingimbel.de/blog/2013/09/a-bit-sticky/?utm_source=atom_feed" rel="related" type="text/html" title="A bit sticky"/><id>https://kevingimbel.de/blog/2014/07/conditional-css/</id><published>2014-07-31T00:00:00+00:00</published><updated>2014-07-31T00:00:00+00:00</updated><content type="html"><![CDATA[<p>While there&rsquo;s a lot of talking about CSS writing styles, organization styles and if it&rsquo;s maybe better or not to avoid
pre-processors or frameworks there&rsquo;s one very powerful thing that gets pretty much no attention at all: Conditional CSS,
i.e. pieces of CSS that serve one specific task the easiest and most known is <code>.active</code> given to, well, active elements.
I&rsquo;d like to talk a bit about conditional CSS that I&rsquo;ve been using in production and that I think can improve the overall
logic of CSS.</p>
<h3 id="grids">Grids</h3>
<p>I&rsquo;d like to notice that the first example is taken from <a href="http://inuitcss.com">inuit.css</a> by <a href="http://csswizardry.com/">Harry
Roberts</a>. The grid itself has been adopted into <a href="http://github.com/synoa/bullgrid">Bullgrid</a>
which is at the moment a <code>em</code> based, stripped down and standalone version of <a href="https://github.com/csswizardry/inuit.css/blob/master/objects/_grids.scss">inuit.css
grids</a>. So all the kudos for the next section
go to <a href="http://twitter.com/csswizardry">Harry Roberts</a>.
One of the most amazing things about inuit.css Grids is its use of viewport-name based classes.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;gw&#34;</span>&gt;
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;g one-third small-one-whole&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;g one-third small-one-whole&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;g one-third small-one-whole&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
</code></pre></div><p>The above example creates a 3 column grid that&rsquo;ll turn into 3 full-width (one-whole) containers once the viewport
&ldquo;small&rdquo; is reached. To achieve this behavior Harry wrote an amazingly logical <a href="https://github.com/csswizardry/inuit.css/blob/master/generic/_widths.scss#L13-L102">mixin to set up the
grids</a> that can later be used to set
up the grid with a given &ldquo;viewport&rdquo; prefix (<a href="https://github.com/csswizardry/inuit.css/blob/master/generic/_widths.scss#L121-L141">see this
function</a>). While this creates
quite a lot of CSS on one hand it is amazingly flexible when working with this grid. Most of the time 3 classes are
enough to make any component of the page, or better it&rsquo;s container, adjust to the current viewport. I categorize this as
&ldquo;Conditional CSS&rdquo; because it has a condition (the viewport prefix, e.g. small-).</p>
<p>Not only is this grid amazingly simple once you get used to the naming, it is also great for prototyping inside the
browser. If one part of the page looks a bit weird I can directly play around with all grid classes to find the perfect
fiting one.</p>
<h3 id="javascriptbehaviour-conditions">JavaScript/Behaviour conditions</h3>
<p>JavaScript based conditions are similar to the <code>active</code> example from the intro. Mostly they&rsquo;ll be applied to elements
with JavaScript. In general Conditional CSS should be prefered over applying styles directly with JavaScript. Not only
is it cleaner to devide functions and styles, it is also easier to debug, especially when immediate executing functions
change the look of elements. Consider the next example.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// hide all things on load using element.style
</span><span style="color:#75715e"></span>(<span style="color:#66d9ef">function</span>() {
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">allThings</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelectorAll</span>(<span style="color:#e6db74">&#39;.things&#39;</span>);
	<span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">allThings</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
			<span style="color:#a6e22e">allThings</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">display</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;none&#39;</span>;
		}
}());

<span style="color:#75715e">// hide all things with a conditional class
</span><span style="color:#75715e"></span>(<span style="color:#66d9ef">function</span>() {
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">allThings</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelectorAll</span>(<span style="color:#e6db74">&#39;.things&#39;</span>);
	<span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">allThings</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
			<span style="color:#a6e22e">allThings</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">add</span>(<span style="color:#e6db74">&#39;is-hidden&#39;</span>);
		}
}());
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">is-hidden</span> {
	<span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">none</span>;
}
</code></pre></div><p>When only looking at the result both functions do the same: They hide all <code>.things</code>. However, the conditional CSS
approach applies a class to the element. So when looking at the code from the inspector it is clear that this element
is hidden because of a class name. This way it is easier to find out why an element is not displayed. Also it avoids
inline styles which always have a higher priority than everything else (as the next pen shows).</p>
<!-- raw HTML omitted -->
<p>Some of the Conditional CSS classes I use are</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">//</span> <span style="color:#f92672">element</span> <span style="color:#f92672">is</span> <span style="color:#f92672">hidden</span>
.<span style="color:#a6e22e">is-hidden</span> {
	<span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">none</span>;
}
<span style="color:#f92672">//</span> <span style="color:#f92672">element</span> <span style="color:#f92672">is</span> <span style="color:#f92672">displayed</span>
.<span style="color:#a6e22e">is-displayed</span> {
	<span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">block</span><span style="color:#f92672">:</span>
}
<span style="color:#f92672">//</span> <span style="color:#f92672">element</span> <span style="color:#f92672">is</span> <span style="color:#f92672">active</span> <span style="color:#f92672">(</span><span style="color:#f92672">most</span> <span style="color:#f92672">of</span> <span style="color:#f92672">the</span> <span style="color:#f92672">time</span> <span style="color:#f92672">nav</span> <span style="color:#f92672">items</span><span style="color:#f92672">)</span>
.<span style="color:#a6e22e">active</span> {
	<span style="color:#960050;background-color:#1e0010">//</span> <span style="color:#960050;background-color:#1e0010">styles</span>
}

<span style="color:#f92672">//</span> <span style="color:#f92672">used</span> <span style="color:#f92672">with</span> <span style="color:#f92672">buttons</span>
.<span style="color:#a6e22e">has-icon</span> {
	<span style="color:#960050;background-color:#1e0010">//</span> <span style="color:#960050;background-color:#1e0010">styles</span>
}

<span style="color:#75715e">/*
</span><span style="color:#75715e"> * The following basically works for all
</span><span style="color:#75715e"> * viewports but it&#39;s more a hack-y thing.
</span><span style="color:#75715e"> * I use it to hide/display the text inside
</span><span style="color:#75715e"> *	the header of this blog.
</span><span style="color:#75715e">*/</span>
@<span style="color:#66d9ef">media</span> <span style="color:#f92672">all</span> <span style="color:#f92672">and</span> <span style="color:#f92672">(</span><span style="color:#f92672">max-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">30em</span><span style="color:#f92672">)</span> {
	.<span style="color:#a6e22e">small--is-hidden</span> {
		<span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">none</span>;
	}

	.<span style="color:#a6e22e">small--is-displayed</span> {
			<span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">block</span>;
	}
}

<span style="color:#75715e">/*
</span><span style="color:#75715e"> * Print specific elements
</span><span style="color:#75715e"> * [1]: Depending on the content and layout
</span><span style="color:#75715e"> * 			maybe display: inline|inline-block;
</span><span style="color:#75715e">*/</span>

.<span style="color:#a6e22e">print-only</span> {
	<span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">none</span>;
}
@<span style="color:#66d9ef">media</span> <span style="color:#f92672">print</span> {
	.<span style="color:#a6e22e">print-only</span> {
		<span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">block</span>; <span style="color:#960050;background-color:#1e0010">//</span> <span style="color:#960050;background-color:#1e0010">[1]</span>
	}
}
</code></pre></div><p>So far I find Conditional CSS a good idea and really like to work with it. It&rsquo;s easier, at least for me, to see what a
class does and where/how it should be used. Also it&rsquo;s a simple use of DRY (don&rsquo;t repeat yourself) and <a href="http://csswizardry.com/2012/04/the-single-responsibility-principle-applied-to-css/">Single
Responsibility Principle</a> but as
with everything overusing it won&rsquo;t make your live easier.
As always I appreciate feedback or improvments via <a href="http://twitter.com/_kevinatari">twitter</a>.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/css" term="css" label="css"/><category scheme="https://kevingimbel.de/tags/frontend" term="frontend" label="frontend"/></entry><entry><title type="html">Passing Arguments in JavaScript</title><link href="https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="related" type="text/html" title="Pure JavaScript slider"/><link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/?utm_source=atom_feed" rel="related" type="text/html" title="To infinity and beyond"/><link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="related" type="text/html" title="i-js"/><id>https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/</id><published>2014-05-23T00:00:00+00:00</published><updated>2014-05-23T00:00:00+00:00</updated><content type="html"><![CDATA[<p>One of my favorite aspects of JavaScript is that it is unbelievable flexible. I am currently reading &ldquo;Secrets of the JavaScript Ninja&rdquo; by the amazing <a href="http://ejohn.org">John Resig</a> and try to play around with JavaScript whenever I&rsquo;ve the time to do so. Just yesteday I needed to pass as many arguments to a function as the user wants which means I can&rsquo;t check for every possible thingy. Anyway, I&rsquo;ll cover this in a small write-up aka a blog post. Yay!</p>
<p>First of all we should have some use case or scenario. I needed the a variable number of options for my <a href="https://github.com/bullgit/Bulllog">Bulllog</a> script that takes any number of CSS oroperty-value pairs and applies them to your console.logs (Chrome only, sadly). Anyway, CSS is a good example in my opinion so we&rsquo;ll write a small css() function that can be applies to an element.</p>
<p>First of all, what should this function do? It should:</p>
<ul>
<li>Take any number of CSS property-value pairs</li>
<li>apply them to our element</li>
<li>respond (console.log()) errors if any happen</li>
</ul>
<h3 id="the-functions">The functions</h3>
<p>We&rsquo;ll start with the basic: getting an element and manipulating its CSS.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">	<span style="color:#75715e">// Getting the element
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>( <span style="color:#e6db74">&#39;.test&#39;</span> );
	<span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">background</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;red&#39;</span>;
	<span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">style</span>[<span style="color:#e6db74">&#39;background&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;black&#39;</span>;
</code></pre></div><p>Both of the above ways (<code>el.style.background</code> and <code>el.style['background']</code>) work the exact same way. But that&rsquo;s not much fun, right? Why should we want to set our styles this way and where&rsquo;s the dynamic functional stuff at all? Lets extend the script with a <code>css</code> function.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">css</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">css</span>( <span style="color:#a6e22e">el</span>, <span style="color:#a6e22e">options</span> ) {
	<span style="color:#75715e">/*1 */</span>
  <span style="color:#66d9ef">if</span>( <span style="color:#66d9ef">typeof</span>(<span style="color:#a6e22e">el</span>) <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;object&#39;</span> ) {
    <span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">el</span>;
  } <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>( <span style="color:#a6e22e">el</span> );
  }
	<span style="color:#75715e">/* 2 */</span>
  <span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">style</span>[<span style="color:#a6e22e">opts</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;red&#39;</span>;
}
</code></pre></div><p>What this script does:</p>
<ol>
<li>check if el is already an object, if so we don&rsquo;t need to select it again. That&rsquo;d be the case if we pass the previously defined <code>el</code> directly to the function.  We can also use <code>css('.my-class', 'background');</code></li>
<li>Set the desired property, e.g. background, color to be red.</li>
</ol>
<p>Alright, that&rsquo;s not bad but why should we want to sett everything to red? You&rsquo;re right - we don&rsquo;t want this. Next up: for in loops!</p>
<h3 id="for-key-in-obj">For key in obj</h3>
<p>For loops are always fun and especially <code>for in</code> loops. They&rsquo;re perfect for our needs because we&rsquo;ll pass a list (or better an Object) with property-value pairs to our function and need to process them so they can be applies as styles. Our modified function now looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">css</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">css</span>( <span style="color:#a6e22e">el</span>, <span style="color:#a6e22e">options</span> ) {
	<span style="color:#66d9ef">if</span>( <span style="color:#66d9ef">typeof</span>( <span style="color:#a6e22e">el</span> ) <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;object&#39;</span> ) {
		<span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">el</span>;
	} <span style="color:#66d9ef">else</span> {
		<span style="color:#a6e22e">el</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#a6e22e">el</span>);
	}
	<span style="color:#75715e">/* 1 */</span>
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">styleProperties</span> <span style="color:#f92672">=</span> [],
      <span style="color:#a6e22e">styleValues</span> <span style="color:#f92672">=</span> [];
  <span style="color:#75715e">/* 2 */</span>
  <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">key</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">options</span>) {
    <span style="color:#75715e">/* 3 */</span>
		<span style="color:#a6e22e">styleProperties</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">key</span>);
    <span style="color:#a6e22e">styleValues</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">options</span>[<span style="color:#a6e22e">key</span>])
  }
}
</code></pre></div><ol>
<li>We need to create an empty array to store all our property-value pairs in.</li>
<li>We start our for in loop. We go over every key in our options object.</li>
<li>Every propery-value pair gets pushed into our arrays, the properties into the <code>styleProperties</code> array and the values into the <code>styleValues</code> array.
I&rsquo;m sure there is a more elegant way to do this, but I couldn&rsquo;t really think of any - so I&rsquo;m as always up for improvments!</li>
</ol>
<p>Our <code>css()</code> function just got a lot more flexible! Before we could only set any property to one value (everything we want to <code>red</code>), now we can pass a lot of property-value pairs and they&rsquo;ll get processes by our function! Awesome, right?
Calling the function would now look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">	<span style="color:#a6e22e">css</span>(<span style="color:#e6db74">&#39;.my-div&#39;</span>, {
	  <span style="color:#a6e22e">color</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;yellow&#39;</span>,
	  <span style="color:#a6e22e">background</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#333&#39;</span>
	});
</code></pre></div><h3 id="almost-there">Almost there</h3>
<p>So far we can pass a list (object) of property-value pairs and process them into two nice arrays. However, the function does not apply these styles yet which is why we have to do one last step.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">  <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">styleProperties</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">style</span>[<span style="color:#a6e22e">styleProperties</span>[<span style="color:#a6e22e">i</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">styleValues</span>[<span style="color:#a6e22e">i</span>];
  }
</code></pre></div><p>We iterate over the array (doesn&rsquo;t matter which because both are exatctly the same size) and extract the matching properties and values. That&rsquo;s the point where we actually apply the styles.</p>
<p>The result looks like this.</p>
<!-- raw HTML omitted -->
<p>With this technique you can make any function accept any amount of property-value pairs by simply passing in an object. This would also work when you define the object itsef as a variable (see the second div). It&rsquo;s important to know that properties like <code>font-size</code> must be written in quotes (e.g. <code>&quot;font-size&quot;: &quot;1em&quot;</code>), otherwise the script will fail.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/></entry><entry><title type="html">Pure JavaScript slider</title><link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/?utm_source=atom_feed" rel="related" type="text/html" title="To infinity and beyond"/><link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="related" type="text/html" title="i-js"/><id>https://kevingimbel.de/blog/2014/02/pure-javascript-slider/</id><published>2014-02-22T00:00:00+00:00</published><updated>2014-02-22T00:00:00+00:00</updated><content type="html"><![CDATA[<p>The great thing when you&rsquo;re a beginner in any programming language (or in anything in general) is, that even small successes make you happy and proud of what you did. I&rsquo;m very  proud of my <a href="http://kevingimbel.com/to-infinity-and-beyond/">back to top script</a> even though it&rsquo;s not perfect at all. I could make a back to top button with jQuery in a few minutes but it wouldn&rsquo;t be that much fun. However, I made another JavaScript thing I&rsquo;m proud of: A pure JavaScript slider.</p>
<!-- raw HTML omitted -->
<p>The slider runs forever in a loop, animating images to the left until the last image is reached. When the last image is reached it will animate all back to the first image (I&rsquo;m not happy with this animation yet) and will start over. Pretty simple. The hardest part for me was - and still is - the animation timing. I&rsquo;m may over-thinking stuff but I can&rsquo;t figure out a formula to calculate a good timing based on how many images the slider has. If someone has an idea, fork the pen or <a href="http://twitter.com/_kevinatari">tweet me</a>.</p>
<p>First of all I defined some variables.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">     <span style="color:#75715e">// current image is 0
</span><span style="color:#75715e"></span> <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">current</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
     <span style="color:#75715e">// used for loops
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">i</span>,
     <span style="color:#75715e">// the whole slider element
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">slider</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;[data-js=&#34;sslide&#34;]&#39;</span>),
     <span style="color:#75715e">// all images inside the slider
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">allImages</span> <span style="color:#f92672">=</span>  <span style="color:#a6e22e">slider</span>.<span style="color:#a6e22e">querySelectorAll</span>(<span style="color:#e6db74">&#39;img&#39;</span>),
     <span style="color:#75715e">// the width of 1 image based on all images (used in % later)
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">imgWidth</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">ceil</span>(<span style="color:#ae81ff">100</span> <span style="color:#f92672">/</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span>),
     <span style="color:#75715e">// the slider width based on the number of images
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">sliderWidth</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>;
</code></pre></div><p>Next I set the width of all images as well as the slider.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    
  <span style="color:#a6e22e">slider</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">width</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">sliderWidth</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;%&#39;</span>;
    
  <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#a6e22e">allImages</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">width</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">imgWidth</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;%&#39;</span>;
  }
</code></pre></div><p>Now the slider and images have the correct width (in percent) and I began to make the animation part. It&rsquo;s made with the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.setInterval">setInterval</a> JavaScript function.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">animateLeft</span>(<span style="color:#a6e22e">cur</span>) {
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
          <span style="color:#a6e22e">time</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">animate</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span>() {
      <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">imgWidth</span>) {
        <span style="color:#a6e22e">allImages</span>[<span style="color:#a6e22e">cur</span>].<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">marginLeft</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">i</span>  <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;%&#34;</span>;
        <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>;
      } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">clearInterval</span>(<span style="color:#a6e22e">animate</span>);
      }
      }, <span style="color:#a6e22e">time</span>);  
   }
</code></pre></div><p>The interval runs as long as <code>i</code> is smaller or equal to the image width. Because the interval is set to 50ms it runs &ldquo;fast&rdquo; and sets the images <code>margin-left</code> rapidly to <code>-i%</code> and because it runs as long as <code>i</code> is smaller than the image width it hides the image completely to the left. Pretty simple right? However, <code>time</code> is at the moment a variable that is set to 50 because I couldn&rsquo;t figure out a good way to calculate it.</p>
<p>Another function I use is <code>animateRight</code> that is just the opposite of <code>animateLeft</code>. It is only used to animate all images back to the start and has the same markup as <code>animateLeft</code> expect it runs revers (<code>i--</code>). I combine it with a <code>reset</code> function that also resets the <code>current</code> variable to 0.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">  <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">animateRight</span>(<span style="color:#a6e22e">cur</span>) {
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">imgWidth</span>,
          <span style="color:#a6e22e">time</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">animate</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span>() {
      <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">sliderWidth</span>) {
        <span style="color:#a6e22e">allImages</span>[<span style="color:#a6e22e">cur</span>].<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">marginLeft</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;%&#34;</span>;
        <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span>;
      } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">clearInterval</span>(<span style="color:#a6e22e">animate</span>);
      }
      }, <span style="color:#a6e22e">time</span>);  
   } 
    
    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">reset</span>() {
      <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">animateRight</span>(<span style="color:#a6e22e">i</span>);
      }
      <span style="color:#75715e">// resseting the current image to the first image
</span><span style="color:#75715e"></span>      <span style="color:#a6e22e">current</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    }   
</code></pre></div><p>That&rsquo;s all the functions I needed for this slider - I could&rsquo;ve combined the <code>animateLeft</code> and <code>animateRight</code> function and if I continue developing this slider I&rsquo;ll make it. Last thing to do: Call a final interval that handles the sliding of all images.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span> () {
      <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">current</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">allImages</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>) {
        <span style="color:#a6e22e">animateLeft</span>(<span style="color:#a6e22e">current</span>);
        <span style="color:#a6e22e">current</span><span style="color:#f92672">++</span>;
        
      } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">reset</span>();
      }
    }, <span style="color:#ae81ff">3000</span>);
</code></pre></div>]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/></entry><entry><title type="html">Bullgit loves Jekyll</title><link href="https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/?utm_source=atom_feed" rel="related" type="text/html" title="Ghost in the shell"/><id>https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/</id><published>2014-01-06T00:00:00+00:00</published><updated>2014-01-06T00:00:00+00:00</updated><content type="html"><![CDATA[<p>After having a static HTML Page for about 6 months, we at <a href="http://bullg.it">bullgit</a> just switched to a brand-new Jekyll page that uses the GitHub API to display all our repos as well as a list of members with images and links and there are a few reasons why we made this switch:</p>
<ul>
<li>Jekyll is built-in GitHub pages</li>
<li>Jekyll is easy-to-learn and easy to maintain</li>
<li>No-Database handling of Data (see <a href="https://github.com/bullgit/bullgit.github.io/blob/master/_data/members.yml">the list of members we use</a>)</li>
<li>Everyone can clone the repo and run it locally</li>
</ul>
<p>So basically, as soon as you have a Project on GitHub or an organization like <a href="http://twitter.com/bullgit">bullgit</a> you can use the power of Jekyll to make your page easy to use and easy to change even for new members. We don&rsquo;t even use the Blog function of Jekyll (yet), we just have a front-page rendered with some Ajax to load all the Repos.</p>
<h3 id="the-basic-jekyll-code">The basic Jekyll code</h3>
<p>As I always like to remember in Jekyll posts: Jekyll builds static HTML pages but isn&rsquo;t that static at all. There is a lot of dynamics because files can be included into others, layouts are defined through the <a href="http://kevingimbel.com/jekyll-guide/first-page/">Front Matter</a> and you&rsquo;re basically free to create whatever Front Matter and Data you want.</p>
<p>The <code>index.html</code> looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">    --<span style="color:#e6db74">-
</span><span style="color:#e6db74">    layout: front-page</span>
    <span style="color:#66d9ef">title</span>: 
    ---
</code></pre></div><p>That&rsquo;s it, the whole structure is loaded from a Layout file based in <code>/_layouts/</code>, this file is called <code>front-page.html</code>. This <strong>only</strong> holds the <code>&lt;body&gt;</code> content for the front-page, the header and footer are - equal like you&rsquo;d do it in PHP or other languages - included from <code>header.html</code> and <code>footer.html</code> on every page. So even though it is &ldquo;static&rdquo;, when you change <code>header.html</code> all files will get updated and the new header is available everywhere.</p>
<p>You can work like this, with <code>{% include file.html %}</code> and Layouts in the Front Matter for every file and kind of content you like. It is even possible to create a <a href="http://kevingimbel.com/atom.xml">atom.xml</a> that serves people wo like to subscribe to your posts.</p>
<p>However, back to the bullgit. I discovered a awesome feature about Jekyll I didn&rsquo;t knew before: Data handling. When you create a folder called <code>_data</code> in your root directory you can put every kind of text-based data inside a *.yml file and load it in every page of your site.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#75715e"># let&#39;s assume this is members.yml</span>
- <span style="color:#66d9ef">name</span>: Tim
  <span style="color:#66d9ef">twitter</span>: timpietrusky
  
  <span style="color:#66d9ef">github</span>: timpietrusky
  <span style="color:#66d9ef">codepen</span>: timpietrusky
  <span style="color:#66d9ef">gravatar</span>: http://www.gravatar.com/avatar/13a9550a854af911366d9f5deb785cd6?s=<span style="color:#ae81ff">200</span>

- <span style="color:#66d9ef">name</span>: Max
  <span style="color:#66d9ef">twitter</span>: MyXoToD
  
  <span style="color:#66d9ef">github</span>: myxotod
  <span style="color:#66d9ef">codepen</span>: MyXoToD
  <span style="color:#66d9ef">gravatar</span>: http://www.gravatar.com/avatar/a284083f6f4f9446723adf3b97b90151?s=<span style="color:#ae81ff">200</span>

- <span style="color:#66d9ef">name</span>: Kevin
  <span style="color:#66d9ef">twitter</span>: _kevinatari
  
  <span style="color:#66d9ef">github</span>: kevingimbel
  <span style="color:#66d9ef">codepen</span>: kevingimbel
  <span style="color:#66d9ef">gravatar</span>: http://www.gravatar.com/avatar/6d391d8c3a528122f3f6c991821350ac?s=<span style="color:#ae81ff">200</span>  
</code></pre></div><p>After the file is saved you can loop through its content like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{% for member in site.data.member %}
    &lt;<span style="color:#f92672">h3</span>&gt;{{ member.name }}&lt;/<span style="color:#f92672">h3</span>&gt;
    &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://twitter.com/{{member.twitter}}&#34;</span>&gt;{{ member.twitter }}&lt;/<span style="color:#f92672">a</span>&gt;
    &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ member.url }}&#34;</span>&gt; {{ member.url }} &lt;/<span style="color:#f92672">a</span>&gt;
    &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://codepen.io/{{ member.codepen }}&#34;</span>&gt;{{ member.codepen }}&lt;/<span style="color:#f92672">a</span>&gt;
{% endfor %}
{% endraw %}
</code></pre></div><p>That&rsquo;s it, the result is a <code>h3</code> for every member holding its name and 3 links holding the Twitter, Personal Website and CodePen URL, this way new members can be added easily - only one of us has to edit the <code>members.yml</code> file and the page gets updated a few seconds after.</p>
<h3 id="github-api">GitHub API</h3>
<p>As I mentioned above we&rsquo;re using GitHub&rsquo;s API to get all our repos on the front-page. This was pretty easy to be honest, even for a JavaScript and API beginner like I am.</p>
<p>As I always do I avoided jQuery for this because I think it is a waste of Requests to load jQuery if I only use a minimal of its functionality. So I wrote the Ajax request by hand. The comments describe what goes one.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#75715e">// Loading a new Ajax Request and saving it
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// to the variable xml
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">xml</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">XMLHttpRequest</span>();

    <span style="color:#75715e">// opening the connection to GitHub&#39;s REPO API
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Method: GET
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Source 
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Asynchronous: false 
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// For some reasons asynch: true results doubled results
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">xml</span>.<span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;GET&#34;</span>, <span style="color:#e6db74">&#34;https://api.github.com/orgs/bullgit/repos&#34;</span>, <span style="color:#66d9ef">false</span>);

    <span style="color:#75715e">// when the state changed (data received )
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">xml</span>.<span style="color:#a6e22e">onreadystatechange</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
        <span style="color:#75715e">// controller for the grid system
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">j</span>;
        <span style="color:#75715e">// we take the response
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">xml</span>.<span style="color:#a6e22e">responseText</span>;
        <span style="color:#75715e">// put it into a new var and parse it 
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">res</span>);

        
        <span style="color:#75715e">// then run over ALL THE BULLGIT
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// running reverse because github goes from oldest to newest
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span> ) {

            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">url</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;homepage&#39;</span>] <span style="color:#f92672">===</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;homepage&#39;</span>] <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;&#39;</span> )
                      <span style="color:#f92672">?</span> <span style="color:#e6db74">&#39;https://github.com/&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;full_name&#39;</span>] 
                      <span style="color:#f92672">:</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;homepage&#39;</span>]; 

            <span style="color:#75715e">// if it&#39;s the first item
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">===</span> <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) {
                <span style="color:#75715e">// create a layout for the first featured project
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">layout</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&lt;article class=&#39;content--wrap  featured--article&#39;&gt;&#34;</span> <span style="color:#f92672">+</span>
                         <span style="color:#e6db74">&#34;&lt;h2&gt;&#34;</span> <span style="color:#f92672">+</span>
                            <span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;&lt;a href=&#34;%s&#34;&gt;%s&lt;/a&gt;&#39;</span>, <span style="color:#a6e22e">url</span>, <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;name&#39;</span>]) <span style="color:#f92672">+</span> 
                        <span style="color:#e6db74">&#34;&lt;/h2&gt;&#34;</span> <span style="color:#f92672">+</span>
                            <span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;&lt;p&gt;%s&lt;/p&gt;&#39;</span>, <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;description&#39;</span>]) <span style="color:#f92672">+</span>
                         <span style="color:#e6db74">&#34;&lt;/article&gt;&#34;</span>;

                <span style="color:#a6e22e">output</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#34;[data-js=featured-project]&#34;</span>); 

                <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;               
            } <span style="color:#66d9ef">else</span> {

              <span style="color:#75715e">// output = document.querySelector(&#34;[data-js=old-projects]&#34;);
</span><span style="color:#75715e"></span>
            <span style="color:#75715e">// create a layout for all other projects
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">layout</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&lt;article class=&#39;project&#39;&gt;&#34;</span> <span style="color:#f92672">+</span>
                         <span style="color:#e6db74">&#34;&lt;h3 class=&#39;project--headline&#39;&gt;&#34;</span> <span style="color:#f92672">+</span>
                            <span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;&lt;a href=&#34;%s&#34;&gt;%s&lt;/a&gt;&#39;</span>, <span style="color:#a6e22e">url</span>, <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;name&#39;</span>]) <span style="color:#f92672">+</span> 
                        <span style="color:#e6db74">&#34;&lt;/h3&gt;&#34;</span> <span style="color:#f92672">+</span>
                             <span style="color:#e6db74">&#34;&lt;p&gt;&#34;</span><span style="color:#f92672">+</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;description&#39;</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&lt;/p&gt;&#34;</span> <span style="color:#f92672">+</span>
                         <span style="color:#e6db74">&#34;&lt;/article&gt;&#34;</span>;

                <span style="color:#75715e">// select an output @TODO[Kevin]: Re-think logic...
</span><span style="color:#75715e"></span>              <span style="color:#66d9ef">switch</span>(<span style="color:#a6e22e">j</span>) {
                <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>
                  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">output</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#34;[data-column=&#39;1&#39;]&#34;</span>);
                  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;case 1: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; --- &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;name&#39;</span>])
                  <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span>;
                  <span style="color:#66d9ef">break</span>;
                <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span>
                  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">output</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#34;[data-column=&#39;2&#39;]&#34;</span>);
                  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;case 2: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; --- &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">i</span>][<span style="color:#e6db74">&#39;name&#39;</span>])
                  <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                  <span style="color:#66d9ef">break</span>;
                <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
                  <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
              }  
            }       
            <span style="color:#75715e">// and adding our brand-new bullshit to it.
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">output</span>.<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">layout</span>;
        }
    };

    <span style="color:#75715e">// sending data
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">xml</span>.<span style="color:#a6e22e">send</span>();
</code></pre></div><p>Another piece if JavaScript is used to add the Script after the DOM is fully loaded, as suggested by <a href="http://twitter.com/timpietrusky">Tim</a> to speed up the overall loading speed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#75715e">// Add a script element as a child of the body
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">downloadJSAtOnload</span>() {
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">element</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;script&#39;</span>);
        <span style="color:#a6e22e">element</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;assets/js/main.js&#39;</span>;
        document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">element</span>);
    }

    <span style="color:#75715e">// Check for browser support of event handling capability
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (window.<span style="color:#a6e22e">addEventListener</span>) {
        window.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#34;load&#34;</span>, <span style="color:#a6e22e">downloadJSAtOnload</span>, <span style="color:#66d9ef">false</span>);
    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (window.<span style="color:#a6e22e">attachEvent</span>) {
        window.<span style="color:#a6e22e">attachEvent</span>(<span style="color:#e6db74">&#34;onload&#34;</span>, <span style="color:#a6e22e">downloadJSAtOnload</span>);
    } <span style="color:#66d9ef">else</span> {
        window.<span style="color:#a6e22e">onload</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">downloadJSAtOnload</span>;
    }
</code></pre></div><p>Those are just a few of the benefits of Jekyll and, because we&rsquo;re a &ldquo;GitHub only&rdquo; organization we switched so it&rsquo;s easier to scale the site. Building a Blog would now only take a some time because we&rsquo;re already running Jekyll and just have to add one more layout. That&rsquo;s it, the basics of our brand-new <a href="http://bullg.it">bullgit</a> page.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/cms" term="cms" label="cms"/><category scheme="https://kevingimbel.de/tags/static_website" term="static_website" label="static_website"/><category scheme="https://kevingimbel.de/tags/jekyll" term="jekyll" label="jekyll"/></entry><entry><title type="html">Web Development in 2014</title><link href="https://kevingimbel.de/blog/2014/01/web-development-in-2014/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2013/11/pseudo-product-flags/?utm_source=atom_feed" rel="related" type="text/html" title="Pseudo Product Flags"/><link href="https://kevingimbel.de/blog/2013/10/custom-radio-buttons/?utm_source=atom_feed" rel="related" type="text/html" title="Custom Radio Buttons"/><link href="https://kevingimbel.de/blog/2013/10/from-0-to-sass/?utm_source=atom_feed" rel="related" type="text/html" title="From 0 To Sass"/><link href="https://kevingimbel.de/blog/2013/09/a-bit-sticky/?utm_source=atom_feed" rel="related" type="text/html" title="A bit sticky"/><id>https://kevingimbel.de/blog/2014/01/web-development-in-2014/</id><published>2014-01-02T00:00:00+00:00</published><updated>2014-01-02T00:00:00+00:00</updated><content type="html"><![CDATA[<p>As soon as you start to really dig into web development it feels like things would change daily - at least I feel that way. But there&rsquo;s one thing that I&rsquo;d like everyone to do in 2014: At least <strong>basic responsive web development</strong> to ensure your site - at least - looks good and is usable on whatever screen it will be displayed. There&rsquo;s nothing I hate more than scrolling websites around on my phone when I want to read an article (to be honest, I mostly leave the site and never come back). However, I&rsquo;ll give you a short look into basic responsive design/development patterns.</p>
<h3 id="planning">Planning</h3>
<p>First of all make sure what your site is about and what your content is like. <strong>Never hide content!</strong> Hiding content is the last resort and I prefer to avoid this. Make sure your site displays all the information you need the user to have in a order that makes sense: Do I want to scroll through your header, sidebar and a small advertisement area before I can find the article I&rsquo;m searching for? No, I don&rsquo;t. Good responsive, scalable design starts with mark up and there are a few tricks to archive a good looking, usable website. Before we start to look at the code: I&rsquo;ll focus on blog-like websites here and will cover more complex things later in another post.</p>
<h3 id="drop-the-mdomain">Drop the m.domain</h3>
<p>Some people may tell you that <code>m.domain.tld</code> is a great thing but it is not. Actually, it&rsquo;s the first and worst mistake you can make. There are a few reasons for this:</p>
<ul>
<li>you split your whole page into 2 domains (m.domain.tld and domain.tld)</li>
<li>you need doubled content</li>
<li>users on desktop don&rsquo;t get re-directed to the domain.tld when clicking on a m-dot link</li>
<li>when the windows gets resized your page doesn&rsquo;t fit the new viewport</li>
</ul>
<p>There are even more reasons to drop m-dot domains but I think those should make it clear. Another downside to &ldquo;smartphone&rdquo;-only optimization is the last point on the list: The resizing. I really like to re-size a page to half it&rsquo;s size on desktop so that I can, for example, follow a guide and do stuff inside my editor without switching between the windows all the time. This screenshot of <a href="http://spiegel.de">spiegel.de</a> shows the downside of &ldquo;mobile-only&rdquo; responsive design.
<img src="https://i.kevingimbel.me/sc/screenshot-16-46.png" alt="Screenshot of Spiegel Online, left the desktop version half it&rsquo;s size, right the mobile version" title="Screenshot of Spiegel Online, left the desktop version half it's size, right the mobile version"></p>
<p>So, the key of a good, flexible design is the CSS and the breakpoints. I prefer to create them in em instead of pixel or - even worse - exact screen sizes to target different devices. If you keep your head out of the iOS world you&rsquo;ll find hundreds of different screen sizes, would you target them all with exact pixels? I guess you wouldn&rsquo;t want to and wouldn&rsquo;t do it. So what else can we do? Support just a few devices, let&rsquo;s say a min-width of 600px? No. We&rsquo;ll use em instead and build a responsive site with 3 to 4 breakpoints like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">@<span style="color:#66d9ef">media</span> <span style="color:#f92672">all</span> <span style="color:#f92672">and</span> <span style="color:#f92672">(</span><span style="color:#f92672">min-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">80em</span><span style="color:#f92672">)</span> {
    <span style="color:#75715e">/* large screens */</span>
}

@<span style="color:#66d9ef">media</span> <span style="color:#f92672">all</span> <span style="color:#f92672">and</span> <span style="color:#f92672">(</span><span style="color:#f92672">max-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">80em</span><span style="color:#f92672">)</span> {
    <span style="color:#75715e">/* medium up to large */</span>
}

@<span style="color:#66d9ef">media</span> <span style="color:#f92672">all</span> <span style="color:#f92672">and</span> <span style="color:#f92672">(</span><span style="color:#f92672">max-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">50em</span><span style="color:#f92672">)</span> {
    <span style="color:#75715e">/* small screens as well as sites pinned to one-half of the screen */</span>
}

@<span style="color:#66d9ef">media</span> <span style="color:#f92672">all</span> <span style="color:#f92672">and</span> <span style="color:#f92672">(</span><span style="color:#f92672">max-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">30em</span><span style="color:#f92672">)</span> {
    <span style="color:#75715e">/* small devices like smartphones */</span>
}
</code></pre></div><p>I once created a page that only <a href="http://dev.kevingimbel.me/breakpoint/">shows the current breakpoint</a> and based on this I found that the above breakpoints are safe to use. However, just knowing the breakpoints isn&rsquo;t the goal. Next it comes to markup and grids while I&rsquo;ll use a early beta of Bullgrid, a Grid System I&rsquo;m working on with <a href="http://twitter.com/timpietrusky">Tim Pietrusky</a> at the moment. It&rsquo;s based on <a href="http://inuitcss.com/2012/12/building-grid-systems-with-inuit-css/">inuit CSS Grids</a> but moved into one file and re-written to use <a href="/em-vs-px">em instead of px</a>.</p>
<h3 id="the-markup">The Markup</h3>
<p>The first Demo Markup for this post is a simple blog with a large header, a content area and a sidebar as well as a footer.</p>
<!-- raw HTML omitted -->
<p>When you open the pen in <a href="http://codepen.io/kevingimbel/full/imvDF">fullscreen view</a> and resize it you can see that the sidebar moves underneath the article itself so that it is not in the way but visible to everyone who finish the article - in my opinion a good way to hide a sidebar on small screens because it doesn&rsquo;t require an extra click to open or see the sidebar and it is still there.</p>
<p>This all works with a Grid I&rsquo;ll talk about next and the way the markup is written.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- Wrapping the Grid inside the gw class --&gt;</span>
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;wrapper gw&#34;</span>&gt;
    &lt;<span style="color:#f92672">header</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;g one-whole  small-one-whole&#34;</span>&gt;
        <span style="color:#75715e">&lt;!-- the header always stays at 100% of the available width --&gt;</span>
    &lt;/<span style="color:#f92672">header</span>&gt;

    &lt;<span style="color:#f92672">main</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;g two-thirds  small-one-whole&#34;</span>&gt;
        <span style="color:#75715e">&lt;!--
</span><span style="color:#75715e">        The content takes 2/3 of the space
</span><span style="color:#75715e">        --&gt;</span>
    &lt;/<span style="color:#f92672">main</span>&gt;

    &lt;<span style="color:#f92672">aside</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;g one-third  small-one-whole&#34;</span>&gt;
        <span style="color:#75715e">&lt;!--
</span><span style="color:#75715e">        The Sidebar takes the remaining 1/3 of the space and because it&#39;s
</span><span style="color:#75715e">        below the content in the DOM order it moves below it when the page
</span><span style="color:#75715e">        get&#39;s resized. That&#39;s basically the &#34;Markup magic&#34;
</span><span style="color:#75715e">        --&gt;</span>
    &lt;/<span style="color:#f92672">aside</span>&gt;

    &lt;<span style="color:#f92672">footer</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;g one-whole&#34;</span>&gt;
        <span style="color:#75715e">&lt;!-- Again, one-whole = all available width --&gt;</span>
    &lt;/<span style="color:#f92672">footer</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
</code></pre></div><p>You may wonder what this <code>small-one-whole</code> thing does? I&rsquo;ll cover that next!</p>
<h3 id="the-grid">The Grid</h3>
<p>As mentioned above I&rsquo;m using an early beta of Bullgrid. However, the best thing about this grid is that it is re-usable, easy to understand and you can see the behavior of elements inside the markup. Here&rsquo;s an example.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">article</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;g one-third  medium-one-half  small-one-whole&#34;</span>&gt;
    <span style="color:#75715e">&lt;!-- Article 1 --&gt;</span>
&lt;/<span style="color:#f92672">article</span>&gt;

&lt;<span style="color:#f92672">article</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;g one-third  medium-one-half  small-one-whole&#34;</span>&gt;
    <span style="color:#75715e">&lt;!-- Article 2 --&gt;</span>
&lt;/<span style="color:#f92672">article</span>&gt;

&lt;<span style="color:#f92672">article</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;g one-third  medium-one-half  small-one-whole&#34;</span>&gt;
    <span style="color:#75715e">&lt;!-- Article 3 --&gt;</span>
&lt;/<span style="color:#f92672">article</span>&gt;
</code></pre></div><p>So the above results in something similar to this.</p>
<!-- raw HTML omitted -->
<p>As you can see the article&rsquo;s width is always adjusted to the width of the screen and it is completly readable inside the code.</p>
<p>The hearth of this grid is the breakpoint mixin you can see below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">@<span style="color:#66d9ef">mixin</span> <span style="color:#f92672">breakpoint</span><span style="color:#f92672">($</span><span style="color:#f92672">point</span><span style="color:#f92672">)</span> {
  @<span style="color:#66d9ef">if</span> <span style="color:#f92672">$</span><span style="color:#f92672">point</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;large&#34;</span> {
    @<span style="color:#66d9ef">media</span> <span style="color:#f92672">all</span> <span style="color:#f92672">and</span> <span style="color:#f92672">(</span><span style="color:#f92672">min-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">80em</span><span style="color:#f92672">)</span> {
      @<span style="color:#66d9ef">content</span>;
    }
  }

  @<span style="color:#66d9ef">if</span> <span style="color:#f92672">$</span><span style="color:#f92672">point</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;medium&#34;</span> {
    @<span style="color:#66d9ef">media</span> <span style="color:#f92672">all</span> <span style="color:#f92672">and</span> <span style="color:#f92672">(</span><span style="color:#f92672">max-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">80em</span><span style="color:#f92672">)</span> {
      @<span style="color:#66d9ef">content</span>;
    }
  }

  @<span style="color:#66d9ef">if</span> <span style="color:#f92672">$</span><span style="color:#f92672">point</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;small&#34;</span> {
    @<span style="color:#66d9ef">media</span> <span style="color:#f92672">all</span> <span style="color:#f92672">and</span> <span style="color:#f92672">(</span><span style="color:#f92672">max-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">30em</span><span style="color:#f92672">)</span> {
      @<span style="color:#66d9ef">content</span>;
    }
  }
}
</code></pre></div><p>This mixin can be used like</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">    .<span style="color:#a6e22e">my-class</span> {
        <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">50</span><span style="color:#66d9ef">%</span>;

        <span style="color:#960050;background-color:#1e0010">@include</span> <span style="color:#960050;background-color:#1e0010">breakpoint(small)</span> <span style="color:#960050;background-color:#1e0010">{</span>
            <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
        }
    <span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>So when the breakpoint small is triggered <code>my-class</code> will have a width of 100% instead of 50%. Quite a lot to write in case of the grid right? <a href="http://csswizardry.com/">Harry Roberts</a> has a handy <code>grid-setup()</code> SCSS function that we re-used for bullgrid. It looks as followed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">@<span style="color:#66d9ef">mixin</span> <span style="color:#f92672">grid-setup</span><span style="color:#f92672">($</span><span style="color:#f92672">namespace</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">)</span> {

  <span style="color:#75715e">/*
</span><span style="color:#75715e">   * Hidden
</span><span style="color:#75715e">   */</span>
  <span style="color:#f92672">.</span><span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#960050;background-color:#1e0010">$namespace</span>}<span style="color:#f92672">hidden</span> {
    <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">none</span>;
  }


  <span style="color:#75715e">/**
</span><span style="color:#75715e">   * Whole
</span><span style="color:#75715e">   */</span>
  <span style="color:#f92672">.</span><span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#960050;background-color:#1e0010">$namespace</span>}<span style="color:#f92672">one-whole</span> {
    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
  }


  <span style="color:#75715e">/**
</span><span style="color:#75715e">   * Halves
</span><span style="color:#75715e">   */</span>
  <span style="color:#f92672">.</span><span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#960050;background-color:#1e0010">$namespace</span>}<span style="color:#f92672">one-half</span> {
    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">50</span><span style="color:#66d9ef">%</span>;
  }


  <span style="color:#75715e">/**
</span><span style="color:#75715e">   * Thirds
</span><span style="color:#75715e">   */</span>
  <span style="color:#f92672">.</span><span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#960050;background-color:#1e0010">$namespace</span>}<span style="color:#f92672">one-third</span> {
    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">33.333</span><span style="color:#66d9ef">%</span>;
  }
  <span style="color:#f92672">.</span><span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#960050;background-color:#1e0010">$namespace</span>}<span style="color:#f92672">two-thirds</span> {
    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">66.666</span><span style="color:#66d9ef">%</span>;
  }


  <span style="color:#75715e">/**
</span><span style="color:#75715e">   * Quarters
</span><span style="color:#75715e">   */</span>
  <span style="color:#f92672">.</span><span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#960050;background-color:#1e0010">$namespace</span>}<span style="color:#f92672">one-quarter</span> {
    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">25</span><span style="color:#66d9ef">%</span>;
  }
  <span style="color:#f92672">.</span><span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#960050;background-color:#1e0010">$namespace</span>}<span style="color:#f92672">two-quarters</span> {
    <span style="color:#960050;background-color:#1e0010">@extend</span> <span style="color:#960050;background-color:#1e0010">.#{$namespace</span>}<span style="color:#f92672">one-half</span><span style="color:#f92672">;</span>
  }
  <span style="color:#f92672">.</span><span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#960050;background-color:#1e0010">$namespace</span>}<span style="color:#f92672">three-quarters</span> {
    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">75</span><span style="color:#66d9ef">%</span>;
  }

<span style="color:#75715e">/*
</span><span style="color:#75715e">    and so on....
</span><span style="color:#75715e">
</span><span style="color:#75715e">*/</span>

  <span style="color:#f92672">.</span><span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#960050;background-color:#1e0010">$namespace</span>}<span style="color:#f92672">eleven-twelfths</span> {
    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">91.666</span><span style="color:#66d9ef">%</span>;
  }
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>To set up the <code>small-</code>, <code>medium-</code> and <code>large-</code> grid we use <code>grid-setup</code> combined with <code>breakpoint</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">@<span style="color:#66d9ef">include</span> <span style="color:#f92672">breakpoint</span><span style="color:#f92672">(</span><span style="color:#f92672">large</span><span style="color:#f92672">)</span>{
  @<span style="color:#66d9ef">include</span> <span style="color:#f92672">grid-setup</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;large-&#34;</span><span style="color:#f92672">)</span>;
}

@<span style="color:#66d9ef">include</span> <span style="color:#f92672">breakpoint</span><span style="color:#f92672">(</span><span style="color:#f92672">medium</span><span style="color:#f92672">)</span>{
  @<span style="color:#66d9ef">include</span> <span style="color:#f92672">grid-setup</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;medium-&#34;</span><span style="color:#f92672">)</span>;
}

@<span style="color:#66d9ef">include</span> <span style="color:#f92672">breakpoint</span><span style="color:#f92672">(</span><span style="color:#f92672">small</span><span style="color:#f92672">)</span>{
  @<span style="color:#66d9ef">include</span> <span style="color:#f92672">grid-setup</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;small-&#34;</span><span style="color:#f92672">)</span>;
}
</code></pre></div><p>Once the grid is setup we can use all the different combinations and prefix them with <code>large-</code>,<code>meduim-</code> or <code>small-</code>. Basically that&rsquo;s it what I want to say about responsive development to this point. I think it is important to stop thinking in different categories like &ldquo;mobile&rdquo;, &ldquo;desktop&rdquo;, &ldquo;TV&rdquo; or whatever - it&rsquo;s more important to see a bunch of screens and devices that have a specific width you need to target with your breakpoints. Also I think every website you create this year should be responsive. There&rsquo;s no excuse anymore to do a non-responsive website. It should be a standard. So as a developer in a design team you should talk to your designers to keep responsive design in mind when making screen-designs. The Internet has become a canvas with a lot of sizes and we, as the artist, have to re-think the way we paint on it.</p>
<p>I appreciate your opinion and critic <a href="http://twitter.com/_kevinatari">@_kevinatari</a> or via <a href="/imprint">eMail</a>.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/thoughts" term="thoughts" label="thoughts"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/css" term="css" label="css"/></entry><entry><title type="html">Pseudo Product Flags</title><link href="https://kevingimbel.de/blog/2013/11/pseudo-product-flags/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2013/10/custom-radio-buttons/?utm_source=atom_feed" rel="related" type="text/html" title="Custom Radio Buttons"/><link href="https://kevingimbel.de/blog/2013/10/from-0-to-sass/?utm_source=atom_feed" rel="related" type="text/html" title="From 0 To Sass"/><link href="https://kevingimbel.de/blog/2013/09/a-bit-sticky/?utm_source=atom_feed" rel="related" type="text/html" title="A bit sticky"/><id>https://kevingimbel.de/blog/2013/11/pseudo-product-flags/</id><published>2013-11-24T00:00:00+00:00</published><updated>2013-11-24T00:00:00+00:00</updated><content type="html"><![CDATA[<p>For a recent client Project I had to create Product Flags that are displayed at the top of each product. The Flags should have different colors and different values (which also have different lengths). The values are applied via the <code>data</code> Attribute and the colors are also controlled via a data Attribute. The &ldquo;Problem&rdquo; with this task was that it&rsquo;s not only a few different length, it&rsquo;s a multi-language system and therefore can end up in a lot of different width of the product flags - a &ldquo;fixed&rdquo; solution, like applying a <code>max-width</code> of let&rsquo;s say 20em, isn&rsquo;t the best solution for this so I ended up creating a flexible solution.</p>
<h3 id="the-setup">The Setup</h3>
<p>First of all I had a Product and a <code>div</code> that holds the flag (in this example &ldquo;Tag&rdquo;).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">article</span>&gt;
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;tag&#34;</span> <span style="color:#a6e22e">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#a6e22e">data-tagname</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;STAR WARS&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
  &lt;<span style="color:#f92672">hgroup</span>&gt;
    &lt;<span style="color:#f92672">h2</span>&gt;Awesome Star Wars Cup&lt;/<span style="color:#f92672">h2</span>&gt;
      &lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.getdigital.de/web/getdigital/gfx/products/__generated__resized/1100x1100/R2D2_Relief_Mug_Titel.jpg&#34;</span> <span style="color:#a6e22e">alt</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span> /&gt;
  &lt;/<span style="color:#f92672">hgroup</span>&gt;
  &lt;<span style="color:#f92672">p</span>&gt;(img via &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.getdigital.de/R2D2-3D-Relief-Becher.html&#34;</span>&gt;getDigital.de&lt;/<span style="color:#f92672">a</span>&gt;)&lt;/<span style="color:#f92672">p</span>&gt;
&lt;/<span style="color:#f92672">article</span>&gt;
</code></pre></div><p>The <code>data-id</code> controls the color of the tag and the <code>data-tagname</code> controls the content of it. In the real-world example they&rsquo;re applied via a Content Management System and, as I said before, can vary in length. The HTML Job is done with this setup and now comes the most fun part: The (S)CSS.</p>
<h3 id="css">CSS</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">  .<span style="color:#a6e22e">tag</span> {
    <span style="color:#66d9ef">width</span>:<span style="color:#66d9ef">auto</span>;
    <span style="color:#66d9ef">height</span>:<span style="color:#66d9ef">auto</span>;
    <span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">absolute</span>;
    <span style="color:#66d9ef">top</span>:<span style="color:#ae81ff">-1</span><span style="color:#66d9ef">em</span>;
    <span style="color:#66d9ef">left</span>:<span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">background</span>:<span style="color:#ae81ff">#8e44ad</span>; <span style="color:#960050;background-color:#1e0010">//</span> <span style="color:#960050;background-color:#1e0010">standard</span> <span style="color:#960050;background-color:#1e0010">background</span> <span style="color:#960050;background-color:#1e0010">if</span> <span style="color:#960050;background-color:#1e0010">there&#39;s</span> <span style="color:#960050;background-color:#1e0010">no</span> <span style="color:#960050;background-color:#1e0010">data-id</span>
    <span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">.5</span><span style="color:#66d9ef">em</span>;
}
</code></pre></div><p>The basic tag should be position absolute on the left of the article and <code>-1em</code> on top of the article (this comes because the article has a padding of 1.5em and I want it to be half the way out of the article container). So far there is a tag with auto width and auto height. With the next snippet we&rsquo;ll get the data-tagname inside out pseudo element.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">    <span style="color:#f92672">&amp;</span>:<span style="color:#a6e22e">before</span> {
      <span style="color:#66d9ef">content</span>:attr(data<span style="color:#f92672">-</span>tagname);
    }
</code></pre></div><p>and a small triangle behind it</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">    <span style="color:#f92672">&amp;</span>:<span style="color:#a6e22e">after</span> {
      <span style="color:#66d9ef">content</span>:<span style="color:#e6db74">&#34;&#34;</span>;
      <span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">absolute</span>;
      <span style="color:#66d9ef">left</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
      <span style="color:#66d9ef">top</span>:<span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">border-top</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span> <span style="color:#66d9ef">solid</span> <span style="color:#66d9ef">transparent</span>;
      <span style="color:#66d9ef">border-left</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span> <span style="color:#66d9ef">solid</span> <span style="color:#a6e22e">darken</span>(<span style="color:#ae81ff">#8e44ad</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>); <span style="color:#960050;background-color:#1e0010">//</span> <span style="color:#960050;background-color:#1e0010">fallback</span> <span style="color:#960050;background-color:#1e0010">if</span> <span style="color:#960050;background-color:#1e0010">no</span> <span style="color:#960050;background-color:#1e0010">data-id</span> <span style="color:#960050;background-color:#1e0010">is</span> <span style="color:#960050;background-color:#1e0010">given</span>
    }
</code></pre></div><p>Success! The first basic tag is finished, but why the <code>data-id</code> you may ask? Because they make the magic! As I said before the color is controlled via <code>data-id</code> and here&rsquo;s how this works:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">&amp;[</span><span style="color:#f92672">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span><span style="color:#f92672">]</span> {
  <span style="color:#66d9ef">background</span>:<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-1</span>;
    <span style="color:#960050;background-color:#1e0010">&amp;:after</span> <span style="color:#960050;background-color:#1e0010">{</span>
      <span style="color:#66d9ef">border-left-color</span>:<span style="color:#a6e22e">darken</span>(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-1</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);
  }
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>If you repeat this for all your <code>data-id</code>s and colors you&rsquo;ll end up having some sweet Product Flags. The whole code for my product flags looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">  .<span style="color:#a6e22e">tag</span> {
    <span style="color:#66d9ef">width</span>:<span style="color:#66d9ef">auto</span>;
    <span style="color:#66d9ef">height</span>:<span style="color:#66d9ef">auto</span>;
    <span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">absolute</span>;
    <span style="color:#66d9ef">top</span>:<span style="color:#ae81ff">-1</span><span style="color:#66d9ef">em</span>;
    <span style="color:#66d9ef">left</span>:<span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">background</span>:<span style="color:#ae81ff">#8e44ad</span>; <span style="color:#75715e">/* fallback if no data-id is given */</span>
    <span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">.5</span><span style="color:#66d9ef">em</span>;

    <span style="color:#960050;background-color:#1e0010">&amp;:before</span> <span style="color:#960050;background-color:#1e0010">{</span>
      <span style="color:#66d9ef">content</span>:attr(data<span style="color:#f92672">-</span>tagname);
    }
    <span style="color:#f92672">//</span> <span style="color:#f92672">there</span><span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">s</span> <span style="color:#f92672">always</span> <span style="color:#f92672">a</span> <span style="color:#f92672">triangle</span> <span style="color:#f92672">behind</span> <span style="color:#f92672">it</span>
    <span style="color:#f92672">&amp;</span>:<span style="color:#a6e22e">after</span> {
      <span style="color:#66d9ef">content</span>:<span style="color:#e6db74">&#34;&#34;</span>;
      <span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">absolute</span>;
      <span style="color:#66d9ef">left</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
      <span style="color:#66d9ef">top</span>:<span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">border-top</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span> <span style="color:#66d9ef">solid</span> <span style="color:#66d9ef">transparent</span>;
      <span style="color:#66d9ef">border-left</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span> <span style="color:#66d9ef">solid</span> <span style="color:#a6e22e">darken</span>(<span style="color:#ae81ff">#8e44ad</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);  <span style="color:#75715e">/* fallback if no data-id is given */</span>
    }


    <span style="color:#f92672">//</span> <span style="color:#f92672">the</span> <span style="color:#f92672">data-id</span> <span style="color:#f92672">controls</span> <span style="color:#f92672">the</span> <span style="color:#f92672">colors</span>
    <span style="color:#f92672">&amp;[</span><span style="color:#f92672">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span><span style="color:#f92672">]</span> {
      <span style="color:#66d9ef">background</span>:<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-1</span>;
      <span style="color:#960050;background-color:#1e0010">&amp;:after</span> <span style="color:#960050;background-color:#1e0010">{</span>
        <span style="color:#66d9ef">border-left-color</span>:<span style="color:#a6e22e">darken</span>(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-1</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);
      }
    <span style="color:#960050;background-color:#1e0010">}</span>

    <span style="color:#f92672">&amp;[</span><span style="color:#f92672">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2&#34;</span><span style="color:#f92672">]</span> {
      <span style="color:#66d9ef">background</span>:<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-2</span>;

      <span style="color:#960050;background-color:#1e0010">&amp;:after</span> <span style="color:#960050;background-color:#1e0010">{</span>
        <span style="color:#66d9ef">border-left-color</span>:<span style="color:#a6e22e">darken</span>(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-2</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);
      }
    <span style="color:#960050;background-color:#1e0010">}</span>


    <span style="color:#f92672">&amp;[</span><span style="color:#f92672">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;3&#34;</span><span style="color:#f92672">]</span> {
      <span style="color:#66d9ef">background</span>:<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-3</span>;

      <span style="color:#960050;background-color:#1e0010">&amp;:after</span> <span style="color:#960050;background-color:#1e0010">{</span>
        <span style="color:#66d9ef">border-left-color</span>:<span style="color:#a6e22e">darken</span>(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-3</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);
      }
    <span style="color:#960050;background-color:#1e0010">}</span>

    <span style="color:#f92672">&amp;[</span><span style="color:#f92672">data-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;4&#34;</span><span style="color:#f92672">]</span> {
      <span style="color:#66d9ef">background</span>:<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-4</span>;

      <span style="color:#960050;background-color:#1e0010">&amp;:after</span> <span style="color:#960050;background-color:#1e0010">{</span>
        <span style="color:#66d9ef">border-left-color</span>:<span style="color:#a6e22e">darken</span>(<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">color</span><span style="color:#ae81ff">-4</span>,<span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);
      }
    <span style="color:#960050;background-color:#1e0010">}</span>
    <span style="color:#960050;background-color:#1e0010">}</span> <span style="color:#f92672">//</span> <span style="color:#f92672">tag</span>
</code></pre></div><p>A working example can be found <a href="http://codepen.io/kevingimbel/pen/Hpazh">here on CodePen</a>. Special thanks to <a href="http://getdigital.de">getDigital.de</a> for letting me use some of their nerdy Product Images! May the force be with you.</p>
<p>In case you&rsquo;ve any questions feel free to <a href="http://twitter.com/_kevinatari">tweet me</a> or comment on the <a href="http://codepen.io/kevingimbel/pen/Hpazh">Pen</a>.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial"/><category scheme="https://kevingimbel.de/tags/css" term="css" label="css"/><category scheme="https://kevingimbel.de/tags/interface" term="interface" label="interface"/><category scheme="https://kevingimbel.de/tags/tutorial" term="tutorial" label="tutorial"/></entry><entry><title type="html">To infinity and beyond</title><link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2013/10/i-js/?utm_source=atom_feed" rel="related" type="text/html" title="i-js"/><id>https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/</id><published>2013-11-18T00:00:00+00:00</published><updated>2013-11-18T00:00:00+00:00</updated><content type="html"><![CDATA[<p>While I was re-designing my Website I decided to finally add some JavaScript to it. I&rsquo;m learning JavaScript for like 2 months now and - to be honest - I finally understand most of the things I&rsquo;m doing. Yesterday night&rsquo;s topic was a &ldquo;Back to Top&rdquo; Button written in Vanilla JS. Actually the code behind it is <em>kinda</em> simple, however, I wrote an endless function that got to infinity and beyond (that&rsquo;s where the title comes from. I&rsquo;m so funny.)</p>
<p>Because I still like to google around while writing JavaScript I stumbled upon a function that looked okay to me.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">scrollToTop</span>() {
  <span style="color:#66d9ef">if</span> (document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">scrollTop</span><span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> document.<span style="color:#a6e22e">documentElement</span>.<span style="color:#a6e22e">scrollTop</span><span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>){
    window.<span style="color:#a6e22e">scrollBy</span>(<span style="color:#ae81ff">0</span>,<span style="color:#f92672">-</span><span style="color:#ae81ff">50</span>);
    <span style="color:#a6e22e">timeOut</span><span style="color:#f92672">=</span><span style="color:#a6e22e">setTimeout</span>(<span style="color:#e6db74">&#39;scrollToTop()&#39;</span>,<span style="color:#ae81ff">10</span>);
  }
  <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">clearTimeout</span>(<span style="color:#a6e22e">timeOut</span>);
}
</code></pre></div><p>The problem with this one was: It didn&rsquo;t work. So I looked around and found <code>setInterval()</code> which seemed to me a bit like <code>setTimeout</code> and - in my opinion - would mix perfect with <code>scrollBy(x,y)</code>. I was right, hurray!</p>
<p>So my function then looked a bit like this (I&rsquo;m not exactly sure, it was kinda late already).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">scrollToTop</span>() {
    <span style="color:#66d9ef">if</span>(window.<span style="color:#a6e22e">scrollY</span><span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>) {
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">scrollBack</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span>() {
            window.<span style="color:#a6e22e">scrollBy</span>(<span style="color:#ae81ff">0</span>,<span style="color:#f92672">-</span><span style="color:#ae81ff">50</span>);
        },<span style="color:#ae81ff">10</span>);
    } <span style="color:#66d9ef">else</span> {
      <span style="color:#a6e22e">clearInterval</span>(<span style="color:#a6e22e">scrollBack</span>);
    };
  }   
</code></pre></div><p>I applied the function to a button, the page scrolled up and I was happy. I <a href="https://twitter.com/_kevinatari/status/402189289422721024">tweeted</a> about it just to find out that my Interval wasn&rsquo;t cleared and I <a href="https://twitter.com/_kevinatari/status/402190105533640704">could never scroll down again</a> after the function was triggered. Yeah! Awesome.</p>
<p>Well, I thought more about it and read again about <code>setInterval</code> and - most important - the actual object I&rsquo;m checking. <code>scrollY</code> was the right direction and I decided it must be the Interval that&rsquo;s wrong. I was right and came up with this sweet function!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// notice: backTop is my back to top button!
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">backTop</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#34;click&#34;</span>,<span style="color:#66d9ef">function</span>() {
    <span style="color:#75715e">// setting an interval 
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">toTop</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span>() {
      <span style="color:#75715e">// if we&#39;re not on top of the page
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span>(window.<span style="color:#a6e22e">scrollY</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
          <span style="color:#75715e">// we scroll back to the top [scrollBy(x,y)]
</span><span style="color:#75715e"></span>        window.<span style="color:#a6e22e">scrollBy</span>(<span style="color:#ae81ff">0</span>,<span style="color:#f92672">-</span><span style="color:#ae81ff">50</span>);

            <span style="color:#75715e">// in case we&#39;re at the top (window.scrollY = 0)
</span><span style="color:#75715e"></span>      } <span style="color:#66d9ef">else</span> {
              <span style="color:#75715e">// clear the interval
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">clearInterval</span>(<span style="color:#a6e22e">toTop</span>);
      }
    },<span style="color:#ae81ff">25</span>); <span style="color:#75715e">// the delay between the steps to go back to top. The smaller the number, the slower it goes
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// prevent the click to reload the page
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">preventDefault</span>();
  }); <span style="color:#75715e">// end of the Back to Top function
</span></code></pre></div><p>That&rsquo;s it! My sweet little Back To Top Function. I&rsquo;m sure there are points that could be improved and I&rsquo;m sure one could add easing to it (I already got something in mind) but for now I&rsquo;m happy with it.</p>
<p>(Also check out what else I discovered yesterday. It&rsquo;s an <a href="https://twitter.com/_kevinatari/status/402197154539651072">YouTube Eater Egg</a>!)</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/tags/vanilla_js" term="vanilla_js" label="vanilla_js"/></entry><entry><title type="html">Custom Radio Buttons</title><link href="https://kevingimbel.de/blog/2013/10/custom-radio-buttons/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2013/10/from-0-to-sass/?utm_source=atom_feed" rel="related" type="text/html" title="From 0 To Sass"/><link href="https://kevingimbel.de/blog/2013/09/a-bit-sticky/?utm_source=atom_feed" rel="related" type="text/html" title="A bit sticky"/><id>https://kevingimbel.de/blog/2013/10/custom-radio-buttons/</id><published>2013-10-28T00:00:00+00:00</published><updated>2013-10-28T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Today I thought about a project I had in mind for some time, it has to do with ratings of different contents and the first thing I thought about was: What&rsquo;s the easiest or best way to create a rating form with custom buttons (stars, hearts, whatever).</p>
<p>A few years ago I had to do this once and I remember doing it with an image and <code>background-position</code> but as of today I really love pseudo elements and &ldquo;Look-Ma-No-Image!&rdquo;. However I decided to use Icon Fonts this time and play around a bit with them. My HTML Markup is very simple:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">  &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;radio&#34;</span> <span style="color:#a6e22e">data-rate</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rating&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rating--star&#34;</span> /&gt;
  &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;radio&#34;</span> <span style="color:#a6e22e">data-rate</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rating&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rating--star&#34;</span> /&gt;
  &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;radio&#34;</span> <span style="color:#a6e22e">data-rate</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;3&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rating&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rating--star&#34;</span> /&gt;
  &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;radio&#34;</span> <span style="color:#a6e22e">data-rate</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;4&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rating&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rating--star&#34;</span> /&gt;
  &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;radio&#34;</span> <span style="color:#a6e22e">data-rate</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;5&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rating&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rating--star&#34;</span> /&gt;
</code></pre></div><p>That&rsquo;s it: A group of <code>radio inputs</code> representing a rating system with 1-5 possible choices. The CSS part is a little bit trickier (note that I&rsquo;m using Sass with SCSS Syntax!)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">rating--star</span> {
  <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#ff7711</span>;
  <span style="color:#960050;background-color:#1e0010">&amp;:before</span> <span style="color:#960050;background-color:#1e0010">{</span>
    <span style="color:#66d9ef">content</span>:<span style="color:#e6db74">&#34;\2605&#34;</span>;
    <span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">em</span>;
    <span style="color:#66d9ef">font-family</span>:entypo, <span style="color:#66d9ef">sans-serif</span>;
  }

  <span style="color:#f92672">&amp;</span>:<span style="color:#a6e22e">checked</span> <span style="color:#f92672">~</span> :<span style="color:#a6e22e">before</span> {
    <span style="color:#66d9ef">content</span>:<span style="color:#e6db74">&#34;\2606&#34;</span>;
  }

  <span style="color:#f92672">&amp;</span>:<span style="color:#a6e22e">focus</span> {
    <span style="color:#66d9ef">outline</span>:<span style="color:#ae81ff">0</span>;
  }
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>A small piece of code, yet it can seem complicated. I&rsquo;ll break it down a bit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">rating--star</span> {
  <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#ff7711</span>;

  <span style="color:#960050;background-color:#1e0010">@include</span> <span style="color:#960050;background-color:#1e0010">appearance(none)</span>;

  <span style="color:#960050;background-color:#1e0010">&amp;:before</span> <span style="color:#960050;background-color:#1e0010">{</span>
    <span style="color:#66d9ef">content</span>:<span style="color:#e6db74">&#34;\2605&#34;</span>;
    <span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">em</span>;
    <span style="color:#66d9ef">font-family</span>:entypo, <span style="color:#66d9ef">sans-serif</span>;
  }
</code></pre></div><p>The first part represents the class itself and the <code>:before</code> pseudo element that holds the icon (in this case a Star from the entypo icon font served via <a href="http://weloveiconfonts.com">We Love Icon Fonts</a>), I set the color on the element directly because the <code>:before</code> and <code>:checked ~ :before</code> are using the same color. <code>appearance:none;</code> removes the User Agent style from the input element or, in other words, &ldquo;hides&rdquo; the element.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"> <span style="color:#f92672">&amp;</span>:<span style="color:#a6e22e">checked</span> <span style="color:#f92672">~</span> :<span style="color:#a6e22e">before</span> {
    <span style="color:#66d9ef">content</span>:<span style="color:#e6db74">&#34;\2606&#34;</span>;
  }
</code></pre></div><p>The next line says &ldquo;when the input is <code>:checked</code> change the properties of <code>:before</code>&rdquo;. So when it is checked I want the filled Star to show up (&quot;\2606&rdquo;). Seems logical? It&rsquo;s not. <code>\2606</code> is the empty star. So the <code>&amp;:checked ~ :before</code> pseudo holds the icon that should be included if the button is not checked and the <code>:before</code> holds the checked (in this case filled) icon. This is because <code>:checked ~ :before</code> selects every element that is preceded of the <code>:checked</code> element. This comes handy because this also means all inputs display a filled star if we check the last star (and that&rsquo;s exactly what we want).</p>
<p>A live demo can be found on <a href="http://codepen.io/kevingimbel/pen/kwIgi">CodePen</a>.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/css" term="css" label="css"/><category scheme="https://kevingimbel.de/tags/interface" term="interface" label="interface"/><category scheme="https://kevingimbel.de/tags/design" term="design" label="design"/></entry><entry><title type="html">Ghost in the shell</title><link href="https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/</id><published>2013-10-16T00:00:00+00:00</published><updated>2013-10-16T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Finally <a href="http://ghost.org">Ghost</a> launched to the public! I waited for this CMS since I first heard of, at this time my blog was running on WordPress which always felt overloaded. WordPress has a lot of functions and stuff I don&rsquo;t need when publishing a few articles a month to the Internet. However, I switched to Jekyll as you may know and now there is Ghost. It felt like it&rsquo;d be my birthday while unpacking the *.zip file. Anyway, I want to write a small installation guide, tell you something about my first impressions and how theming with Ghost works.</p>
<p>Ghost runs on <a href="http://nodejs.org">Node.js</a> which is basically a installable version of <a href="https://code.google.com/p/v8/">Google Chrome&rsquo;s v8 JavaScript Engine</a>, in other words Ghost doesn&rsquo;t use PHP or Ruby to run it just needs a Node Process.</p>
<h3 id="installing-nodejs">Installing Node.js</h3>
<p>First of all you have to install Node.js from <a href="http://nodejs.org/">http://nodejs.org/</a>. Afterwards go back to your terminal and run the following</p>
<h3 id="installing-ghost">Installing Ghost</h3>
<p>Now you need to sign-up and download the Ghost source code from <a href="https://ghost.org/">https://ghost.org/</a>. Unpack the zip into the directory of your choice (mine is <code>var/www/</code>), open a terminal, navigate to the directory and enter the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># prefix with sudo on Ubuntu!</span>
$ npm install --production
</code></pre></div><p>After the installation process is finished run <code>$ npm start</code> to start the Node.js Server. Your brand-new Ghost site should now be running on 127.0.0.1:2368.</p>
<p>If you see the Ghost site navigate to 127.0.0.1:2368/ghost and sign-up (again) for your own local Ghost installation. You can, in fact, ignore the eMail warnings (or <a href="http://docs.ghost.org/mail">read this to set up your eMail Account</a>).
So far your Ghost page is running locally and you can start writing posts.</p>
<h3 id="themes">Themes</h3>
<p>Themes in Ghost are something completely new for me. They&rsquo;re using <a href="http://handlebarsjs.com/">Handlebars.js</a> which looks like <a href="http://docs.shopify.com/themes/liquid-basics">Liquid</a> used by Jekyll on first sight.</p>
<p>After I wrapped my head around Handlebars and the Ghost default Theme &ldquo;Casper&rdquo; I found it easy to manipulate and build my first Theme.
Basically Ghost can work with 3 layout files: post.hbs, default.hbs and index.hbs - they&rsquo;re pretty self-explaining though.</p>
<h4 id="indexhbs">index.hbs</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{{#post }}
  &lt;<span style="color:#f92672">article</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;post&#34;</span>&gt;
    &lt;<span style="color:#f92672">hgroup</span>&gt;
      &lt;<span style="color:#f92672">h2</span>&gt;{{{title}}}&lt;/<span style="color:#f92672">h2</span>&gt;
      {{#if author}}
        written by {{author.name}}
      {{/if}}
    &lt;/<span style="color:#f92672">hgroup</span>&gt;
  &lt;/<span style="color:#f92672">article</span>&gt;
{{/post}}
{% endraw %}
</code></pre></div><p>The above snippet simply outputs the title of the post and the author&rsquo;s name if one is given. A pretty neat thing about Handlebars is, that everything between <code>{{#post}}</code> and &lsquo;{{//post}}&rsquo; automatically gets pulled from the post it belongs to. As I mentioned above this looks a lot like Liquid as you can see in the <a href="http://kevingimbel.com/jekyll-guide/layouts/">first code example here</a>.</p>
<p>I&rsquo;ll not get into detail on how to style <code>post.hbs</code> because it is nearly the same. <code>default.hbs</code>, however, is a bit more interesting.</p>
<h4 id="defaulthbs">default.hbs</h4>
<p>First I thought this would be the &ldquo;default&rdquo; layout if no format is given (like in Jekyll) but it&rsquo;s a lot more important: <code>default.hbs</code> holds the entirely page and all the posts get included into it!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">html</span>&gt;
  &lt;<span style="color:#f92672">head</span>&gt;
    ...
  &lt;/<span style="color:#f92672">head</span>&gt;
  &lt;<span style="color:#f92672">body</span>&gt;
    # build your header and stuff here
    {}{{body}}{}
    # build your footer here
  &lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>The <code>body</code> handlebar is the point where another pages content gets included. To tell a layout that it will be included into another file you simply write <code>{{!&lt; default}}</code> in the first line of it.</p>
<p>This is a pretty handy feature I think. So far Ghost and building Themes for it is pretty easy and handy to use. You have to learn Handlebars to get the full potential out of it but that&rsquo;s OK I&rsquo;d say. However, I&rsquo;ll now show off some things that I don&rsquo;t like or found confusing (still locally, deploying to a server comes later!)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{{! Ghost outputs important scripts and data with this tag }}
{{ghost_foot}}
{% endraw %}
</code></pre></div><p>So Ghost, please tell me more about &ldquo;important data and scripts&rdquo;. I haven&rsquo;t found any file that contains this data or scripts and I wasn&rsquo;t sure if this tag is only needed for the Casper Theme or if it&rsquo;s important for other stuff. In the end I just left it there.</p>
<p>Beside this tag I found another, kinda self-explaining tag: <code>{{pagination}}</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{{!! After all the posts, we have the previous/next pagination links }}
{{pagination}}
{% endraw %}
</code></pre></div><p>Cool, so Ghost builds me a pagination! But wait, I&rsquo;d like to style it. So&hellip;where&rsquo;s the pagination layout? I searched it inside my themes directory (because I copy/pasted the Casper Theme to modify it) but there was no file that holds the pagination. After searching around for quite some time I found it inside <code>core/server/helper/tpl</code> - I have no idea why this helper is here. However, it&rsquo;s a <code>*.bhs</code> file so customizing it is the same as with any other file.</p>
<p>That&rsquo;s it on themes and structure for now, let&rsquo;s see how we get this Baby online!</p>
<h3 id="deploying">Deploying</h3>
<p>First of all you need two things:</p>
<ul>
<li>Time</li>
<li>A server
<ul>
<li>with SSH connection via Terminal</li>
<li>Node.js</li>
<li>Daemons</li>
<li>sqlite3</li>
</ul>
</li>
</ul>
<p>In before, I couldn&rsquo;t make Ghost running on my server and I&rsquo;m not sure why this is so. The Service is running, the logs say it&rsquo;s running, the subdomain works (checked with a index.html inside the Ghost Directory) but for whatever reasons nothing gets compiled.</p>
<p>I could tell you what exactly I did on my server but I&rsquo;d rather like to redirect you to some posts explaining the installation (all on <a href="https://uberspace.de">Uberspace.de</a> but most of it should work with your server, too).</p>
<ul>
<li>(DE) <a href="https://uberspace.de/dokuwiki/cool:ghost">Uberspace Wiki</a></li>
<li>(EN) <a href="http://christophvoigt.com/how-to-setup-ghost-on-uberspace-de/">How to Setup Ghost on Uberspace.de</a> by Christoph Voigt</li>
<li>(EN) <a href="http://ghost.jotbe.io/setting-up-ghost-on-uberspace/">Setting up Ghost in a Sub-Directory</a> by Jan Beilicke</li>
</ul>
<p>What I can tell so far is: If you&rsquo;re not familiar with working over SSH and logged-in via your terminal setting up Ghost is a pain in the ass. I&rsquo;m ashamed to say I wasn&rsquo;t able to get it running even thought the service itself <em>is</em> running as my Log-Files tell me.</p>
<p>The more I worked with Ghost on the server side one thing came to my mind: It&rsquo;s not just a blogging Software, it&rsquo;s made to sell hosting. As some other people already said it is a kinda smart decision to write a great Blog System that is not-so-easy to install so you can sell your own Hosting Services with it.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Non-Tech People will not be able to install Ghost on their servers, Ghost requires Node.js which isn&rsquo;t a default installation on servers yet (even though some have it), Ghost is at least locally fast and easy to setup. The Theme system with Handlebars is also pretty nice and they have the most beautiful back-end I saw so far.
Regardless of all the good aspects, overall I&rsquo;m disappointed by Ghost. I&rsquo;ll stick to Jekyll and GitHub Hosting. I&rsquo;ll try to deploy Ghost and work around with it just for the sake of learning something new but as engine to build my Blog it has not convinced me so far.</p>
<p>You may have noticed that the Title is a reference to <a href="http://de.wikipedia.org/wiki/Ghost_in_the_Shell">Ghost in the Shell</a> which is a great Manga from 1989.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/categories/backend" term="backend" label="backend"/><category scheme="https://kevingimbel.de/tags/cms" term="cms" label="cms"/><category scheme="https://kevingimbel.de/tags/nodejs" term="nodejs" label="nodejs"/></entry><entry><title type="html">From 0 To Sass</title><link href="https://kevingimbel.de/blog/2013/10/from-0-to-sass/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2013/09/a-bit-sticky/?utm_source=atom_feed" rel="related" type="text/html" title="A bit sticky"/><id>https://kevingimbel.de/blog/2013/10/from-0-to-sass/</id><published>2013-10-02T00:00:00+00:00</published><updated>2013-10-02T00:00:00+00:00</updated><content type="html"><![CDATA[<p>If you&rsquo;re a Front-End Developer you may have already heard about Pre-Processors such as <a href="http://sass-lang.com">Sass</a>, <a href="http://lesscss.org/">LESS</a> or <a href="http://learnboost.github.io/stylus/">Stylus</a>. It&rsquo;s fair to say that they&rsquo;re all good and which one you use is up to you or your team. I prefer Sass with the SCSS Syntax (= keeps semicolons and brackets).</p>
<p>Even though Pre-Processors are easy to use and setup some people are still confused: <em>Do I have to run them on a server? How do I install them? Why should I use them?</em> - I want to answer all these questions in this article: Getting from 0 to Sass in X Steps!</p>
<p><strong>Notice:</strong> This guide covers the installation on Linux and Mac only, for Windows support please take a look at <a href="http://www.impressivewebs.com/sass-on-windows/">this tutorial</a>.</p>
<h3 id="sass-summary">Sass summary</h3>
<p>Sass was build by <a href="http://www.hamptoncatlin.com/">Hampton Catlin</a> and <a href="http://nex-3.com/">Nathan Weizenbaum</a>. Since late 2008 <a href="http://chriseppstein.github.io/">Chris Eppstein</a> is also on board, he&rsquo;s also the creator of <a href="http://compass-style.org/">Compass</a> which is a CSS3 Framework for Sass (I&rsquo;ll cover Compass and other Frameworks for Sass later).</p>
<p>Sass enables you to use Variables, Functions and Mixins inside your CSS. This comes very handy because a stylesheet gets amazingly maintainable with variables and mixins.</p>
<p>Before we start I want you to notice something important about Sass: Sass runs on ruby so you have to install Ruby if it&rsquo;s not (Yeah Windows, I&rsquo;m looking in your direction!) - on Mac and Linux Ruby should be installed. All code blocks starting with <code>$</code> need to be inputed into a Terminal (without the <em>$</em>!). On OS X and Linux you may need to put a <code>sudo</code> command before every command prompt.</p>
<p>Simply check your ruby version by typing the following</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ruby --version
ruby 1.9.3p194 <span style="color:#f92672">(</span>2012-04-20 revision 35410<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>i686-linux<span style="color:#f92672">]</span>
</code></pre></div><h3 id="installation">Installation</h3>
<p>You&rsquo;ve maybe tried to install Sass previously and maybe it is still installed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># checking the installed Sass Version</span>
$ sass --version
<span style="color:#75715e"># If up to date the output (as of today, 10/2/13) is</span>
Sass 3.2.9 <span style="color:#f92672">(</span>Media Mark<span style="color:#f92672">)</span>
</code></pre></div><p>If you get an error such as &ldquo;command not found&rdquo; Sass is not installed, so we start from 0.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ gem install sass
</code></pre></div><p>Your Terminal will now show you the download and install process for Sass, depending on your internet connection this may take a while.
After things are finished we&rsquo;ll skip the step of testing Sass directly or using it on its own - trust me here, it&rsquo;s way better to install Compass first.</p>
<h3 id="compass">Compass</h3>
<p>Compass is a Framework for Sass that comes with a ton of build in Mixins and Functions that you&rsquo;ll love. I&rsquo;m using compass for every project - no matter if small or large.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># updating the system first so everything is running correctly</span>
$ gem update system
$ gem install compass
</code></pre></div><p>After compass is installed simply head over to your Local Web Direction (in my case this is <code>var/www/</code>) and run</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ compass create myproject
</code></pre></div><p>It doesn&rsquo;t matter what you call <code>myproject</code> - I&rsquo;ve only used this command once in my life. Anyway this will create a config.rb file that you should open next.</p>
<p>The <code>config.rb</code> is well commented, below you can see my file (just in case you don&rsquo;t edit the wrong file by accident)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#75715e"># Require any additional compass plugins here.</span>

<span style="color:#75715e"># Set this to the root of your project when deployed:</span>
http_path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/&#34;</span>
css_dir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;assets/css&#34;</span>
sass_dir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;assets/css&#34;</span>
images_dir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;assets/img&#34;</span>
javascripts_dir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;assets/js&#34;</span>

<span style="color:#75715e"># You can select your preferred output style here (can be overridden via the command line):</span>
<span style="color:#75715e"># output_style = :expanded or :nested or :compact or :compressed</span>

<span style="color:#75715e"># To enable relative paths to assets via compass helper functions. Uncomment:</span>
<span style="color:#75715e"># relative_assets = true</span>

<span style="color:#75715e"># To disable debugging comments that display the original location of your selectors. Uncomment:</span>
<span style="color:#75715e"># line_comments = false</span>


<span style="color:#75715e"># If you prefer the indented syntax, you might want to regenerate this</span>
<span style="color:#75715e"># project again passing --syntax sass, or you can uncomment this:</span>
<span style="color:#75715e"># preferred_syntax = :sass</span>
<span style="color:#75715e"># and then run:</span>
<span style="color:#75715e"># sass-convert -R --from scss --to sass sass scss &amp;&amp; rm -rf sass &amp;&amp; mv scss sass</span>
</code></pre></div><p>I changed the path (<code>css_dir</code>,<code>sass_dir</code>,&hellip;) so that they match my standard folder setup for projects.I do also always compress my files by changing the <code>output_style</code> to <code>:compressed</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># You can select your preferred output style here (can be overridden via the command line):</span>
output_style <span style="color:#f92672">=</span> :compressed
</code></pre></div><p>The <code>config.rb</code> is essential for running Compass. You have to Copy and Paste it into every root direction of your project. See and example below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># lets say this is the folder var/www/my-new-project</span>
<span style="color:#75715e"># this is the root of your project where your config.rb</span>
<span style="color:#75715e"># needs to be placed - NOT inside assets/css as many think!</span>
<span style="color:#e6db74">&#39;- assets
</span><span style="color:#e6db74">    &#39;</span>- css
        <span style="color:#e6db74">&#39;- style.scss
</span><span style="color:#e6db74">        &#39;</span>- style.css
    <span style="color:#e6db74">&#39;- js
</span><span style="color:#e6db74">        &#39;</span>- jquery.min.js
        <span style="color:#e6db74">&#39;- main.js
</span><span style="color:#e6db74">    &#39;</span>- img
<span style="color:#e6db74">&#39;- about
</span><span style="color:#e6db74">    &#39;</span>- index.html
<span style="color:#e6db74">&#39;- imprint.html
</span><span style="color:#e6db74">&#39;</span>- index.html
<span style="color:#e6db74">&#39;- config.rb
</span><span style="color:#e6db74">#   &#39;</span>- there it is, the config.rb!
</code></pre></div><p>Sass and Compass are now installed and ready to use. This is, in my opinion, best made via the good old Terminal!</p>
<p>So let&rsquo;s navigate to our folders and run our first command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># switching to our project folder</span>
$ cd var/www/my-new-project
<span style="color:#75715e"># telling compass to compile our files</span>
$ compass watch
</code></pre></div><p>Compass is now watching for changes and everytime you save your <code>style.scss</code> it will automatically create an style.css out of it. Still wondering what all of this is about?</p>
<h3 id="variables">Variables</h3>
<p>Let&rsquo;s start with Variables because I assume you know what they are and have already seen variables in other programming languages.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">//</span> <span style="color:#f92672">Variables</span> <span style="color:#f92672">start</span> <span style="color:#f92672">with</span> <span style="color:#f92672">a</span> <span style="color:#f92672">$,</span> <span style="color:#f92672">e</span>.<span style="color:#a6e22e">g</span><span style="color:#f92672">.</span>
<span style="color:#f92672">$</span><span style="color:#f92672">main-color</span><span style="color:#f92672">:</span> #85c226<span style="color:#f92672">;</span>
</code></pre></div><p>Variables must be declared <strong>before</strong> they&rsquo;re used, that&rsquo;s why I recommend to declare all variables at the top of the document (or inside a other stylesheet that can be included, more later on).
To use a variable you simply write it to the place you want it to be used. Logical, isn&rsquo;t it?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">$</span><span style="color:#f92672">main-color</span><span style="color:#f92672">:</span> #85c226<span style="color:#f92672">;</span>

.<span style="color:#a6e22e">my-class</span> {
    <span style="color:#66d9ef">border-top</span>: <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#960050;background-color:#1e0010">$</span>main-color;
}
</code></pre></div><p>The above snipped will be compiled to</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">my-class</span> {
    <span style="color:#66d9ef">border-top</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#85c226</span>;
}
</code></pre></div><p>Basically that&rsquo;s it. You can store Strings, Colors, and other variables inside a variables. More on variables can be found inside the <a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#variables_">Sass Docs</a>.</p>
<h3 id="mixins">Mixins</h3>
<p>Mixins are getting a little bit more interesting. They&rsquo;re snippets of code you can use, for example, to save the vendor prefixing. Compass comes with build-in Mixins but you can also create your own Mixins. To use the Compass Mixins you have to include Compass on top of your style.scss as followed:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">//</span> <span style="color:#f92672">import</span> <span style="color:#f92672">everything</span> <span style="color:#f92672">that</span> <span style="color:#f92672">compass</span> <span style="color:#f92672">has</span>
@<span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#34;compass&#34;</span>;
<span style="color:#f92672">//</span> <span style="color:#f92672">import</span> <span style="color:#f92672">special</span> <span style="color:#f92672">library</span> <span style="color:#f92672">(</span><span style="color:#f92672">e</span>.<span style="color:#a6e22e">g</span><span style="color:#f92672">.</span> <span style="color:#f92672">css3</span><span style="color:#f92672">)</span>
@<span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#34;compass/css3&#34;</span>;
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">//</span> <span style="color:#f92672">creating</span> <span style="color:#f92672">a</span> <span style="color:#f92672">mixin</span>
@<span style="color:#66d9ef">mixin</span> <span style="color:#f92672">border-radius</span><span style="color:#f92672">($</span><span style="color:#f92672">r</span><span style="color:#f92672">)</span> {
    <span style="color:#f92672">-webkit-border-radius</span><span style="color:#f92672">:$</span><span style="color:#f92672">r</span><span style="color:#f92672">;</span>
    <span style="color:#f92672">-moz-border-radius</span><span style="color:#f92672">:$</span><span style="color:#f92672">r</span><span style="color:#f92672">;</span>
    <span style="color:#f92672">-ms-border-radius</span><span style="color:#f92672">:$</span><span style="color:#f92672">r</span><span style="color:#f92672">;</span>
    <span style="color:#f92672">-o-border-radius</span><span style="color:#f92672">:$</span><span style="color:#f92672">r</span><span style="color:#f92672">;</span>
}

<span style="color:#f92672">//</span> <span style="color:#f92672">using</span> <span style="color:#f92672">it</span> <span style="color:#f92672">inside</span> <span style="color:#f92672">a</span> <span style="color:#f92672">class</span>
.<span style="color:#a6e22e">my-class</span> {
    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">em</span>;
    <span style="color:#66d9ef">height</span>:<span style="color:#66d9ef">auto</span>;
    <span style="color:#960050;background-color:#1e0010">@include</span> <span style="color:#960050;background-color:#1e0010">border-radius(5px)</span>;
}
</code></pre></div><p>The mixin can be created once and then be reused everywhere inside your style.scss - it&rsquo;ll save you a lot of writing whenever you have to apply a border to an object. The <code>border-radius()</code> mixin is also build-in to Compass. The output in style.css will be as following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">my-class</span> {
    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">em</span>;
    <span style="color:#66d9ef">height</span>:<span style="color:#66d9ef">auto</span>;
    <span style="color:#66d9ef">-webkit-</span><span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span>;
    <span style="color:#66d9ef">-moz-</span><span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span>;
    <span style="color:#66d9ef">-ms-</span><span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span>;
    <span style="color:#66d9ef">-o-</span><span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span>;
}
</code></pre></div><p>There are more super useful build in function in Sass. Some of my favorite are <code>darken()</code> and <code>lighten()</code> for colors.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">$</span><span style="color:#f92672">my-color</span><span style="color:#f92672">:</span> <span style="color:#f92672">red</span><span style="color:#f92672">;</span>
<span style="color:#f92672">$</span><span style="color:#f92672">my-color--dark</span><span style="color:#f92672">:</span> <span style="color:#f92672">darken</span><span style="color:#f92672">($</span><span style="color:#f92672">my-color</span><span style="color:#f92672">,</span><span style="color:#f92672">10</span><span style="color:#f92672">%);</span>
<span style="color:#f92672">//</span> <span style="color:#f92672">this</span> <span style="color:#f92672">will</span> <span style="color:#f92672">produce</span> <span style="color:#f92672">a</span> <span style="color:#f92672">hexadecimal</span> <span style="color:#f92672">code</span> <span style="color:#f92672">(</span><span style="color:#f92672">e</span>.<span style="color:#a6e22e">g</span><span style="color:#f92672">.</span> #132644<span style="color:#f92672">)</span> <span style="color:#f92672">of</span> <span style="color:#f92672">a</span> 
<span style="color:#f92672">//</span> <span style="color:#f92672">color</span> <span style="color:#f92672">that</span> <span style="color:#f92672">is</span> <span style="color:#f92672">10</span><span style="color:#f92672">%</span> <span style="color:#f92672">lighter</span> <span style="color:#f92672">than</span> <span style="color:#f92672">red</span><span style="color:#f92672">.</span>
<span style="color:#f92672">//</span> <span style="color:#f92672">syntax</span><span style="color:#f92672">:</span> 
<span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#f92672">lighten</span><span style="color:#f92672">(</span><span style="color:#f92672">color</span><span style="color:#f92672">,</span><span style="color:#f92672">percent</span><span style="color:#f92672">)</span>
<span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#f92672">darken</span><span style="color:#f92672">(</span><span style="color:#f92672">color</span><span style="color:#f92672">,</span><span style="color:#f92672">percent</span><span style="color:#f92672">)</span>
</code></pre></div><h3 id="structure-files-and-folders">Structure, Files and Folders</h3>
<p>Before this Guideline to Sass ends I want to talk about structures, files and folders. Compass is able to watch a whole directory of files so you can go totally crazy by striping down your CSS file into a lot of small files. Your css folder could look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#e6db74">&#39;-css
</span><span style="color:#e6db74">    &#39;</span>_includes
        <span style="color:#e6db74">&#39;- _article.scss
</span><span style="color:#e6db74">        &#39;</span>- _header.scss
        <span style="color:#e6db74">&#39;- _menu.scss
</span><span style="color:#e6db74">        &#39;</span>- _imprint.scss
        <span style="color:#e6db74">&#39;- _front-page.scss
</span><span style="color:#e6db74">        &#39;</span>- _sidebar.scss
        <span style="color:#e6db74">&#39;- _plugins.scss
</span><span style="color:#e6db74">        &#39;</span>- _mixins.scss
    <span style="color:#e6db74">&#39;- style.scss
</span><span style="color:#e6db74">    &#39;</span>- style.css
</code></pre></div><p>The amazing thing about Compass is: every file that starts with <code>_</code> is not compiled. So in the above folder tree there&rsquo;s still only <code>style.scss</code> that will be compiled - but all the others can be included. <strong>Wow but what about performance with all those files?</strong> you&rsquo;ll maybe ask yourself? The point is: There&rsquo;s still just one file, the style.<em>css</em> that will be included to the page later - so all the other files only exist locally on your computer.
If you want to have an example what the <code>style.scss</code> would look like, here&rsquo;s the one I <a href="https://github.com/kevingimbel/kevingimbel.github.io/blob/v1/assets/css/style.scss">used for my blog</a>.</p>
<p>Sass and Compass are amazing, powerful tools and you, as a Front-End Developer, should be able to work with both. This small summary of the basic Sass features is just the top of the iceberg - there&rsquo;s a lot more to explore about <a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html">Sass</a> and <a href="http://compass-style.org/reference/compass/">Compass</a>.</p>
<p>You should also check out <a href="http://codepen.io/thebabydino/">Ana Tudor</a> on CodePen, she&rsquo;s doing amazing stuff with Sass and Maths!</p>
<p>Further reading:</p>
<ul>
<li><a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html">Sass Docs</a></li>
<li><a href="http://compass-style.org/reference/compass/">Compass Docs</a></li>
<li><a href="http://thesassway.com/">The Sass Way</a></li>
</ul>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/css" term="css" label="css"/><category scheme="https://kevingimbel.de/tags/sass" term="sass" label="sass"/><category scheme="https://kevingimbel.de/tags/tooling" term="tooling" label="tooling"/></entry><entry><title type="html">A bit sticky</title><link href="https://kevingimbel.de/blog/2013/09/a-bit-sticky/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://kevingimbel.de/blog/2013/09/a-bit-sticky/</id><published>2013-09-20T00:00:00+00:00</published><updated>2013-09-20T00:00:00+00:00</updated><content type="html"><![CDATA[<p>I just stumbled upon a very handy CSS Property: <code>position:sticky</code>. As far as I found out it&rsquo;s only working in Chrome and Chromium with the experimental Webkit Features Flag enabled (see at chrome://flags/#enable-experimental-webkit-features).</p>
<p><code>position:sticky</code> is a pretty handy feature that allows you to stick an element to the top of the page (or wherever you want) until the parent element is moved out of the screen.</p>
<h3 id="basic-markup">Basic Markup</h3>
<p>To get an idea of how <code>position:sticky</code> works I made some basic markup.</p>
<h4 id="html">HTML</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">article</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;single__article&#34;</span>&gt;
    &lt;<span style="color:#f92672">hgroup</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;single__article--header&#34;</span>&gt;
        # article header, this one will be sticked
    &lt;/<span style="color:#f92672">hgroup</span>&gt;
    ...
&lt;/<span style="color:#f92672">article</span>&gt;
</code></pre></div><h4 id="css">CSS</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">single__article</span> {
    <span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">classic</span> <span style="color:#960050;background-color:#1e0010">article</span> <span style="color:#960050;background-color:#1e0010">styles</span>
}

.<span style="color:#a6e22e">single__article--header</span> {
    <span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">sticky</span>; <span style="color:#75715e">/* general CSS3 */</span>
    <span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">-webkit-</span><span style="color:#66d9ef">sticky</span>; <span style="color:#75715e">/* webkit prefixed */</span>
    <span style="color:#66d9ef">top</span>: <span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span>; <span style="color:#75715e">/* Space between the element and top */</span>
}
</code></pre></div><p>What <code>position:sticky</code> does is:</p>
<ul>
<li>When the elements Parent (<code>.single__article</code>) is scrolled</li>
<li>It sticks the header to the top of the page (in other words it gets <code>fixed</code>)</li>
<li>And scrolls it with until the Parent gets out of the way</li>
</ul>
<!-- raw HTML omitted -->
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">header</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;.header&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">origOffsetY</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">header</span>.<span style="color:#a6e22e">offsetTop</span>;

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">onScroll</span>(<span style="color:#a6e22e">e</span>) {
  window.<span style="color:#a6e22e">scrollY</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">origOffsetY</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">header</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">add</span>(<span style="color:#e6db74">&#39;sticky&#39;</span>) <span style="color:#f92672">:</span>
                                  <span style="color:#a6e22e">header</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">remove</span>(<span style="color:#e6db74">&#39;sticky&#39;</span>);
}

document.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;scroll&#39;</span>, <span style="color:#a6e22e">onScroll</span>);
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">sticky</span> {
  <span style="color:#66d9ef">position</span>: <span style="color:#66d9ef">fixed</span>;
  <span style="color:#66d9ef">top</span>: <span style="color:#ae81ff">0</span>;
}
.<span style="color:#a6e22e">header</span> {
  <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
  <span style="color:#66d9ef">background</span>: <span style="color:#ae81ff">#F6D565</span>;
  <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">25</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p><a href="http://codepen.io/kevingimbel/pen/Cybof">See the Demo on CodePen</a></p>
<p>Resources:</p>
<ul>
<li><a href="http://updates.html5rocks.com/2012/08/Stick-your-landings-position-sticky-lands-in-WebKit">HTML5 Rocks</a></li>
</ul>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/><category scheme="https://kevingimbel.de/tags/css" term="css" label="css"/></entry><entry><title type="html">Is this :valid?</title><link href="https://kevingimbel.de/blog/2013/08/is-this-valid/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://kevingimbel.de/blog/2013/08/is-this-valid/</id><published>2013-08-16T00:00:00+00:00</published><updated>2013-08-16T00:00:00+00:00</updated><content type="html"><![CDATA[<p>I recently stumbled upon the <code>:valid</code> and <code>:invalid</code> class for input fields. It gives you the ability to use visual feedback on inputs that show the user whether the input is - guess what? - valid or not. This is, in fact, a very handy pseudo class in case of UI and UX Design because you can easily give a feedback on input without using JavaScript. Anyway, this pseudo element does not <strong>validate the input</strong>, the entered email for example can still be formated wrong.</p>
<p>Anyway I thought this is a handy little helper that I could give a try so I started working around with it, checking what I can do and what I can&rsquo;t.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">contact__form--email</span> {
 
  <span style="color:#960050;background-color:#1e0010">&amp;:valid</span> <span style="color:#960050;background-color:#1e0010">{</span>
    <span style="color:#66d9ef">color</span>:<span style="color:#66d9ef">green</span>;
  }

  <span style="color:#f92672">&amp;</span>:<span style="color:#a6e22e">invalid</span> {
    <span style="color:#66d9ef">color</span>:<span style="color:#66d9ef">red</span>;
  }
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>Above you see the basic markup for a simple use case of <code>:valid</code> and <code>:invalid</code>. You can apply everything you want so far I&rsquo;ve tested. In my opinion <code>color</code> and <code>border</code> are the best and most basic use cases where this makes sense.</p>
<h3 id="strange-behavior-of-valid">Strange behavior of :valid</h3>
<p>While the <code>:invalid</code> pseudo class makes perfect sense I found some strange behavior while experimenting with <code>:valid</code>.
When the user starts typing the color will be red, as soon as he writes <code>yourname@g</code> the color will turn green - because the eMail is now valid, even though it&rsquo;s not finished and here comes the point I start wondering: Why doesn&rsquo;t it check for a dot followed by at least 2 letters? The chances that this would be a valid email and this can be marked valid is much higher then triggering the valid pseudo class right after someone puts a letter behind the @ mark.</p>
<p>Mozilla&rsquo;s Firefox and Google Chrome behave the same way, both trigger the <code>:valid</code> class as soon as there is one character behind the @ mark. I wonder if this is specified by W3C - and now I ask: Is this really the best way to handle <code>:valid</code> and <code>:invalid</code> pseudo classes? Wouldn&rsquo;t it be better to wait until the user types at least one dot followed by a letter <strong>after</strong> the user already wrote an @ mark? This would, in all cases, make sure the email is set up correctly.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Firefox and Chrome trigger :valid</span> 
<span style="color:#75715e"># at this point</span>
<span style="color:#75715e">#       |</span>
    you@host.com
<span style="color:#75715e">#             |</span> 
<span style="color:#75715e"># I suggest triggering after</span> 
<span style="color:#75715e"># 2 letters have been entered</span>
<span style="color:#75715e"># because chances that the email</span>
<span style="color:#75715e"># is valid are much higher here</span>
</code></pre></div><p>At least you have to check the email via JavaScript or PHP with RegEx to make sure it is valid but it would be a nice UX feature to have a visual feedback that checks the email so a user sees that the inputed email is correct - the :valid class doesn&rsquo;t provide this yet because it triggers to early so there is no &ldquo;guarantee&rdquo; the email is correct.</p>
<p>I hope that they&rsquo;ll change this behavior in the future so it&rsquo;s save to use :valid on email inputs and it works correctly. What do you think about <code>:valid</code> and <code>:invalid</code>?</p>
<p>You can find a working example of :valid and :invalid <a href="http://codepen.io/kevingimbel/pen/jlhJg">here at CodePen</a>.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/></entry><entry><title type="html">px vs em</title><link href="https://kevingimbel.de/blog/2013/08/px-vs-em/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://kevingimbel.de/blog/2013/08/px-vs-em/</id><published>2013-08-15T00:00:00+00:00</published><updated>2013-08-15T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Recently <a href="http://timpietrusky.com">Tim Pietrusky</a> wrote and article about <a href="http://timpietrusky.com/i-love-r-emmmmmm-because-px-suck">px vs em</a> that contains a few links on resources that explain why you should use em instead of px as measure unit on websites.</p>
<p>I was using pixel like forever and I couldn&rsquo;t think of any reason to switch to a new unit until Tim explained why em is better: <em>em is more responsive and it is scalable</em>.
In fact when you switch from pixel to em you&rsquo;ll feel like working on a completely new Level. The fact you can scale all elements of your website by simply passing a new value to <code>:root {font-size:1em;}</code> or <code>body {font-size:1em;}</code>.</p>
<p>My <code>_responsive.scss</code> works this way. Because I think it&rsquo;s good to have large texts on smartphones I applied <code>font-size:120%</code> to the <code>.main-content</code> class that holds all elements.</p>
<p>One of the main reasons to use em instead of pixel is that this measurement unit doesn&rsquo;t depend on the screen size in Pixel while the pixel unit does. An button that has the markup you see below will look the same on any device at any scale - it is fully responsive in other words.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">button</span> {
	<span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">.5</span><span style="color:#66d9ef">em</span> <span style="color:#ae81ff">.7</span><span style="color:#66d9ef">em</span>;
}
</code></pre></div><p>Another important point is that em Media Queries apply even if the user zooms the page. Go ahead an try to zoom this blog, at some point the responsive layout (breakpoint 55em) will apply - if you use pixel in your breakpoint (for example <code>@media all and (max-width:800px)</code>) it will not apply the responsive layout when someone zooms in.</p>
<h3 id="final-words">Final Words</h3>
<p>em is a lot better than pixel even if it takes some time to change your mind and work flow. It is <em>more flexible</em>, <em>more scalable</em> and - which is the most important, <em>completely responsive</em>.
So if you create a new responsive website, and you should always do so, do your self a favor and use em instead of px.</p>
<h3 id="further-reading">Further Reading</h3>
<p>More articles on this topic:</p>
<ul>
<li><a href="https://medium.com/front-end-development/8f433689736f">Sizing (Web) components</a> by <a href="http://simurai.com/">Simurai</a></li>
<li><a href="http://snook.ca/archives/html_and_css/font-size-with-rem">Font-size with rem </a> by <a href="http://snook.ca">Jonathan Snook</a></li>
<li><a href="http://blog.cloudfour.com/the-ems-have-it-proportional-media-queries-ftw/">The ems have it: Proportional Media Queries FTW</a> by <a href="http://blog.cloudfour.com/author/lyza-gardner/">Lyza Gardner</a></li>
<li><a href="http://codepen.io/LukyVj/blog/em-vs-px">em vs px</a> by <a href="http://lucasbonomi.com/">Lucas Bonomi</a></li>
</ul>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend"/></entry></feed>