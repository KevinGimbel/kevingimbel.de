<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.60.0">Hugo</generator><title type="html"><![CDATA[backend on KevOps]]></title>
    
    
    
            <link href="https://kevingimbel.de/categories/backend/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://kevingimbel.de/categories/backend/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://kevingimbel.de/categories/backend/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2020-01-08T13:15:13+01:00</updated>
    
    
    
    
        <id>https://kevingimbel.de/categories/backend/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Auto SSL With apache2]]></title>
            <link href="https://kevingimbel.de/blog/2020/01/auto-ssl-with-apache2/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2020/01/using-archetypes-in-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Using Archetypes in Hugo" />
                <link href="https://kevingimbel.de/blog/2017/01/bash-script-ws/?utm_source=atom_feed" rel="related" type="text/html" title="Bash script: ws" />
            
                <id>https://kevingimbel.de/blog/2020/01/auto-ssl-with-apache2/</id>
            
            
            <published>2020-01-08T00:00:00+00:00</published>
            <updated>2020-01-08T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Apache 2.4.30 and later supports an experimental module called <code>mod_md</code> which supports automatic SSL certificate setup with Let's Encrypt as standard provider. This greatly simplifies the management of SSL certificates. Instead of setting up <a href="https://certbot.eff.org/">certbot</a> and cronjobs to automatically renew certs server administrators now only need to add a few lines to their virtual host files.</p>
<p>This guide assumes the operating system is <em>Ubuntu</em>! If you use a different distro some commands may be different.</p>
<h2 id="installing-a-new-apache-version">Installing a new apache version</h2>
<p>Since <code>mod_md</code> is only available with Apache 2.4.30+ we need a fairly new apache version. Sadly, the newest on Ubuntu 18.04. is 2.4.29, so we need to add a new ppa to install from first. <a href="https://launchpad.net/~ondrej/+archive/ubuntu/apache2">ondrej/apache2</a> seems to be what most people use and recommend, so we'll add this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">sudo add-apt-repository ppa:ondrej/apache2
sudo apt-get update
</code></pre></div><p>Next, apache can be updated</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ apt install apache2
</code></pre></div><p>Check the apache version</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ apache2 -v
Server version: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
Server built:   2019-08-21T20:43:21
</code></pre></div><h2 id="enabling-modmd">Enabling mod_md</h2>
<p>First <code>mod_md</code> must be enabled. This can be done with <code>a2enmod</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ sudo a2enmod md
</code></pre></div><p>Next, Apache must be reload with <code>systemctl</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ systemctl reload apache2
</code></pre></div><p>Now the virtual host can be updated as shown in the minimal example below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-apache" data-lang="apache">ServerAdmin mailto:some-valid@email.com
MDCertificateAgreement accepted
MDomain test.kevingimbel.de

<span style="color:#f92672">&lt;VirtualHost</span> <span style="color:#e6db74">*:80</span><span style="color:#f92672">&gt;</span>
        ServerName test.kevingimbel.de
        <span style="color:#960050;background-color:#1e0010">[</span>...<span style="color:#960050;background-color:#1e0010">]</span>
<span style="color:#f92672">&lt;/VirtualHost</span><span style="color:#e6db74"></span><span style="color:#f92672">&gt;</span>

<span style="color:#f92672">&lt;VirtualHost</span> <span style="color:#e6db74">*:443</span><span style="color:#f92672">&gt;</span>
        ServerName test.kevingimbel.de
        <span style="color:#960050;background-color:#1e0010">[</span>...<span style="color:#960050;background-color:#1e0010">]</span>
<span style="color:#f92672">&lt;/VirtualHost</span><span style="color:#e6db74"></span><span style="color:#f92672">&gt;</span>
</code></pre></div><p>The following values are required for <code>mod_md</code> to work properly:</p>
<ul>
<li><code>ServerAdmin</code> with valid e-mail address</li>
<li>ServerName in VirtualHost</li>
<li>MDomain with valid domain name</li>
<li><code>MDCertificateAgreement accepted</code> to accept the ACME terms of service</li>
</ul>
<p>After making the changes, the server must be reloaded again.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ systemctl reload apache2
</code></pre></div><p>With the values in place the server will contact Let's Encrypt and retrieve a certificate, wire it up in the backend, and serve the website over https. The <a href="https://httpd.apache.org/docs/trunk/mod/mod_md.html" title="Read the Apache Documentation on mod_md">mod_md documentation</a> contains more configuration options as well as information on how to use a different Certificate Authority.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/backend" term="backend" label="backend" />
                             
                                <category scheme="https://kevingimbel.de/categories/tutorial" term="tutorial" label="tutorial" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/apache" term="apache" label="apache" />
                             
                                <category scheme="https://kevingimbel.de/tags/server" term="server" label="server" />
                             
                                <category scheme="https://kevingimbel.de/tags/automation" term="automation" label="automation" />
                             
                                <category scheme="https://kevingimbel.de/tags/security" term="security" label="security" />
                             
                                <category scheme="https://kevingimbel.de/tags/ssl" term="ssl" label="ssl" />
                             
                                <category scheme="https://kevingimbel.de/tags/ubuntu" term="ubuntu" label="ubuntu" />
                             
                                <category scheme="https://kevingimbel.de/tags/linux" term="linux" label="linux" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Magento: Add fields to the Admin Backend]]></title>
            <link href="https://kevingimbel.de/blog/2014/08/magento-add-fields-to-the-admin-backend/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://kevingimbel.de/blog/2014/05/magento-get-and-set-variables-in-config.xml/?utm_source=atom_feed" rel="related" type="text/html" title="Magento: get and set variables in config.xml" />
            
                <id>https://kevingimbel.de/blog/2014/08/magento-add-fields-to-the-admin-backend/</id>
            
            
            <published>2014-08-27T00:00:00+00:00</published>
            <updated>2014-08-27T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Today I had a task at work that first sounded rather easy: Add a field to the Admin backend, namely
<em>System-&gt;Config-&gt;Catalog</em> where the user could later insert some SKUs to control which products are shown on the home
page. The first resources I found on how to edit the Backend where all suggesting to create a Module and then create a
settings page. Not only was this rather complex it was also way too &ldquo;over engineered&rdquo; for a simple thing like a text
field. So I continued searching and found <a href="http://prattski.com/2008/09/29/magento-add-custom-module-for-custom-admin-config-options/">this
post</a> about creating fields
in the backend only with XML.</p>
<p>That was easy and fair enough I thought and so I gave it a try. First however I created a Module in
<code>app/code/community/Synoa</code> (<em>community</em> because this can be reused and is not directly project specific). My folder
structure is really simple since I don't need much:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">-app/code/community
 -Synoa
  -FeaturedProducts
   -etc
    -config.xml
    -system.xml
</code></pre></div><p>In <code>config.xml</code> is the default Module configuration. In my case the following XML.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
 <span style="color:#f92672">&lt;config</span><span style="color:#f92672">&gt;</span>
   <span style="color:#f92672">&lt;modules</span><span style="color:#f92672">&gt;</span>
     <span style="color:#f92672">&lt;Synoa_FeaturedProducts</span><span style="color:#f92672">&gt;</span>
       <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>0.0.1<span style="color:#f92672">&lt;/version&gt;</span>
     <span style="color:#f92672">&lt;/Synoa_FeaturedProducts&gt;</span>
   <span style="color:#f92672">&lt;/modules&gt;</span>
<span style="color:#f92672">&lt;/config&gt;</span>
</code></pre></div><p>The really important and <strong>amazing</strong> part happens in <code>system.xml</code>. The way of adding fields as shown below shows how
amazingly flexible Magento can be. When I tried it out and found that it worked right away I was really impressed.
Magento's Module System, where the Module Name is equal to the folder it is in, e.g. <code>Mage_Core_Block_Html_Link</code> is in
<code>Mage/Core/Block/Html/Link.php</code>, also applies to this XML configuration.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;config</span><span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;sections</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;catalog</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;groups</span><span style="color:#f92672">&gt;</span>
      <span style="color:#f92672">&lt;featured_products</span> <span style="color:#a6e22e">translate=</span><span style="color:#e6db74">&#34;label&#34;</span><span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;label</span><span style="color:#f92672">&gt;</span>Featured Products<span style="color:#f92672">&lt;/label&gt;</span>
        <span style="color:#f92672">&lt;frontend_type</span><span style="color:#f92672">&gt;</span>text<span style="color:#f92672">&lt;/frontend_type&gt;</span>
        <span style="color:#f92672">&lt;sort_order</span><span style="color:#f92672">&gt;</span>50<span style="color:#f92672">&lt;/sort_order&gt;</span>
        <span style="color:#f92672">&lt;show_in_default</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_default&gt;</span>
        <span style="color:#f92672">&lt;show_in_website</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_website&gt;</span>
        <span style="color:#f92672">&lt;show_in_store</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_store&gt;</span>
        <span style="color:#f92672">&lt;fields</span><span style="color:#f92672">&gt;</span>
          <span style="color:#f92672">&lt;product_skus</span> <span style="color:#a6e22e">translate=</span><span style="color:#e6db74">&#34;label&#34;</span><span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;label</span><span style="color:#f92672">&gt;</span>Insert product skus here<span style="color:#f92672">&lt;/label&gt;</span>
            <span style="color:#f92672">&lt;frontend_type</span><span style="color:#f92672">&gt;</span>text<span style="color:#f92672">&lt;/frontend_type&gt;</span>
            <span style="color:#f92672">&lt;sort_order</span><span style="color:#f92672">&gt;</span>50<span style="color:#f92672">&lt;/sort_order&gt;</span>
            <span style="color:#f92672">&lt;show_in_default</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_default&gt;</span>
            <span style="color:#f92672">&lt;show_in_website</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_website&gt;</span>
            <span style="color:#f92672">&lt;show_in_store</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_store&gt;</span>
          <span style="color:#f92672">&lt;/product_skus&gt;</span>
        <span style="color:#f92672">&lt;/fields&gt;</span>
      <span style="color:#f92672">&lt;/featured_products&gt;</span>
    <span style="color:#f92672">&lt;/groups&gt;</span>
  <span style="color:#f92672">&lt;/catalog&gt;</span>
<span style="color:#f92672">&lt;/sections&gt;</span>
<span style="color:#f92672">&lt;/config&gt;</span>
</code></pre></div><p>Well quite a lot of stuff happens here, let's break that down.</p>
<h3 id="sections">Sections</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"> <span style="color:#f92672">&lt;sections</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;catalog</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;/catalog&gt;</span>
 <span style="color:#f92672">&lt;/sections&gt;</span>
</code></pre></div><p>This part defines in what menu (in the backend on the left) the new fields will be inserted. In this case it's the
Catalog Menu and there the first Sub-Menu point (which is also named Catalog).</p>
<h3 id="groups">Groups</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;groups</span><span style="color:#f92672">&gt;</span>
 <span style="color:#f92672">&lt;group_name</span><span style="color:#f92672">&gt;</span>
 <span style="color:#f92672">&lt;/group_name&gt;</span>
<span style="color:#f92672">&lt;/groups&gt;</span>
</code></pre></div><p>Groups define the &ldquo;containers&rdquo; for settings. These are the boxes on the right part of the screen. Because describing it
is rather stupid, here's a picture of the new admin menu and it's container (the group).
![&ldquo;Custom field in the backend.&quot;](<a href="https://i.kevingimbel.me/sc/Screenshot">https://i.kevingimbel.me/sc/Screenshot</a> at 13-52-42.png)</p>
<p>Lastly inside the group the content is defined. The wrapping tag can have any valid XML name you want, in my case it is
<code>&lt;featured_products&gt;</code> the <code>translate=&quot;label&quot;</code> attribute tells Magento to translate the label if there is a translation
available, either in <code>translate.csv</code> or <code>myCompany_MyModule.csv</code> - that's up to you.</p>
<p>Inside the container is more stuff that could need some explanation.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;my_namespace</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;label</span><span style="color:#f92672">&gt;</span>Featured Products<span style="color:#f92672">&lt;/label&gt;</span>
  <span style="color:#f92672">&lt;frontend_type</span><span style="color:#f92672">&gt;</span>text<span style="color:#f92672">&lt;/frontend_type&gt;</span>
  <span style="color:#f92672">&lt;sort_order</span><span style="color:#f92672">&gt;</span>50<span style="color:#f92672">&lt;/sort_order&gt;</span>
  <span style="color:#f92672">&lt;show_in_default</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_default&gt;</span>
  <span style="color:#f92672">&lt;show_in_website</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_website&gt;</span>
  <span style="color:#f92672">&lt;show_in_store</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_store&gt;</span>
<span style="color:#f92672">&lt;my_namespace</span><span style="color:#f92672">/&gt;</span>
</code></pre></div><ul>
<li><code>label</code> - The label to show at the top (headline)</li>
<li><code>frontend_type</code>- type of the field in the frontend</li>
<li><code>sort_order</code> - position in the list</li>
<li><code>show_in_default</code> - available in default view</li>
<li><code>show_in_website</code> - available in website view</li>
<li><code>show_in_store</code> - available in default store view
The show tags determine in what store config &ldquo;scope&rdquo; (after setting it in the top right) the option is available.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;fields</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;product_skus</span> <span style="color:#a6e22e">translate=</span><span style="color:#e6db74">&#34;label&#34;</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;label</span><span style="color:#f92672">&gt;</span>Insert product skus here (csv, e.g 123, 144, 255)<span style="color:#f92672">&lt;/label&gt;</span>
    <span style="color:#f92672">&lt;frontend_type</span><span style="color:#f92672">&gt;</span>text<span style="color:#f92672">&lt;/frontend_type&gt;</span>
    <span style="color:#f92672">&lt;sort_order</span><span style="color:#f92672">&gt;</span>50<span style="color:#f92672">&lt;/sort_order&gt;</span>
    <span style="color:#f92672">&lt;show_in_default</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_default&gt;</span>
    <span style="color:#f92672">&lt;show_in_website</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_website&gt;</span>
    <span style="color:#f92672">&lt;show_in_store</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_store&gt;</span>
  <span style="color:#f92672">&lt;/product_skus&gt;</span>
<span style="color:#f92672">&lt;/fields&gt;</span>
</code></pre></div><ul>
<li><code>label</code> - Label on the left (field description)</li>
<li><code>sort_order</code>- position <em>inside</em> the list</li>
</ul>
<p>I'm not entirely sure what the store variables do here, but I guess they configure if and where the field can be
<code>echo</code>ed in the frontend.</p>
<p>And that's it. Without a single line of PHP fields can be added to the backend in Magento. Retrieving the values of
those fields is also easy, as the following example shows.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">&lt;?php</span> <span style="color:#66d9ef">echo</span> <span style="color:#a6e22e">Mage</span><span style="color:#f92672">::</span><span style="color:#a6e22e">getStoreConfig</span>(<span style="color:#e6db74">&#39;catalog/featured_products/product_skus&#39;</span>); <span style="color:#75715e">?&gt;</span>
</code></pre></div><p>The logic here is simply <code>section/groupname/fieldname</code>. This fits pretty good with the previously mentioned folder
structure of Magento.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/magento" term="magento" label="magento" />
                             
                                <category scheme="https://kevingimbel.de/categories/php" term="php" label="php" />
                             
                                <category scheme="https://kevingimbel.de/categories/backend" term="backend" label="backend" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/magento" term="magento" label="magento" />
                             
                                <category scheme="https://kevingimbel.de/tags/xml" term="xml" label="xml" />
                             
                                <category scheme="https://kevingimbel.de/tags/php" term="php" label="php" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Ghost in the shell]]></title>
            <link href="https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/</id>
            
            
            <published>2013-10-16T00:00:00+00:00</published>
            <updated>2013-10-16T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Finally <a href="http://ghost.org">Ghost</a> launched to the public! I waited for this CMS since I first heard of, at this time my blog was running on WordPress which always felt overloaded. WordPress has a lot of functions and stuff I don't need when publishing a few articles a month to the Internet. However, I switched to Jekyll as you may know and now there is Ghost. It felt like it'd be my birthday while unpacking the *.zip file. Anyway, I want to write a small installation guide, tell you something about my first impressions and how theming with Ghost works.</p>
<p>Ghost runs on <a href="http://nodejs.org">Node.js</a> which is basically a installable version of <a href="https://code.google.com/p/v8/">Google Chrome's v8 JavaScript Engine</a>, in other words Ghost doesn't use PHP or Ruby to run it just needs a Node Process.</p>
<h3 id="installing-nodejs">Installing Node.js</h3>
<p>First of all you have to install Node.js from <a href="http://nodejs.org/"><a href="http://nodejs.org/">http://nodejs.org/</a></a>. Afterwards go back to your terminal and run the following</p>
<h3 id="installing-ghost">Installing Ghost</h3>
<p>Now you need to sign-up and download the Ghost source code from <a href="https://ghost.org/"><a href="https://ghost.org/">https://ghost.org/</a></a>. Unpack the zip into the directory of your choice (mine is <code>var/www/</code>), open a terminal, navigate to the directory and enter the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># prefix with sudo on Ubuntu!</span>
$ npm install --production
</code></pre></div><p>After the installation process is finished run <code>$ npm start</code> to start the Node.js Server. Your brand-new Ghost site should now be running on 127.0.0.1:2368.</p>
<p>If you see the Ghost site navigate to 127.0.0.1:2368/ghost and sign-up (again) for your own local Ghost installation. You can, in fact, ignore the eMail warnings (or <a href="http://docs.ghost.org/mail">read this to set up your eMail Account</a>).
So far your Ghost page is running locally and you can start writing posts.</p>
<h3 id="themes">Themes</h3>
<p>Themes in Ghost are something completely new for me. They're using <a href="http://handlebarsjs.com/">Handlebars.js</a> which looks like <a href="http://docs.shopify.com/themes/liquid-basics">Liquid</a> used by Jekyll on first sight.</p>
<p>After I wrapped my head around Handlebars and the Ghost default Theme &ldquo;Casper&rdquo; I found it easy to manipulate and build my first Theme.
Basically Ghost can work with 3 layout files: post.hbs, default.hbs and index.hbs - they're pretty self-explaining though.</p>
<h4 id="indexhbs">index.hbs</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{{#post }}
  &lt;<span style="color:#f92672">article</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;post&#34;</span>&gt;
    &lt;<span style="color:#f92672">hgroup</span>&gt;
      &lt;<span style="color:#f92672">h2</span>&gt;{{{title}}}&lt;/<span style="color:#f92672">h2</span>&gt;
      {{#if author}}
        written by {{author.name}}
      {{/if}}
    &lt;/<span style="color:#f92672">hgroup</span>&gt;
  &lt;/<span style="color:#f92672">article</span>&gt;
{{/post}}
{% endraw %}
</code></pre></div><p>The above snippet simply outputs the title of the post and the author's name if one is given. A pretty neat thing about Handlebars is, that everything between <code>{{#post}}</code> and &lsquo;{{//post}}&rsquo; automatically gets pulled from the post it belongs to. As I mentioned above this looks a lot like Liquid as you can see in the <a href="http://kevingimbel.com/jekyll-guide/layouts/">first code example here</a>.</p>
<p>I'll not get into detail on how to style <code>post.hbs</code> because it is nearly the same. <code>default.hbs</code>, however, is a bit more interesting.</p>
<h4 id="defaulthbs">default.hbs</h4>
<p>First I thought this would be the &ldquo;default&rdquo; layout if no format is given (like in Jekyll) but it's a lot more important: <code>default.hbs</code> holds the entirely page and all the posts get included into it!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">html</span>&gt;
  &lt;<span style="color:#f92672">head</span>&gt;
    ...
  &lt;/<span style="color:#f92672">head</span>&gt;
  &lt;<span style="color:#f92672">body</span>&gt;
    # build your header and stuff here
    {}{{body}}{}
    # build your footer here
  &lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>The <code>body</code> handlebar is the point where another pages content gets included. To tell a layout that it will be included into another file you simply write <code>{{!&lt; default}}</code> in the first line of it.</p>
<p>This is a pretty handy feature I think. So far Ghost and building Themes for it is pretty easy and handy to use. You have to learn Handlebars to get the full potential out of it but that's OK I'd say. However, I'll now show off some things that I don't like or found confusing (still locally, deploying to a server comes later!)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{{! Ghost outputs important scripts and data with this tag }}
{{ghost_foot}}
{% endraw %}
</code></pre></div><p>So Ghost, please tell me more about &ldquo;important data and scripts&rdquo;. I haven't found any file that contains this data or scripts and I wasn't sure if this tag is only needed for the Casper Theme or if it's important for other stuff. In the end I just left it there.</p>
<p>Beside this tag I found another, kinda self-explaining tag: <code>{{pagination}}</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% raw %}
{{!! After all the posts, we have the previous/next pagination links }}
{{pagination}}
{% endraw %}
</code></pre></div><p>Cool, so Ghost builds me a pagination! But wait, I'd like to style it. So&hellip;where's the pagination layout? I searched it inside my themes directory (because I copy/pasted the Casper Theme to modify it) but there was no file that holds the pagination. After searching around for quite some time I found it inside <code>core/server/helper/tpl</code> - I have no idea why this helper is here. However, it's a <code>*.bhs</code> file so customizing it is the same as with any other file.</p>
<p>That's it on themes and structure for now, let's see how we get this Baby online!</p>
<h3 id="deploying">Deploying</h3>
<p>First of all you need two things:</p>
<ul>
<li>Time</li>
<li>A server
<ul>
<li>with SSH connection via Terminal</li>
<li>Node.js</li>
<li>Daemons</li>
<li>sqlite3</li>
</ul>
</li>
</ul>
<p>In before, I couldn't make Ghost running on my server and I'm not sure why this is so. The Service is running, the logs say it's running, the subdomain works (checked with a index.html inside the Ghost Directory) but for whatever reasons nothing gets compiled.</p>
<p>I could tell you what exactly I did on my server but I'd rather like to redirect you to some posts explaining the installation (all on <a href="https://uberspace.de">Uberspace.de</a> but most of it should work with your server, too).</p>
<ul>
<li>(DE) <a href="https://uberspace.de/dokuwiki/cool:ghost">Uberspace Wiki</a></li>
<li>(EN) <a href="http://christophvoigt.com/how-to-setup-ghost-on-uberspace-de/">How to Setup Ghost on Uberspace.de</a> by Christoph Voigt</li>
<li>(EN) <a href="http://ghost.jotbe.io/setting-up-ghost-on-uberspace/">Setting up Ghost in a Sub-Directory</a> by Jan Beilicke</li>
</ul>
<p>What I can tell so far is: If you're not familiar with working over SSH and logged-in via your terminal setting up Ghost is a pain in the ass. I'm ashamed to say I wasn't able to get it running even thought the service itself <em>is</em> running as my Log-Files tell me.</p>
<p>The more I worked with Ghost on the server side one thing came to my mind: It's not just a blogging Software, it's made to sell hosting. As some other people already said it is a kinda smart decision to write a great Blog System that is not-so-easy to install so you can sell your own Hosting Services with it.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Non-Tech People will not be able to install Ghost on their servers, Ghost requires Node.js which isn't a default installation on servers yet (even though some have it), Ghost is at least locally fast and easy to setup. The Theme system with Handlebars is also pretty nice and they have the most beautiful back-end I saw so far.
Regardless of all the good aspects, overall I'm disappointed by Ghost. I'll stick to Jekyll and GitHub Hosting. I'll try to deploy Ghost and work around with it just for the sake of learning something new but as engine to build my Blog it has not convinced me so far.</p>
<p>You may have noticed that the Title is a reference to <a href="http://de.wikipedia.org/wiki/Ghost_in_the_Shell">Ghost in the Shell</a> which is a great Manga from 1989.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding" />
                             
                                <category scheme="https://kevingimbel.de/categories/frontend" term="frontend" label="frontend" />
                             
                                <category scheme="https://kevingimbel.de/categories/backend" term="backend" label="backend" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://kevingimbel.de/tags/cms" term="cms" label="cms" />
                             
                                <category scheme="https://kevingimbel.de/tags/nodejs" term="nodejs" label="nodejs" />
                            
                        
                    
                
            
        </entry>
    
</feed>
