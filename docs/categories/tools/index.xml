<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tools on KevOps — DevOps, Cooking, and everything else I want to write about</title><link>https://kevingimbel.de/categories/tools/</link><description>Recent content in tools on KevOps — DevOps, Cooking, and everything else I want to write about</description><generator>Hugo -- gohugo.io</generator><language>en_US</language><lastBuildDate>Fri, 24 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kevingimbel.de/categories/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Terrasave</title><link>https://kevingimbel.de/blog/2020/04/terrasave/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/blog/2020/04/terrasave/</guid><description>I just released a tiny tool function I&amp;rsquo;ve been using for some time called terrasave. It&amp;rsquo;s a Bash / Fish function that prevents you from running terraform without the -target option.
Why does this exist? In terraform it is incredibly easy to destroy things with terraform apply. If you run apply terraform shows a huge output and sometimes you may overlook a thing being &amp;ldquo;replaced&amp;rdquo; instead of updated. Once upon a time I destroyed a MongoDB Atlas Cluster this way and lost all its data, because the &amp;ldquo;must be replaced&amp;rdquo; was hidden in a lot of terraform output and I simply didn&amp;rsquo;t see it.</description></item><item><title>Two Factor Auth, Password managers, and cloud sync</title><link>https://kevingimbel.de/blog/2020/01/two-factor-auth-password-managers-and-cloud-sync/</link><pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/blog/2020/01/two-factor-auth-password-managers-and-cloud-sync/</guid><description>For years I have not given much thought to passwords, security, or how to manage my passwords efficiently and securely. I usually would either save them in the browser or just re-use passwords (which of course is the worst). Around 7-8ish years ago I began to use password managers and password generators, and when 2FA became a more common thing I was enabling that on all services I could. 2FA (Two Factor Authentication) is a method of authentication where two parts are needed: A Password and a generated token, this token can be hardware based (e.</description></item><item><title>Deploy a static site with git</title><link>https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/</link><pubDate>Tue, 17 Jan 2017 21:28:38 +0100</pubDate><guid>https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/</guid><description>If you follow my blog you might recall that I switched from Jekyll hosted on GitHub to Hugo hosted on Uberspace. Beside the fact I had to create a custom Hugo theme for myself and learn how to run a Hugo blog/website I also had to think about how I am going to deploy my website. Hugo is a static site generator and when executed ($ hugo) it compiles the site from Markdown and HTML templates into a public directory with lots of folders and HTML files.</description></item><item><title>Bash script: ws</title><link>https://kevingimbel.de/blog/2017/01/bash-script-ws/</link><pubDate>Thu, 12 Jan 2017 19:22:48 +0100</pubDate><guid>https://kevingimbel.de/blog/2017/01/bash-script-ws/</guid><description>For the past year or so I had a little function in my .bash_profile file which made my interaction with the terminal roughly 9001% better - yeah, over 9000! This little function is called ws and makes switching between projects inside my workspace a lot easier. Both my private and work projects are inside the ~/Development directory. If I want to get to a project I would normally navigate like cd ~/Development/private/github/kevingimbel/kevingimbel.</description></item><item><title>Writing NodeJS cli tools</title><link>https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/</link><pubDate>Mon, 09 Jan 2017 18:02:48 +0100</pubDate><guid>https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/</guid><description>Over 2015 and 2016 I got more and more interested in automating my daily workflows with scripts. For this purpose I learned Bash Scripting (or Shell Scripting) and started writing my first scripts to automate repeating tasks, creating apache vhosts files for example. Recently I started exploring how to implement command line tools in NodeJS and this post should give an overview.
Shebang If you already know what a Shebang is skip to the next section</description></item><item><title>Farewell Jekyll, Hello Hugo</title><link>https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/</link><pubDate>Wed, 16 Nov 2016 19:04:42 +0100</pubDate><guid>https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/</guid><description>If you have visited my website in the past few weeks you might have notices a few things. First of all it looks different. Second, it is now served over HTTPS which is possible because I moved away from GitHub Pages and back to self-hosting my website. Third, and possible most important, I also moved away from Jekyll after using it for three years.
This very site you read right now is build with Hugo, a static site generator build by Steve Francia, Bjørn Erik Pedersen and a lot of contributors.</description></item><item><title>Speed up your Jekyll workflow</title><link>https://kevingimbel.de/blog/2015/12/speed-up-your-jekyll-workflow/</link><pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/blog/2015/12/speed-up-your-jekyll-workflow/</guid><description>Lately I had a hard time working with my own website. Whenever I wanted to make some updates, write a post or fix a little buggy thing it only took a few minutes of &amp;ldquo;work&amp;rdquo; to get me really frustrated. Jekyll, despite my love for it, has become horribly slow. My site, which I consider rather &amp;ldquo;simple&amp;rdquo;, took 17-20 seconds to build on every change! Changing the CSS? Rebuild entire site.</description></item><item><title>Snippet: SASS Source Maps with Gulp</title><link>https://kevingimbel.de/blog/2015/01/snippet-sass-source-maps-with-gulp/</link><pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/blog/2015/01/snippet-sass-source-maps-with-gulp/</guid><description>Yesterday I finally took a few moments to implement Source Maps with Gulp for one of our client projects at work. I wanted to use the benefits of Source Maps for quite some time but never actually found the time to wrap my head around it (aka throw in another Gulp plugin). Source Maps are used to connect your pre-compiled files, like Sass, with the later compiled CSS - so inside the Dev Tools you can see for every line of CSS from which Sass file it comes - this is super handy once your project get&amp;rsquo;s bigger!</description></item><item><title>Getting into vim - again</title><link>https://kevingimbel.de/blog/2015/01/getting-into-vim-again/</link><pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/blog/2015/01/getting-into-vim-again/</guid><description>It&amp;rsquo;s been some time since I first got my fingers on VIM. My first impression was - as everyones I guess - pretty bad. VIM is not that easy to understand, yet a powerful, shortcut-based, distraction free editor. I&amp;rsquo;ve already written about turning Sublime Text into VIM mode and my very first VIM impression, but back then I just copy &amp;amp; pasted everything I found on the Internet into my .</description></item><item><title>Noobish VIM</title><link>https://kevingimbel.de/blog/2014/07/noobish-vim/</link><pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/blog/2014/07/noobish-vim/</guid><description>Since I&amp;rsquo;m still trying to really get why so many (Front-End) Devs love VIM I tried to find a &amp;ldquo;good&amp;rdquo; way to integrate it into my daily workflow. Since I&amp;rsquo;m working in a relativley small company it&amp;rsquo;s most of the time stressy to get all things done and to keep an overview - so long story short: There&amp;rsquo;s not much time for new tools that don&amp;rsquo;t increase my workflow directly. VIM is one of these tools that don&amp;rsquo;t fully support my workflow at the moment.</description></item><item><title>Useful Web Developer Tools</title><link>https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/</link><pubDate>Fri, 13 Jun 2014 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/</guid><description>I myself always like to see what other developers use in their workflow: What tools? What plugin? Live-Reload, Pre-Processors, shortcuts - all that stuff. It&amp;rsquo;s always great to save some time, especially for repeating tasks or challenges. Today I want to share my list of tool that I use on a daily base for all kinds of things.
Browser-based The following tools are all for Chrome because I use Chrome for most of my development.</description></item><item><title>Vim - first impression</title><link>https://kevingimbel.de/blog/2014/05/vim-first-impression/</link><pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/blog/2014/05/vim-first-impression/</guid><description>When I first looked at Vim it was a very short experience that was literally as follows
# from the command line vim test.md *vim opens* &amp;#34;What&amp;#39;s that?&amp;#34; *CTRL + C* &amp;#34;How do I even close this?!&amp;#34; *opens browser, googles &amp;#34;how to close VIM&amp;#34;* ESC + :q That was it and that was my Vim experience for quite some time. However, lately I see more and more people talking about Vim being the single best editor for everything - no matter what language one writes.</description></item><item><title>Brackets vs. Sublime Text</title><link>https://kevingimbel.de/blog/2013/12/brackets-vs.-sublime-text/</link><pubDate>Wed, 25 Dec 2013 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/blog/2013/12/brackets-vs.-sublime-text/</guid><description>I first tried Brackets back in my Windows time. It was a very early version, kinda heavy and wonky and not what I wanted from an editor I use on a daily base at all. Just today I decided to give it a second look because beside VIM it is the editor I read quite a lot about latly. My first impression was: &amp;ldquo;Wow, that&amp;rsquo;s a simple, clean editor!&amp;rdquo; - exactly the thing I liked so much about Sublime Text 2 which I&amp;rsquo;ve been using for the last two years or so.</description></item></channel></rss>