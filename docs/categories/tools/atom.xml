<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us"><generator uri="https://gohugo.io/" version="0.70.0">Hugo</generator><title type="html">tools on KevOps</title><link href="https://kevingimbel.de/categories/tools/" rel="alternate" type="text/html" title="HTML"/><link href="https://kevingimbel.de/categories/tools/index.xml" rel="alternate" type="application/rss+xml" title="RSS"/><link href="https://kevingimbel.de/categories/tools/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2020-05-25T17:08:49+02:00</updated><id>https://kevingimbel.de/categories/tools/</id><entry><title type="html">Terrasave</title><link href="https://kevingimbel.de/blog/2020/04/terrasave/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2017/01/bash-script-ws/?utm_source=atom_feed" rel="related" type="text/html" title="Bash script: ws"/><link href="https://kevingimbel.de/blog/2018/04/til-bash-select/?utm_source=atom_feed" rel="related" type="text/html" title="TIL: Bash select"/><link href="https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/?utm_source=atom_feed" rel="related" type="text/html" title="Deploy a static site with git"/><link href="https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Writing NodeJS cli tools"/><id>https://kevingimbel.de/blog/2020/04/terrasave/</id><published>2020-04-24T00:00:00+00:00</published><updated>2020-04-24T00:00:00+00:00</updated><content type="html"><![CDATA[<p>I just released a tiny tool function I&rsquo;ve been using for some time called <a href="https://github.com/kevingimbel/terrasave" title="View terrasave source code on GitHub">terrasave</a>. It&rsquo;s a Bash / Fish function that prevents you from running <code>terraform</code> without the <code>-target</code> option.</p>
<h2 id="why-does-this-exist">Why does this exist?</h2>
<p>In terraform it is incredibly easy to destroy things with <code>terraform apply</code>. If you run apply terraform shows a huge output and sometimes you may overlook a thing being &ldquo;replaced&rdquo; instead of updated. Once upon a time I destroyed a MongoDB Atlas Cluster this way and lost all its data, because the &ldquo;must be replaced&rdquo; was hidden in a lot of terraform output and I simply didn&rsquo;t see it. I only realized when terraform logged &ldquo;Still destroying cluster&hellip;&rdquo; to the console.</p>
<p>Some terraform resources, like Amazon ECS Services, are not idempotent, so they change on every apply. This cluttered my terminal with stuff I could ignore on every change as well as unnecessary updates to the infra (ECS Services being replaced despite no changes were made).</p>
<p>To prevent this, I forced myself to only use terraform with the -target switch, and this tiny script helps me accomplish that.</p>
<h2 id="usage">Usage</h2>
<p>After <a href="https://github.com/kevingimbel/terrasave#installation" title="View installation instructions on GitHub.com">installing the tool</a> you can just work as you&rsquo;d normally do: <code>terrasave</code> acts as a shell alias for <code>terraform</code> so whenever you run <code>terraform</code> in a terminal, the call goes &ldquo;through&rdquo; the <code>terrasave</code> function. If the function detects <code>apply</code> but not <code>-target</code> it outputs an error and exits.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ terraform apply
Please run <span style="color:#e6db74">&#34;terraform apply&#34;</span> with -target option
</code></pre></div><p>If you <strong>must</strong> run terraform without a target you can do so by specifying an environment variable:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ TERRAFORM_SAVE_DISABLE_I_KNOW_WHAT_I_DO<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> terraform apply
</code></pre></div><p>You can get the source code and installation instructions on <a href="https://github.com/kevingimbel/terrasave">github.com/kevingimbel/terrasave</a>. Hopefully this little tool will save your infra. :)</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/devops" term="devops" label="devops"/><category scheme="https://kevingimbel.de/tags/terraform" term="terraform" label="terraform"/><category scheme="https://kevingimbel.de/tags/cli" term="cli" label="cli"/><category scheme="https://kevingimbel.de/tags/bash" term="bash" label="bash"/><category scheme="https://kevingimbel.de/tags/fish" term="fish" label="fish"/></entry><entry><title type="html">Two Factor Auth, Password managers, and cloud sync</title><link href="https://kevingimbel.de/blog/2020/01/two-factor-auth-password-managers-and-cloud-sync/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2017/03/using-the-terminal-the-prompt/?utm_source=atom_feed" rel="related" type="text/html" title="Using the Terminal: The Prompt"/><link href="https://kevingimbel.de/blog/2017/01/bash-script-ws/?utm_source=atom_feed" rel="related" type="text/html" title="Bash script: ws"/><link href="https://kevingimbel.de/blog/2015/01/snippet-sass-source-maps-with-gulp/?utm_source=atom_feed" rel="related" type="text/html" title="Snippet: SASS Source Maps with Gulp"/><link href="https://kevingimbel.de/blog/2014/01/labels-in-gmail/?utm_source=atom_feed" rel="related" type="text/html" title="Labels in GMail"/><link href="https://kevingimbel.de/blog/2020/01/auto-ssl-with-apache2/?utm_source=atom_feed" rel="related" type="text/html" title="Auto SSL With apache2"/><id>https://kevingimbel.de/blog/2020/01/two-factor-auth-password-managers-and-cloud-sync/</id><published>2020-01-25T00:00:00+00:00</published><updated>2020-01-25T00:00:00+00:00</updated><content type="html"><![CDATA[<p>For years I have not given much thought to passwords, security, or how to manage my passwords efficiently and securely. I usually would either save them in the browser or just re-use passwords (which of course is the worst). Around 7-8ish years ago I began to use password managers and password generators, and when <abbr title="Two Factor Authentication, a method of authentication where two parts are needed: A Password and a generated token">2FA</abbr>
 became a more common thing I was enabling that on all services I could. 2FA (Two Factor Authentication) is a method of authentication where two parts are needed: A Password and a generated token, this token can be hardware based (e.g. a tiny usb key that generates a token) or they can be time-based which is the most common usage I&rsquo;d say. I used Google Authenticator for this for years and all was good - until I had to factory-reset my phone and lost my Google Authenticator app with all its 2FA settings.</p>
<h2 id="why-i-lost-all-my-2fa-tokens-and-settings">Why I lost all my 2FA tokens and settings</h2>
<p>I falsely assumed that <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2">Google Authenticator</a> would somehow save the Time-based Tokens with my Google Account but that is not the case - they only exist on the device itself. Looking back that is probably the right choice, but I somehow missed it and only realized after receiving my replacement Pixel phone and setting it up again.</p>
<p>&ldquo;Alright&rdquo;, I thought, &ldquo;this is bad but I can just redo the setup and I&rsquo;m good to go.&rdquo; - Well, no. Since 2FA is a security feature you&rsquo;ll need to have a token ready when you want to deactivate it, which is needed in most cases to setup a new 2FA device. For this exact scenario you usually get a bunch of pre-created tokens, usually labeled as &ldquo;Recovery codes&rdquo; or &ldquo;Recovery tokens&rdquo;.</p>
<h2 id="recovery-codes">Recovery codes</h2>
<p>I had almost none saved. &ldquo;Past me&rdquo; was a idiot and didn&rsquo;t save the recovery codes properly or saved them on some old, long gone computer. I was left without recovery codes, without a working 2FA device, and with no way of resetting 2FA without codes. I checked my computer to find services I was still logged-in to and reset the 2FA settings - or recreated them - where ever it was possible without supplying a code.</p>
<p>I lost all access to my Discord account and had to create a new one because there is no way of resetting 2FA.</p>
<p>I could recover all really important stuff tho, like GitHub. I saved my recovery codes this time and made sure they are stored in a secure place - a good offline place would be a USB drive, a print-out in a safe; A good online place might be a special password manager database.</p>
<h2 id="password-manager">Password manager</h2>
<p>Around 2012/2013 i started using a Password Manager called KeyPassX. I meanwhile switched to <a href="https://keepassxc.org/">KeyPassXC</a> which is a community driven fork because the original KeyPassX does no longer receive updates. KeyPassXC has a great MacOS App and works well with multiple databases, so I can split my passwords across multiple databases, e.g. one for work and some for private usage.</p>
<p>It supports auto-fill with browser plugins and works completely offline. There is no syncing to a third-party cloud, no auto backups in the cloud, no anything; By default it is all on your local computer in an encrypted database file protected by password or key.</p>
<p>On my phone I have used <a href="https://play.google.com/store/apps/details?id=keepass2android.keepass2android&amp;hl=en_US">Keepass2Android</a> for some years now and it works like a charm. Keepass2Android can read, save, and merge the database in case it is changed on my computer and then synced to the phone or vice versa.</p>
<h2 id="2fa-tokens">2FA Tokens</h2>
<p>For 2FA tokens I now use <a href="https://github.com/andOTP/andOTP">andOTP</a>, an open source 2FA token generator app for Android which supports encrypted backups.</p>
<h2 id="sync-and-cloud-storage">Sync and cloud storage</h2>
<p>As a cloud storage solution I am using Nextcloud. Nextcloud is open source, as are all their official extensions, see <a href="https://github.com/nextcloud" title="View open source code by Nextcloud on GitHub">github.com/nextcloud</a>. Another benefit for me is that Nextcloud is developed and maintained by a Germany-based company, which is a nice added bonus and always good to see, since a lot of software comes out of the Silicon Valley filter bubble. I&rsquo;m increasingly looking to find software and services that do not rely on USA-based infrastructure, money, companies, or services. While laws such as <abbr title="General Data Protection Law">GDPR</abbr>
 protect European citizens even if the companies themselves are not within the EU, I feel better when the companies I do business with are closer to me, geographically and law-<em>ly</em> . Especially when it comes to storing my files.</p>
<p>Anyhow, Nextcloud is the sync and &ldquo;backup&rdquo; solution in my stack. It syncs the database files between my computer and my phone so that I can always access all passwords whenever I need them. On my computer and phone the databases are protected by passwords, all communication to Nextcloud is done over a encrypted connection (HTTPS), too.</p>
<p>I&rsquo;ve been using this solution for a bit over two years now and I am very happy with it. Before switching to Nextcloud I used Google Drive to sync my KeyPassX database files, but I am growing increasingly distrustful of Google, so I am trying to pull as much as I can away from its services. Nextcloud works just as good if not better than the Google Drive or Dropbox sync solutions.</p>
<p>Thank you for coming to my TED Talk, see ya.</p>
]]></content><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/workflow" term="workflow" label="workflow"/><category scheme="https://kevingimbel.de/tags/productivity" term="productivity" label="productivity"/><category scheme="https://kevingimbel.de/tags/password" term="password" label="password"/><category scheme="https://kevingimbel.de/tags/management" term="management" label="management"/><category scheme="https://kevingimbel.de/tags/sync" term="sync" label="sync"/><category scheme="https://kevingimbel.de/tags/cloud_storage" term="cloud_storage" label="cloud_storage"/><category scheme="https://kevingimbel.de/tags/2fa" term="2fa" label="2FA"/><category scheme="https://kevingimbel.de/tags/security" term="security" label="security"/><category scheme="https://kevingimbel.de/tags/android" term="android" label="android"/></entry><entry><title type="html">Deploy a static site with git</title><link href="https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2017/01/bash-script-ws/?utm_source=atom_feed" rel="related" type="text/html" title="Bash script: ws"/><link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/?utm_source=atom_feed" rel="related" type="text/html" title="Farewell Jekyll, Hello Hugo"/><id>https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/</id><published>2017-01-17T21:28:38+01:00</published><updated>2017-01-17T21:28:38+01:00</updated><content type="html"><![CDATA[<p>If you follow my blog you might recall that I switched from Jekyll hosted on GitHub to <a href="/farewell-jekyll-hello-hugo/">Hugo hosted on Uberspace</a>. Beside the fact I had to create a custom Hugo theme for myself and learn how to run a Hugo blog/website I also had to think about how I am going to deploy my website. Hugo is a static site generator and when executed (<code>$ hugo</code>) it compiles the site from Markdown and HTML templates into a <code>public</code> directory with lots of folders and HTML files. I could have fiddled with GitHub pages and created a <code>docs</code> directory with the live site inside but then I could have stayed with Jekyll in the first place. What made me move to Hugo beside the speed advantages was that I wanted to self-host my website again and use <a href="https://letsencrypt.org/">Let&rsquo;s Encrypt</a> to create SSL certificates and use HTTPS.</p>
<h3 id="so-what-is-a-static-site">So, what is a &ldquo;static site&rdquo;?</h3>
<blockquote>
<p>If you already know the answer, <a href="https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/#deploying-a-static-site
">skip to the next section</a>!</p>
</blockquote>
<p>As the name suggest a static site is - well - <em>static</em>. There&rsquo;s no fancy Backend to login and no Database required to fetch content. All the content comes from <a href="https://github.com/kevingimbel/kevingimbel.com/tree/8cc66cd61774e28628848bcfde58d93b8ba3cae1/content/post">a bunch of markdown files</a>. These files are then compiled into a lot of HTML files based on <a href="https://github.com/kevingimbel/kevingimbel.com/tree/8cc66cd61774e28628848bcfde58d93b8ba3cae1/themes/kevingimbel/layouts">templates</a> which in turn a template engine to get content into place. The template for my <a href="/about/">/about/</a> page looks like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{ define &#34;main&#34; }}
&lt;<span style="color:#f92672">section</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;page wrap&#34;</span> <span style="color:#a6e22e">aria-labeldyby</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;title&#34;</span> <span style="color:#a6e22e">aria-describedby</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;desc&#34;</span>&gt;
  &lt;<span style="color:#f92672">header</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;page-header&#34;</span>&gt;
    &lt;<span style="color:#f92672">h2</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;title&#34;</span>&gt;{{ .Title }}&lt;/<span style="color:#f92672">h2</span>&gt;
  &lt;/<span style="color:#f92672">header</span>&gt;
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;page-body&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;desc&#34;</span>&gt;
    {{ .Content }}
  &lt;/<span style="color:#f92672">div</span>&gt;
&lt;/<span style="color:#f92672">section</span>&gt;
{{ end }}
</code></pre></div><p>These 10 lines of code make up the default for single pages without a custom template. The words in curly brackets (e.g. <code>{{ .Content }}</code>) are variables filled by Hugo when the template is compiled. <code>{{ define &quot;main&quot; }}</code> defines the <code>main</code> block used inside the <a href="https://github.com/kevingimbel/kevingimbel.com/blob/8cc66cd61774e28628848bcfde58d93b8ba3cae1/themes/kevingimbel/layouts/_default/baseof.html#L36-L38"><code>baseof.html</code> template</a>. All these templates make up the final site. So, despite being &ldquo;static&rdquo; when finished a static site is not so static! It can be flexible and you can use template logic like conditions (<code>if/else</code>, <code>with</code>), loops (<code>range</code>), and with Hugo even custom <a href="http://gohugo.io/extras/shortcodes/">shortcodes inside your markdown</a>.</p>
<p>At the end of the day we get a static site. This site is compiled from our source files and consists of folders (for URLs) and files (lots of <code>index.html</code> files!) so our server (apache, nginx, a node app) can deliver the content to the client. You might know that by default apache will serve any files such as <code>index.html</code> or <code>index.htm</code> when a route is requested unless you use a dynamic system such as PHP, Ruby, or NodeJS to serve your files. When you load this article at <a href="https://kevingimbel.com/deploy-a-static-site-with-git/">https://kevingimbel.com/deploy-a-static-site-with-git/</a> you request a folder, <code>deploy-a-static-site-with-git</code>, located inside the web root directory of my server and the <code>index.html</code> file inside this folder gets served to you by Apache. This is the basics how static websites work - they&rsquo;re simply HTML files and folders!</p>
<h3 id="deploying-a-static-site">Deploying a static site</h3>
<p>So far we learned  that static sites are &ldquo;just&rdquo; folders and HTML files when generated. The only dependency they have to make them work is a Web Server. This can be apache, nginx, IIS, a simple nodeJS app, or even <code>python -m SimpleHTTPServer</code>. The most basic deployment for our website would be to upload the content of the generated folder (<code>public</code>) to our server using FTP. You might remember that this was the standard for having a website in the 90s were all websites were coded in Frames or tables. My first &ldquo;real website&rdquo; around 2008 was deployed that way. It was a mess.</p>
<p>What I did might be over-engineering in some way. I have all my source code in git so I set up a git repository on my server and push to this repository whenever I want to publish a new blog post, fix an issue, or change some templates/CSS. What&rsquo;s important about the repository is that it needs to be a <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server">bare repository</a>.</p>
<h4 id="setting-up-the-git-repository">Setting up the git repository</h4>
<p>The repository can be in any directory on your server which your user (the one you login with ssh) has access to. It should not be your web server root, that is <code>/var/www/</code> or <code>/var/www/html/</code> depending on your system since the files inside the bare repo could be exposed to the public this way. I created a directory outside the web server root in my users <code>home</code> directory, namely <code>$HOME/repository/kevingimbel.com</code>. The steps to setup the bare repository are as follows.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ ssh youruser@yourserver
$ mkdir -p $HOME/repository/kevingimbel.com
$ cd $HOME/repository/kevingimbel.com
$ git clone --bare https://github.com/kevingimbel/kevingimbel.com
</code></pre></div><p>These commands create the <code>repository</code> directory with a sub-directory <code>kevingimbel.com</code> inside. Inside this new directory I clone the git repository from GitHub with the <a href="https://git-scm.com/docs/git#git---bare"><code>--bare</code></a> flag set. This will not checkout the source code but instead setup a git repository which we can push to or pull from - just like we would do from GitHub. What we need to build the static site is <code>hugo</code> as executable on the server -and the source code of the site. &ldquo;Wait!&rdquo; I hear you say, &ldquo;Didn&rsquo;t you just say there <em>is no source code?!</em>&rdquo; - that&rsquo;s right. The bare repository holds no source code but it can <em>be pushed to</em>! When we push our code to this remote we can use a <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">git hook</a> to execute a set of scripts when a push is received. To do so, we use the <code>post-receive</code> hook. There are examples for each hook inside your newly created directory, e.g. <code>$HOME/repository/kevingimbel.com/hooks</code>.</p>
<h4 id="the-post-receive-hook">The post-receive hook</h4>
<p>The <code>post-receive</code> hook is executed after the git repository receives a new push. There are also <code>pre-</code> hooks which are executed before certain actions take place. You can use <code>pre-commit</code> for example to run a set of tests before you are able to write a commit message. I did this in for my example <a href="https://github.com/kevingimbel/nodesh/blob/master/scripts/pre-commit">node cli script nodesh</a> to run <a href="https://mochajs.org/">mocha</a> before I am able to commit. If a test fails and mocha exits with a non 0 code the commit is aborted. To build our static site after we push to the repository we will use the <code>post-receive</code> hook.</p>
<p>The <code>post-receive</code> hook I use can be found <a href="https://github.com/kevingimbel/kevingimbel.com/blob/master/scripts/post-receive">on GitHub</a>. The <code>post-receive</code> hook is a bash script which has access to a lot of built-in functions as well as all your users functions when a <code>source ~/.bash_profile</code> line is added to the top.</p>
<pre><code>#!/bin/sh

source ~/.bash_profile

repository_path=$HOME/repositories/kevingimbel.com
project_path=$HOME/subdomains/html
hugo_file_path=$HOME/hugosrc
css_path=$hugo_file_path/themes/kevingimbel/static/css
css_file=$css_path/style.css
base_theme_file=$hugo_file_path/themes/kevingimbel/layouts/_default/baseof.html
while read oldrev newrev refname
do
    # Get the name of the current branch
    branch=$(git rev-parse --symbolic --abbrev-ref $refname)

    # Checkout master branch
    if [ &quot;$branch&quot; = &quot;master&quot; ]; then
      git --work-tree=$hugo_file_path --git-dir=$repository_path checkout -f master

      # Get checksum of file
      file_shasum=$(shasum $css_file | awk -F' ' '{ print $1 }')

      # declare name of new CSS file
      new_css_file_name=&quot;style.$file_shasum.css&quot;

      # move style.css to the new CSS name (rename)
      mv $css_file $css_path/$new_css_file_name

      # replace name in template before hugo is build
      sed -i &quot;s/style\.css/${new_css_file_name}/g&quot; $base_theme_file

      hugo -b=&quot;https://kevingimbel.com&quot; -d=&quot;$project_path&quot; -s=&quot;$hugo_file_path&quot;
    fi
done
</code></pre><p>There happens quite a lot in my <code>post-receive</code> but the most import parts are the  <code>git checkout</code> with the <a href="https://git-scm.com/docs/git#git---work-treeltpathgt"><code>--work-tree</code></a> and <a href="https://git-scm.com/docs/git#git---git-dirltpathgt"><code>--git-dir</code></a> to tell git were the git repository is (<code>--git-dir</code>) and were the files should be checked-out to (<code>--work-tree</code>). I checkout the files to <code>$HOME/hugosrc</code>where the source code of my website is placed just like on GitHub. I then <a href="https://github.com/kevingimbel/kevingimbel.com/blob/master/scripts/post-receive#L33-L42">do some magic</a> to re-write my <code>style.css</code> file to a hashed-file. This is used to force browsers to re-load the CSS when the file has changed. After the style.css re-write is done and the css path inside the  <code>baseof.html</code> template is changed I build the site with <code>hugo</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">hugo -b<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://kevingimbel.com&#34;</span> -d<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$project_path<span style="color:#e6db74">&#34;</span> -s<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$hugo_file_path<span style="color:#e6db74">&#34;</span>
</code></pre></div><p><code>-b</code> is the base url, <code>-d</code> is the destination and <code>-s</code> is the source. This way the static site is generated into my document root folder ($home/subdomains/html) with the new source files checked-out by git into the <code>$HOME/hugosrc</code> directory. Hugo generates the site and logs all output to the terminal - which is nice to have. In case of a build error hugo stops and does not overwrite the existing, working site. This is also nice to have.</p>
<p>What&rsquo;s important is that the <code>post-receive</code> hook is executable, so you have to run <code>$ chmod +x post-receive</code> to set the <code>x</code> (or e<code>x</code>ecute) permission on the file.</p>
<h4 id="pushing-to-the-new-repository">Pushing to the new repository</h4>
<p>To push your code to the new repository you need to add it as a <a href="https://git-scm.com/docs/git-remote">remote</a> to your local git repository. To do so, use <code>git remote add</code> filling in the remote name and remote url parameters.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#75715e"># git remote add $name $url</span>
$ git remote add production ssh://YOUR_USER@YOUR_SERVER:/home/YOUR_USER/repository/gitrepo
</code></pre></div><p>Afterwards you are able to push your code with <code>git push production master</code>.</p>
<p>And that&rsquo;s it! This way I deploy and build my static site on my server using git. I am sure the script could be refactored and optimized more if I would dive deeper into git and git hooks - and I might do. At the moment it satisfies my needs and I am happy with it.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/categories/devops" term="devops" label="devops"/><category scheme="https://kevingimbel.de/tags/git" term="git" label="git"/><category scheme="https://kevingimbel.de/tags/hugo" term="hugo" label="hugo"/><category scheme="https://kevingimbel.de/tags/deployment" term="deployment" label="deployment"/><category scheme="https://kevingimbel.de/tags/bash" term="bash" label="bash"/></entry><entry><title type="html">Bash script: ws</title><link href="https://kevingimbel.de/blog/2017/01/bash-script-ws/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2015/01/snippet-sass-source-maps-with-gulp/?utm_source=atom_feed" rel="related" type="text/html" title="Snippet: SASS Source Maps with Gulp"/><link href="https://kevingimbel.de/blog/2014/01/labels-in-gmail/?utm_source=atom_feed" rel="related" type="text/html" title="Labels in GMail"/><link href="https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Writing NodeJS cli tools"/><link href="https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Useful Web Developer Tools"/><id>https://kevingimbel.de/blog/2017/01/bash-script-ws/</id><published>2017-01-12T19:22:48+01:00</published><updated>2017-01-12T19:22:48+01:00</updated><content type="html"><![CDATA[<p>For the past year or so I had a little function in my <code>.bash_profile</code> file which made my interaction with the terminal roughly 9001% better - yeah, over 9000! This little function is called <code>ws</code> and makes switching between projects inside my workspace a lot easier. Both my private and work projects are inside the <code>~/Development</code> directory. If I want to get to a project I would normally navigate like <code>cd ~/Development/private/github/kevingimbel/kevingimbel.com</code> - even with tab completion I am too lazy to type this every time I want to work on my website, so I wrote a script for it!</p>
<h3 id="the-script-ws">The script: <code>ws</code></h3>
<p>The script is actually a shell function and it looks like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#66d9ef">function</span> ws<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
  local workspace<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/Development&#34;</span>
	<span style="color:#75715e"># $1 is the target directory</span>
  local target_dir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span>
  <span style="color:#75715e"># We start searching from the workspace dir</span>
  cd $workspace
  <span style="color:#75715e"># -maxdepth is the max directories to go &#34;down&#34;</span>
  <span style="color:#75715e"># head -n1 gives back the first result</span>
  workspace_path<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>find . -maxdepth <span style="color:#ae81ff">3</span> -type d -name <span style="color:#e6db74">&#34;*</span>$target_dir<span style="color:#e6db74">*&#34;</span> | head -n1<span style="color:#66d9ef">)</span>
  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span>  -z <span style="color:#e6db74">&#34;</span>$workspace_path<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    echo <span style="color:#e6db74">&#34;Directory &#39;</span>$target_dir<span style="color:#e6db74">&#39; not found. Changing to </span>$workspace<span style="color:#e6db74">&#34;</span>
  <span style="color:#66d9ef">else</span>
    cd <span style="color:#e6db74">&#34;</span>$workspace_path<span style="color:#e6db74">&#34;</span>
  <span style="color:#66d9ef">fi</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>This function is placed <a href="https://github.com/kevingimbel/dotfiles/blob/997590a65c134326ca051e1e28a78f947673831d/.zshrc#L14-L28">inside my ~/.bash_profile</a> or <code>~/.zshrc</code> so the function is available on every terminal start. It might look odd if your not too farmiliar with shell scripts but it is really rather simple and basic - let&rsquo;s explore it line by line.</p>
<p>With <code>function ws()</code> we declare the function name. In shell scripts a function name has parentheses after it tho it does not take arguments this way (If you know why this is, <a href="https://github.com/kevingimbel/kevingimbel.com/issues">open an issue and explain it please</a> or <a href="https://twitter.com/_kevinatari">tweet me</a>!). The next lines declare a local variable, <code>workspace</code> and then <code>target_dir=$1</code> were I assign whatever is passed to the function as being the target directory the user is trying to find. Then, I execute <code>cd $workspace</code> to go to the workspace directory and start a search with <code>workspace_path=$(find -maxdepth 3 -type d -name &quot;*$target_dir*&quot; | head -n1)</code> - now that might look weird. What happens here is the following:</p>
<ul>
<li>We declare a variable, <code>workspace_path</code></li>
<li>We execute a function with <code>$()</code></li>
<li>We use <code>find . -maxdepth 3 -type d -name &quot;*$target_dor*&quot;</code> to search for a <code>d</code>irectory with a name similar to <code>$target_dir</code> (the variable from earlier)</li>
<li>We then pipe (<code>|</code>) the output from find to <code>head</code> and read in the first line <code>-n1</code> - this is the first match</li>
<li>The return value from <code>$(find ... | head -n1)</code> is then available in the <code>$workspace_path</code> variable</li>
</ul>
<p><code>$workspace_path</code> now holds whatever directory was found - or nothing. This is why we check if it is empty (<code>-z &quot;$workspace_path&quot;</code>) in the <code>if</code> block.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span>  -z <span style="color:#e6db74">&#34;</span>$workspace_path<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
  echo <span style="color:#e6db74">&#34;Directory &#39;</span>$target_dir<span style="color:#e6db74">&#39; not found. Changing to </span>$workspace<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">else</span>
  cd <span style="color:#e6db74">&#34;</span>$workspace_path<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">fi</span>
</code></pre></div><p>This reads: If <code>$workspace_path</code> is empty, then <code>echo</code> the directory was not found and notify the user we changed to <code>$workspace</code> with the <code>cd $workspace</code> earlier. Else, <code>cd</code> into the found directory. And that&rsquo;s it! Some examples can be seen in the screenshot below.</p>

<figure >
  

    <img src="/images/posts/2017/bash-ws/bash-ws-function-in-use.png"
      alt="Using the ws function to navigate through my workspace"
       />
    
  
  <figcaption>
    <p>
      Using the ws function to navigate through my workspace
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>I am sure the <code>ws</code> function can be improved more but it has served my needs well so far. One optimisation might be to use the second argument, <code>$2</code>, as parameter for <code>-maxdepth</code>.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/categories/devops" term="devops" label="devops"/><category scheme="https://kevingimbel.de/tags/cli" term="cli" label="cli"/><category scheme="https://kevingimbel.de/tags/bash" term="bash" label="bash"/><category scheme="https://kevingimbel.de/tags/scripting" term="scripting" label="scripting"/><category scheme="https://kevingimbel.de/tags/automation" term="automation" label="automation"/><category scheme="https://kevingimbel.de/tags/workflow" term="workflow" label="workflow"/><category scheme="https://kevingimbel.de/tags/productivity" term="productivity" label="productivity"/></entry><entry><title type="html">Writing NodeJS cli tools</title><link href="https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/?utm_source=atom_feed" rel="related" type="text/html" title="Getting into Performance Measurement"/><link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/?utm_source=atom_feed" rel="related" type="text/html" title="Endless Multi-Dimensional Navigation"/><link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/?utm_source=atom_feed" rel="related" type="text/html" title="A closer look to closure"/><link href="https://kevingimbel.de/blog/2014/05/passing-arguments-in-javascript/?utm_source=atom_feed" rel="related" type="text/html" title="Passing Arguments in JavaScript"/><link href="https://kevingimbel.de/blog/2014/02/pure-javascript-slider/?utm_source=atom_feed" rel="related" type="text/html" title="Pure JavaScript slider"/><id>https://kevingimbel.de/blog/2017/01/writing-nodejs-cli-tools/</id><published>2017-01-09T18:02:48+01:00</published><updated>2017-01-09T18:02:48+01:00</updated><content type="html"><![CDATA[<p>Over 2015 and 2016 I got more and more interested in automating my daily workflows with scripts. For this purpose I learned Bash Scripting (or Shell Scripting) and started writing my first scripts to automate repeating tasks, <a href="https://github.com/kevingimbel/vhost">creating apache vhosts</a> files for example. Recently I started exploring how to implement command line tools in NodeJS and this post should give an overview.</p>
<h3 id="shebang">Shebang</h3>
<blockquote>
<p>If you already know what a Shebang is skip to <a href="/writing-nodejs-cli-tools/#writing-a-tiny-node-cli-script">the next section</a></p>
</blockquote>
<p>Shell Scripts always start with a <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">Shebang</a> on the first line. This line is used to indicate which program is used to execute the following script. For Bash scripts the Shebang is <code>#!/bin/bash</code>. What the OS or program loader does when executing the script is the following. Consider this sample script named <code>hello.sh</code></p>
<pre><code>#!/bin/bash
echo &quot;Hello World!&quot;
</code></pre><p>When it is executed from the command line (cli) with <code>./hello.sh</code> the operating system executes the script (<code>echo &quot;Hello World!&quot;</code>) with <code>/bin/bash</code>. Equally, you could run <code>/bin/bash ./hello.sh</code>. When programming a bash script you can also set it to exit on every error, either with <code>set -e</code> or with a shebang similar to <code>#!/bin/bash -e</code>. The screenshot below demonstrates the difference when running a invalid shell script <code>bad.sh</code>.</p>

<figure >
  

    <img src="/images/posts/2017/node-cli/shell-shebang-example.png"
      alt="Executing a invalid bash script without shebang and with shebang and -e flag"
       />
    
  
  <figcaption>
    <p>
      Executing a invalid bash script without shebang and with shebang and -e flag
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>As you can see without the <code>#!/bin/bash -e</code> shebang the script will execute even after an error occurred - this might not be intended behavior. Anyway, the topic of this post is node and the Shebang in node is essential. NodeJS Scripts are JavaScript and cannot be run - like shell scripts - without an Shebang to tell the system to invoke them with node. The NodeJS Shebang looks a bit different and specifies the &ldquo;environment&rdquo; or <code>env</code> with <code>/usr/bin/env</code>. The Shebang then reads <code>#!/usr/bin/env node</code>. Without the Shebang NodeJS scripts will fail immediately after being invoked as seen in the following screenshot.</p>

<figure >
  

    <img src="/images/posts/2017/node-cli/node-without-and-with-shebang.png"
      alt="Node Script executed with and without shebang"
       />
    
  
  <figcaption>
    <p>
      Node Script executed with and without shebang
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>While it is not necessarily needed for scripts written in in Shell/Bash the Shebang cannot be omitted from NodeJS scripts intended to be run as command line program.</p>
<p>Well, that has been a fun excursion into the world of shell scripting. Back to node!</p>
<h3 id="writing-a-tiny-node-cli-script">Writing a tiny node cli script</h3>
<p>Since we now know how to use a Shebang and how to invoke out Node scripts from the command line we may write a script. Let&rsquo;s keep it simple. We will greet the person executing the script.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">#!/usr/bin/env node
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">sayHello</span> <span style="color:#f92672">=</span> () =&gt; {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`Hello, </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">USER</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>)
}

<span style="color:#a6e22e">sayHello</span>()
</code></pre></div><p>Let&rsquo;s save the script and run it with <code>$ node hello.js</code> from the command line.</p>

<figure >
  

    <img src="/images/posts/2017/node-cli/node-running-hello-js.png"
      alt="Running the hello.js script"
       />
    
  
  <figcaption>
    <p>
      Running the hello.js script
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>Now that&rsquo;s interesting: The script greets the currently logged-in user! That&rsquo;s the case because we make use of the <code>process</code> variable which holds information about the current environment - the <code>env</code> object for example holds your environment variables. Add a new function to <code>hello.js</code> to see the output.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">printEnv</span> <span style="color:#f92672">=</span> () =&gt; {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>)
}

<span style="color:#a6e22e">printEnv</span>()
</code></pre></div><p>You will see the <code>USER</code> variable is part of the environment object and holds the name of the logged-in user. This way node scripts can access terminal variables and use them. Run <code>export _test=123</code> and then <code>node hello.js</code> - <code>_test</code> is now part of the environment. By using the Environment we can make a script execute different tasks depending on the environment, as seen in the next snippet.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">log</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">message</span>, <span style="color:#a6e22e">level</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>) =&gt; {
  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">NODE_ENV</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;production&#39;</span>) {
    <span style="color:#a6e22e">writeLogFile</span>(<span style="color:#a6e22e">message</span>, <span style="color:#a6e22e">level</span>)
  } <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">message</span>)
  }
}

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">writeLogFile</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">message</span>, <span style="color:#a6e22e">level</span>) =&gt; {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#e6db74">&#39;Not implemented&#39;</span>)
  <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>)
}

<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;This is a test!&#34;</span>)
</code></pre></div><p>Here we have a log function which either runs the <code>writeLogFile</code> function when in production mode or logs to the console if we are in any other mode (development for example.)</p>

<figure >
  

    <img src="/images/posts/2017/node-cli/node-using-process-environment.png"
      alt="Making use of the environment in a node cli script"
       />
    
  
  <figcaption>
    <p>
      Making use of the environment in a node cli script
      
        
        
    </p> 
  </figcaption>
  
</figure>

<p>As you can see in the screenshot depending on the <code>NODE_ENV</code> variable a different function is executed. The environment can be set inline (<code>$ export NODE_ENV=production</code>) for the duration of the shell session or it can be set permanent, e.g. by adding it to the shell runtime file (<code>~/.zshrc</code> or <code>~/.bashrc</code>). You may also noticed the <code>process.exit(1)</code> inside the <code>writeLogFile</code> function. The <code>exit</code> function enables us to use exit codes to indicate if our script ended successful or not to other processes. If a script exits with <code>0</code> it was successful, everything else is considered an error. To see how a script exits you can run <code>echo $?</code> inside a terminal.</p>
<p>You can read more about exit codes in <a href="http://www.tldp.org/LDP/abs/html/exit-status.html">the resources of TLDP</a>.</p>
<p>So far we learned that Node CLI scripts:</p>
<ul>
<li>need a shebang, <code>#!/usr/bin/env node</code></li>
<li>are written in regular JavaScript</li>
<li>can access the environment</li>
<li>can exit using <code>process.exit(exit_code)</code></li>
<li>can utilize lots of Node packages</li>
</ul>
<p>And that&rsquo;s it for today. All the example scripts are <a href="https://github.com/kevingimbel/blog-node-cli-tools-data">available on GitHub</a>.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/nodejs" term="nodejs" label="nodejs"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/nodejs" term="nodejs" label="nodejs"/><category scheme="https://kevingimbel.de/tags/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/tags/cli" term="cli" label="cli"/></entry><entry><title type="html">Farewell Jekyll, Hello Hugo</title><link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2015/12/speed-up-your-jekyll-workflow/?utm_source=atom_feed" rel="related" type="text/html" title="Speed up your Jekyll workflow"/><id>https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/</id><published>2016-11-16T19:04:42+01:00</published><updated>2016-11-16T19:04:42+01:00</updated><content type="html"><![CDATA[<p>If you have visited my website in the past few weeks you might have notices a few things. First of all it looks different. Second, it is now served over HTTPS which is possible because I moved away from GitHub Pages and back to self-hosting my website. Third, and possible most important, I also moved away from Jekyll after using it for three years.</p>
<p>This very site you read right now is build with <a href="http://gohugo.io">Hugo</a>, a static site generator build by <a href="http://spf13.com/">Steve Francia</a>, <a href="https://github.com/bep">Bjørn Erik Pedersen</a> and a lot of <a href="https://github.com/spf13/hugo/graphs/contributors">contributors</a>. Hugo is written in <a href="https://golang.org/">Go</a> a programming language created at Google I have <a href="https://github.com/kevingimbel?language=go&amp;tab=repositories">been interested in lately</a>.
For me personally Go provides a lot of new challenges and things to learn. I worked with Front-End technologies like HTML and CSS as well as scripting languages like PHP and JavaScript for the better part of the past 6-7 years; &ldquo;professionally&rdquo; and officially since 2014. Go is entirely different to what I am used to and I like it. I enjoy playing around with it where in the past year or so I lost a big part of my passion for programming in the languages I already know. But why move away from Jekyll? And why choose Go?</p>
<h3 id="ruby">Ruby</h3>
<p>Jekyll is written in Ruby. I have no intention of learning anything related to Ruby. It is not lazyness or fear of a challenge but instead the simple truth that Ruby does not provide me with any benefits at the moment or in my foreseeable future. I am sure it has its place - like any language has - but I don&rsquo;t have the time nor the interest to dive into Ruby. I tried to host Jekyll on my own and it was always a hassle to set up the environment.</p>
<h3 id="go">Go</h3>
<p>Hugo on the other hand &ldquo;just works&rdquo;. Hugo is one binary file with zero dependencies after building and can just be executed. On a server with Go installed it&rsquo;s as easy as running <code>go get -v github.com/spf13/hugo</code> or if Go is not available there are pre-built binaries.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ wget https://github.com/spf13/hugo/releases/download/v0.17/hugo_0.17_Linux-64bit.tar.gz
$ tar -xzvf hugo_0.17_Linux-64bit.tar.gz
$ ln -s hugo_0.17_linux_amd64 hugo
$ chmod +x hugo
$ ln -s <span style="color:#66d9ef">$(</span>pwd<span style="color:#66d9ef">)</span>/hugo ~/bin
</code></pre></div><p>Another reason why I chose Hugo over <a href="https://www.staticgen.com/">any other static site generators</a> is because it is under active development thanks to <a href="https://github.com/bep">Bjørn Erik Pedersen</a>, has <a href="https://gohugo.io/overview/introduction/">excellent docs</a> and an active community.</p>
<p>The final reason why I decided to not just move away from GitHub Pages for my own SSL certificate but also away from Jekyll is: I want to learn Go. I can contribute to Hugo and poke around the source code if I need or want to, a thing I could not do with Ruby and Jekyll simply because I lack the skill. I&rsquo;m not yet any good at Go but having the interest and base to hack away in your static site generator is a big benefit after all.</p>
<p>As of today it&rsquo;s not all good yet. The new design is as always a work in progress and more of an experiment. The content of my site has changed drastically because I decided to not move all pages or all content but instead only move my articles. The <a href="/projects/">Projects</a> section is completley new and lists a selection of Projects I decided to showcase. As before, all source code of my website is <a href="https://github.com/kevingimbel/kevingimbel.com">available on GitHub.com</a> so feel free to look around.</p>
<p>Some things are still not working as I would like but I&rsquo;ll eventually get to them. After all, a personal website is always a work in progress.</p>
<p><em>Farewell Jekyll, it&rsquo;s been a pleasure for the past three years.</em></p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/hugo" term="hugo" label="hugo"/><category scheme="https://kevingimbel.de/tags/go" term="go" label="go"/><category scheme="https://kevingimbel.de/tags/development" term="development" label="development"/><category scheme="https://kevingimbel.de/tags/personal" term="personal" label="personal"/></entry><entry><title type="html">Speed up your Jekyll workflow</title><link href="https://kevingimbel.de/blog/2015/12/speed-up-your-jekyll-workflow/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/?utm_source=atom_feed" rel="related" type="text/html" title="Bullgit loves Jekyll"/><id>https://kevingimbel.de/blog/2015/12/speed-up-your-jekyll-workflow/</id><published>2015-12-16T00:00:00+00:00</published><updated>2015-12-16T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Lately I had a hard time working with my own website. Whenever I wanted to make some updates, write a post or fix a little buggy thing it only took a few minutes of &ldquo;work&rdquo; to get me really frustrated. Jekyll, despite my love for it, has become horribly slow. My site, which I consider rather &ldquo;simple&rdquo;, took 17-20 seconds to build on every change! Changing the CSS? Rebuild entire site. Changed one character in a JavaScript file? Rebuild entire site. Update one article? Rebuild entire site - this is frustrating and unnecessary! Luckily, I just found a perfect solution.</p>
<p>I was researching how to speed up a Jekyll site and if there was any news or whatsoever from the Community when I found <a href="https://github.com/jekyll/jekyll/issues/706">an old issue</a> on GitHub with a <a href="https://github.com/jekyll/jekyll/issues/706#issuecomment-25411224">comment by Parkr</a> that pointed me in the right direction: The <code>guard-jekyll-plus</code> Gem. As a person who has no idea of Ruby other that it has a rather beautiful looking syntax and <code>Gems</code> are somewhat related to it, I went on and set up the &ldquo;environment&rdquo; and programs needed. These were, basically, <code>bundle</code>, a <code>Gemfile</code> and a <code>Guardfile</code>.</p>
<pre><code># on Ubuntu
$ (sudo) apt-get install bundler
</code></pre><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#75715e"># The Gemfile</span>
source <span style="color:#e6db74">&#39;https://rubygems.org&#39;</span>
gem <span style="color:#e6db74">&#39;guard-jekyll-plus&#39;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#75715e"># The Guardfile</span>
<span style="color:#75715e"># Taken directly from https://github.com/imathis/guard-jekyll-plus</span>

ignore <span style="color:#e6db74">/^_site/</span> <span style="color:#75715e"># NOTE: this can interfere with Guard::LiveReload</span>

guard <span style="color:#e6db74">&#34;jekyll-plus&#34;</span>, <span style="color:#e6db74">:serve</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">true</span> <span style="color:#66d9ef">do</span>
  watch <span style="color:#e6db74">/.*/</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><p>The <code>Gemfile</code> - which seems to be a list of dependencies, similar to the <code>dependencies</code> list in a <code>package.json</code> file for Node - is probably the most basic representation of such a file. I first put in only the <code>gem 'guard-jekyll-plus'</code> line but then it started to throw errors and said I need to define a source - which I then did. Case closed, moving on.</p>
<p>The Guardfile is directly taken from <a href="https://github.com/imathis/guard-jekyll-plus">The guard-jekyll-plus GitHub repository</a>. As far as I understand it runs the watching and serving (normaly done by <code>jekyll --watch</code>) through the <a href="https://github.com/guard/guard"><code>Guard</code></a> task runner (<code>task runner</code> might be super simplified here) - so <code>Guard</code> and <code>guard-jekyll-plus</code> now decide when to rebuild things and what needs to be rebuild.</p>
<p>Once the configuration is set up you can run <code>$ bundle install</code> to install the dependencies and then <code>$ guard</code> to start the guard process. Guard will then run, serve up the Jekyll site on <code>localhost:4000</code> (or whatever is specified in jekyll <code>_config.yml</code>) and watch the files. From my previous 17-20 seconds of build time I am now <strong>down to 1.2 seconds</strong>. ONE POINT TWO SECONDS - this is amazing! Roughly 15x faster than just with Jekyll alone.</p>
<p>I have no idea why there is no mention of this method on the official Jekyll Website. Everyone who uses Jekyll and is frustrated with slow build times should consider looking at <code>Guard</code> and <code>jekyll-guard-plus</code>. I can highly recommend it.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/categories/cms" term="cms" label="cms"/><category scheme="https://kevingimbel.de/tags/jekyll" term="jekyll" label="jekyll"/><category scheme="https://kevingimbel.de/tags/ruby" term="ruby" label="ruby"/><category scheme="https://kevingimbel.de/tags/development" term="development" label="development"/></entry><entry><title type="html">Snippet: SASS Source Maps with Gulp</title><link href="https://kevingimbel.de/blog/2015/01/snippet-sass-source-maps-with-gulp/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/01/labels-in-gmail/?utm_source=atom_feed" rel="related" type="text/html" title="Labels in GMail"/><link href="https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Useful Web Developer Tools"/><link href="https://kevingimbel.de/blog/2013/10/from-0-to-sass/?utm_source=atom_feed" rel="related" type="text/html" title="From 0 To Sass"/><id>https://kevingimbel.de/blog/2015/01/snippet-sass-source-maps-with-gulp/</id><published>2015-01-22T00:00:00+00:00</published><updated>2015-01-22T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Yesterday I finally took a few moments to implement Source Maps with Gulp for one of our client projects at work. I
wanted to use the benefits of Source Maps for quite some time but never actually found the time to wrap my head around
it (aka throw in another Gulp plugin). Source Maps are used to connect your pre-compiled files, like Sass, with the
later compiled CSS - so inside the Dev Tools you can see for every line of CSS from which Sass file it comes - this is
super handy once your project get&rsquo;s bigger! Anyway, here&rsquo;s how to implement them with <a href="http://gulpjs.com0">Gulp</a>,
<a href="https://www.npmjs.com/package/gulp-sass">Gulp-Sass</a> and <a href="https://www.npmjs.com/package/gulp-autoprefixer">Autoprefixer</a>.</p>
<p>First of all, you need to install  the different gulp plugins (and gulp, if you haven&rsquo;t).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ npm install --save-dev gulp-sass gulp-sourcemaps gulp-autoprefixer
</code></pre></div><p>After everything is installed we&rsquo;ll create the basic Gulp setup.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">gulp</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp&#39;</span>),
      <span style="color:#a6e22e">sass</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-sass&#39;</span>),
      <span style="color:#a6e22e">prefix</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-autoprefixer&#39;</span>),
      <span style="color:#a6e22e">maps</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-sourcemaps&#39;</span>);

  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> {
        <span style="color:#a6e22e">scss</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;./skin/frontend/my-theme/default/scss/&#39;</span>,
        <span style="color:#a6e22e">css</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;./skin/frontend/my-theme/default/css/&#39;</span>
      }
</code></pre></div><p>Next the tasks will be created, I split them into 2, one for Sass and Source Maps and one for
Autoprefixer. It&rsquo;s important to create the Source Maps <em>before</em> using Autoprefixer, otherwise the line numbers won&rsquo;t be
right. This happen because Autoprefixer adds more properties to your compiled CSS!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;sass&#39;</span>, <span style="color:#66d9ef">function</span>() {
<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">src</span>( <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">scss</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;styles.scss&#39;</span>)
  .<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">maps</span>.<span style="color:#a6e22e">init</span>())
    .<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">sass</span>({ <span style="color:#a6e22e">outputStyle</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;compressed&#39;</span> }))
      .<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">maps</span>.<span style="color:#a6e22e">write</span>())
      .<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">dest</span>( <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">css</span> ))
});

<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;autoprefix&#39;</span>, <span style="color:#66d9ef">function</span>() {
<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">src</span>( <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">css</span> )
  .<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">prefix</span>(<span style="color:#e6db74">&#39;last 5 versions&#39;</span>, <span style="color:#e6db74">&#39;&gt; 1%&#39;</span>, <span style="color:#e6db74">&#39;ie8&#39;</span>))
  .<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">dest</span>( <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">css</span> ));  
});
</code></pre></div><p>First of all source maps need to be initalized, next a compressed css file from the SCSS files is created, the source
maps are written and we&rsquo;re all good! In a second task Autoprefixer takes the compiled, mapped CSS file and prefixes it
with whatever needs to be prefixed. The output looks like below (look at the right top of each rule set). Click on each
image to view it in full-size.</p>
<!-- raw HTML omitted -->
<p>In case you don&rsquo;t want your source maps in production you could split everything into 3 taks and run them in the order
<code>[&quot;sass&quot;, &quot;sourcemaps&quot;, &quot;autoprefix&quot;]</code> using <code>gulp.task()</code> and then later have the following production task.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;production&#39;</span>, [<span style="color:#e6db74">&#39;sass&#39;</span>, <span style="color:#e6db74">&#39;autoprefix&#39;</span>];

<span style="color:#75715e">// Use the following command to keep out Source Maps.
</span><span style="color:#75715e">// $ gulp production
</span></code></pre></div>]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/nodejs" term="nodejs" label="nodejs"/><category scheme="https://kevingimbel.de/categories/javascript" term="javascript" label="javascript"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/gulp" term="gulp" label="gulp"/><category scheme="https://kevingimbel.de/tags/sass" term="sass" label="sass"/><category scheme="https://kevingimbel.de/tags/workflow" term="workflow" label="workflow"/><category scheme="https://kevingimbel.de/tags/productivity" term="productivity" label="productivity"/></entry><entry><title type="html">Getting into vim - again</title><link href="https://kevingimbel.de/blog/2015/01/getting-into-vim-again/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/07/noobish-vim/?utm_source=atom_feed" rel="related" type="text/html" title="Noobish VIM"/><link href="https://kevingimbel.de/blog/2014/05/vim-first-impression/?utm_source=atom_feed" rel="related" type="text/html" title="Vim - first impression"/><link href="https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/?utm_source=atom_feed" rel="related" type="text/html" title="Useful Web Developer Tools"/><link href="https://kevingimbel.de/blog/2013/12/brackets-vs.-sublime-text/?utm_source=atom_feed" rel="related" type="text/html" title="Brackets vs. Sublime Text"/><id>https://kevingimbel.de/blog/2015/01/getting-into-vim-again/</id><published>2015-01-21T00:00:00+00:00</published><updated>2015-01-21T00:00:00+00:00</updated><content type="html"><![CDATA[<p>It&rsquo;s been some time since I first got my fingers on VIM. My first impression was - as everyones I guess - pretty bad.
VIM is not that easy to understand, yet a powerful, shortcut-based, distraction free editor. I&rsquo;ve already written about
<a href="/noobish-vim/">turning Sublime Text into VIM mode</a> and my <a href="/vim-first-impressions/">very first VIM impression</a>, but
back then I just copy &amp; pasted everything I found on the Internet into my <code>.vimrc</code>. Now with the new year I thought some
new thing to learn could be fun and I got back into <em>really</em> working with VIM.</p>
<h2 id="config-first">Config first</h2>
<p>The past week I&rsquo;ve done all my daily work at <a href="http://synoa.de">Synoa</a> in VIM. My current <code>.vimrc</code> is divided into 4
sections which I&rsquo;ll explain below.</p>
<h3 id="plugins">Plugins</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#75715e">&#34; Enable Pathogen to manage plugins</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">execute</span> <span style="color:#a6e22e">pathogen</span>#<span style="color:#a6e22e">infect</span>()<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>I&rsquo;ve replaced Vundle with Pathogen to load Plugins because to my (still noobish) eye it looks better and more easy to
use. Pathogen auto-loads all Plugins that are placed inside <code>~/.vim/bundle/</code> - currently the only Plugin I&rsquo;m using is
Emmet, because I&rsquo;d never ever use an editor again that&rsquo;s missing Emmet. The way Emmet works in VIM is a little bit weird
because of the different modes and key mappings when you come from a Sublime Text 2/3 background. Basically, you need to
hit <code>[CTRL]+[C]+[,]</code> after every Emmet snippet - beside that it works as expected.</p>
<h3 id="writin-style-and-syntax">Writin style and syntax</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#75715e">&#34; enable syntax highlighting</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">syntax</span> <span style="color:#a6e22e">on</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">&#34;setting the terminal color to 256 and theme</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">&#34; to Bad Wolf, which is places in ~/.vim/colors</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">t_Co</span>=<span style="color:#ae81ff">256</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">colorscheme</span> <span style="color:#a6e22e">badwolf</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">showmode</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">showcmd</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">modeline</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">ruler</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">&#34; line number</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">number</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">tabstop</span>=<span style="color:#ae81ff">2</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">shiftwidth</span>=<span style="color:#ae81ff">2</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">expandtab</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">backspace</span>=<span style="color:#a6e22e">indent</span>,<span style="color:#a6e22e">eol</span>,<span style="color:#a6e22e">start</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">smartindent</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">formatoptions</span>+=<span style="color:#a6e22e">t</span> <span style="color:#75715e">&#34; wikia said I need this</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">tw</span>=<span style="color:#ae81ff">120</span> <span style="color:#75715e">&#34; text width</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">colorcolumn</span>=<span style="color:#ae81ff">120</span> <span style="color:#75715e">&#34; adds a ruler to the right side of Vim</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">scrolloff</span>=<span style="color:#ae81ff">15</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">wmh</span>=<span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>I must admit that most of the VIM syntax and writing styles is still copy pasted from all over the Internet. In the
first block I&rsquo;m setting the colorshemes and basic VIM UI (show mode, show CMD, have a mode line; use a ruler). In the
second block there&rsquo;s settings for line numbers (always nice to have!) and tab width (2 spaces, always), smartindent (so
new lines can be auto-indented), general text width (where to place the ruler), scroll off by X lines so I never scroll
down to the end of the screen and the wmh (window min height) - this one is used so tabs in split view don&rsquo;t take up any
space.</p>
<h3 id="key-mappings">Key mappings</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#75715e">&#34; The &lt;Enter&gt; command behind each mapping executes the</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">&#34; command directly. Otherwise the command would be written</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">&#34; to the VIM &#39;console&#39; thing</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">&#34; start spell checking when hitting F5</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">map</span> &lt;<span style="color:#a6e22e">F5</span>&gt; :<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">spell</span> <span style="color:#a6e22e">spelllang</span>=<span style="color:#a6e22e">en_us</span> &lt;<span style="color:#a6e22e">Enter</span>&gt;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">&#34; switch to previous tab</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">nmap</span> &lt;<span style="color:#a6e22e">F2</span>&gt; :<span style="color:#a6e22e">tabp</span> &lt;<span style="color:#a6e22e">Enter</span>&gt;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">&#34; switch to next tab</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">nmap</span> &lt;<span style="color:#a6e22e">F3</span>&gt; :<span style="color:#a6e22e">tabn</span> &lt;<span style="color:#a6e22e">Enter</span>&gt;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">&#34; hold CTRL + k (up) or j (down)</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">map</span> &lt;<span style="color:#a6e22e">C</span>-<span style="color:#a6e22e">J</span>&gt; &lt;<span style="color:#a6e22e">C</span>-<span style="color:#a6e22e">W</span>&gt;<span style="color:#a6e22e">j</span>&lt;<span style="color:#a6e22e">C</span>-<span style="color:#a6e22e">W</span>&gt;<span style="color:#a6e22e">_</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">map</span> &lt;<span style="color:#a6e22e">C</span>-<span style="color:#a6e22e">K</span>&gt; &lt;<span style="color:#a6e22e">C</span>-<span style="color:#a6e22e">W</span>&gt;<span style="color:#a6e22e">k</span>&lt;<span style="color:#a6e22e">C</span>-<span style="color:#a6e22e">W</span>&gt;<span style="color:#a6e22e">_</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">&#34; remove information in which line the non-active file currently is</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">&#34; auto-expand path (opening files like :tabedit %%/)</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">cabbr</span> &lt;<span style="color:#a6e22e">expr</span>&gt; %% <span style="color:#a6e22e">expand</span>(<span style="color:#e6db74">&#39;%:p:h&#39;</span>)<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Mostly my key mappings have stayed the same, F5 is used for spell checking (which comes very handy!), F2 and F3 are used
to navigate between open tabs. The important part here is the <code>&lt;Enter&gt;</code> behind each command. This way the command will
be executed immediately, otherwise it is written into the little command line at the bottom of VIM.</p>
<p>New here is the mapping to switch between split view windows. When opening a new file with <code>:sp</code> I can now navigate
using <code>[CTRL]+[C]</code> and <code>j</code> to go &ldquo;down&rdquo; or <code>k</code> to go up - this is really handy.</p>
<p>The last line has been the break-through for me in beeing productive with VIM. When working with Magento and CSS, I
often need to open many files in the same directory, yet I tend to start inside the root. Normally I&rsquo;d have to write all
the path to where I am, like <code>:tabedit skin/frontend/namespace/default/scss/</code> when I&rsquo;m inside a Magento skin folder.
With this little helper I can type <code>:tabedit %%/</code> and once I write the <code>/</code> the path will expand to the current
directory.</p>
<h3 id="no-backups-no-swap">No backups, no swap!</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#75715e">&#34; No backups and no swap file</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">nobackup</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">noswapfile</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>The last part is still the same. Since I&rsquo;m using git and branches for everything I don&rsquo;t need any kind of backup or swap
file since I could always revert anything.</p>
<h2 id="working-in-vim">Working in VIM</h2>
<p>With these configurations I started to work in VIM. I tried changing and adjusting the themes a bit and in the end found my
self with a dark theme (bad wolf; a Doctor Who reference!) after using Tomorrow Night (light) for almost half a year. So
far after seven days the only thing I&rsquo;m really missing from time to time is Sublime Texts Multi Cursor Feature and
&ldquo;Search in Folder&rdquo; to find stuff inside the whole project. There are plugins for the later feature and multi cursor
editing can be archive using weird, cryptic command combinations but I&rsquo;m not familiar yet with either of these. So far I
enjoy the destraction free enviorment I&rsquo;m working in and only start Sublime Text when I can&rsquo;t find a particular
template.</p>
<p>Since I&rsquo;ve used Sublime Text in Vintage Mode for almost 6 months I&rsquo;m feeling comfortable enough with the basic
operations of using <code>y</code>ank, <code>d</code>elete or <code>p</code>ut to move around lines and edit code, <code>dit</code> (delete in tags) or <code>ei&quot;</code> (edit
iin &ldquo;) are things I don&rsquo;t use that often because they take too much time when they don&rsquo;t work right from the start.</p>
<p>Other then some hardcore-users I&rsquo;m also using my mouse wheel and the arrow keys to navigate inside VIM. I feel a lot
more comfortable doing it this way than I&rsquo;d feel using only <code>h, j, k, l</code>. After all I liked to get into VIM and I&rsquo;ll see
how it can benefit to my workflow or if it&rsquo;ll stay in my way at the end - like all other editors I&rsquo;ve tried - and I&rsquo;ll
return to my beloved Sublime Text 3.</p>
<p>Keep up with my advimtures (ha punny!) by subscribing to the <a href="/atom.xml">Atom Feed</a> or by following me on
<a href="https://twitter.com/_kevinatari">Twitter</a>:</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/vim" term="vim" label="vim"/><category scheme="https://kevingimbel.de/tags/editor" term="editor" label="editor"/><category scheme="https://kevingimbel.de/tags/tools" term="tools" label="tools"/></entry><entry><title type="html">Noobish VIM</title><link href="https://kevingimbel.de/blog/2014/07/noobish-vim/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/05/vim-first-impression/?utm_source=atom_feed" rel="related" type="text/html" title="Vim - first impression"/><link href="https://kevingimbel.de/blog/2013/12/brackets-vs.-sublime-text/?utm_source=atom_feed" rel="related" type="text/html" title="Brackets vs. Sublime Text"/><id>https://kevingimbel.de/blog/2014/07/noobish-vim/</id><published>2014-07-13T00:00:00+00:00</published><updated>2014-07-13T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Since I&rsquo;m still trying to really get why so many (Front-End) Devs love VIM I tried to find a &ldquo;good&rdquo; way to integrate it
into my daily workflow. Since I&rsquo;m working in a relativley small company it&rsquo;s most of the time stressy to get all things
done and to keep an overview - so long story short: There&rsquo;s not much time for new tools that don&rsquo;t increase my workflow
directly. VIM is one of these tools that don&rsquo;t fully support my workflow at the moment. While on one hand being good at
dealing with text and stuff, it is on the other hand (not-so-easily) capable of stuff like (S)FTP sync, auto complete
through Emmet (I still don&rsquo;t really get how this works in VIM) and the most important thing: It&rsquo;s hard to switch from
Sublime Text. I&rsquo;m so used to Sublime Text and it&rsquo;s shortcuts, multi-cursor, easy-to-use UI, plugins and what so not.</p>
<p>Anyway, there is a way to make Sublime Text behave more vim-ish. Originally I was searching for a Plugin or something or
a config file to get some VIM keybindings into my safe-zone Sublime Text enviroment. Turns out Sublime Test has this
built-in. In the &ldquo;ignore_packages&rdquo; settings is a package called &ldquo;Vintage&rdquo;. If this line is changed like seen below</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">	// ignore nothing 
	<span style="color:#e6db74">&#34;ignored_packages&#34;</span>: <span style="color:#f92672">[]</span>
</code></pre></div><p>Sublime Text will switch into &ldquo;Vintage&rdquo; mode which basically is VIM-like. It will have the default VIM modes (Command,
Insert, Visual) and all the keybindings. By default it will still start in Insert Mode, to switch this just set the
following inside the user settings:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">	// always start/open files in Command Mode 
	<span style="color:#e6db74">&#34;vintage_start_in_command_mode&#34;</span>: true
</code></pre></div><p>With these two settings Sublime Text is ready to run in Vi(m|n)tage mode. This means in particular most (or all?) Vim
commands are available and can be used such as ci&rdquo; (change in &ldquo;&quot;), x or r (delete character; replace character below the
cursor in command mode), y and p (yank and put; copy/paste) and so on. I&rsquo;ve been working this way for about one week now
and I must say that I really like it. It doesn&rsquo;t hold me back, I can still enjoy my other plugins and if I&rsquo;m ever
feeling lost I can still use all of Sublime Text&rsquo;s features. So that&rsquo;s it, my current setup to get a around some VIM
stuff while still being productive and fast daily. In my free-time and when writing articles I&rsquo;ve almost switched
completly to VIM to dig into it and see if it can replace Sublime Text one day.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/vim" term="vim" label="vim"/><category scheme="https://kevingimbel.de/tags/editor" term="editor" label="editor"/></entry><entry><title type="html">Useful Web Developer Tools</title><link href="https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/01/labels-in-gmail/?utm_source=atom_feed" rel="related" type="text/html" title="Labels in GMail"/><id>https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/</id><published>2014-06-13T00:00:00+00:00</published><updated>2014-06-13T00:00:00+00:00</updated><content type="html"><![CDATA[<p>I myself always like to see what other developers use in their workflow: What tools? What plugin? Live-Reload,
Pre-Processors, shortcuts - all that stuff. It&rsquo;s always great to save some time, especially for repeating tasks or
challenges. Today I want to share my list of tool that I use on a daily base for all kinds of things.</p>
<h2 id="browser-based">Browser-based</h2>
<p>The following tools are all for Chrome because I use Chrome for most of my development. If you&rsquo;re using another browser
this section will not be relevant and you can skip to the next list.</p>
<h3 id="web-developer">Web Developer</h3>
<p><a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm">Web Developer</a> is my personal
number 1 Chrome extension. It&rsquo;s packed with all kinds of functions like responsive previews, disable
actions (for JavaScript, Cookies, CSS) and what so not - in fact I&rsquo;m pretty sure this extension can do anything you&rsquo;ll
ever need on the front-end.</p>
<h3 id="awesome-screenshot">Awesome Screenshot</h3>
<p>Even though it is not my main screenshot tool (more later), <a href="https://chrome.google.com/webstore/detail/awesome-screenshot-captur/alelhddbbhepgpmgidjdcjakblofbmce">Awesome
Screenshot</a> really
is handy when it comes to quickly taking screenshots inside the browser. It can capture selections, visible parts and
even the whole website into one picture. The main reason I have this plugin is the easy way of writing into the
screenshots, adding notes or drawing rectangles and circles - that&rsquo;s really the only reason I have this extension.</p>
<h3 id="wappalyzer">Wappalyzer</h3>
<p><a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg">Wappalyzer</a> shows frameworks and
software used to build the page you&rsquo;re currently on. This tool is really sweet and I only use it because I&rsquo;ve been
looking into the source code of several websites to find hints on the used software. Wappalyzer can also show CSS
Frameworks (like Bootstrap or Foundation), JavaScript Frameworks (like jQuery and Prototype), Web Servers (Nginx or
Apache), Operating Systems (that one&rsquo;s interesting I&rsquo;ve no idea how this works) or programming languages (Ruby, PHP).
Wappalyzer also sends anonymous informations to its <a href="https://wappalyzer.com/">Web Platform</a> where you can see statistics
on used software. (This can be turned off in the settings).</p>
<h3 id="colorzilla">ColorZilla</h3>
<p><a href="https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp">ColorZilla</a> is a really simple
and easy-to-use tool with the purpose to get color informations from a website. It can be used by clicking the icon or
setting a custom shortcut.</p>
<h3 id="soundcloud">SoundCloud</h3>
<p>Not really a development tool but lots of <a href="https://soundcloud.com/atarijunge/likes">good music</a></p>
<h2 id="non-browser-based">Non Browser-based</h2>
<h3 id="sublime-text-3">Sublime Text 3</h3>
<p>After trying a lot of different editors (Some IDE-like, some Sublime Text like) I always came back to Sublime Text
after some while. It&rsquo;s stable, easy to use, easy to customize and has tons of plugins that can enhance your workflow.
Some of my absolute favorite plugins are:</p>
<ul>
<li><a href="http://emmet.io">Emmet</a>, Ex-Zen Coding for generating code from stuff like this <code>(div&gt;.header&gt;.body&gt;p{Test})*5</code></li>
<li><a href="http://wbond.net/sublime_packages/sftp">(S)FTP Plugin</a> Like the name says, used for (S)FTP deployment</li>
<li><a href="https://sublime.wbond.net/installation">Package Control</a> easily install packages from within sublime.</li>
</ul>
<h3 id="screencloud">ScreenCloud</h3>
<p><a href="http://screencloud.net">ScreenCloud</a> is my number 1 in-OS screenshot tool. It&rsquo;s capable of SFTP uploads, Dropbox
uploads, imgur uploads or local file saves so it has everything I need with 3 options of capturing the screen, the active
window or a selection. It&rsquo;s also multi-OS and runs on Mac, Windows and Linux.</p>
<h2 id="command-line">Command Line</h2>
<p>Sweet, sweet command line. Since I switched from Windows 7 to Ubuntu somewhere in summer 2013 I absolutely love the
command line. It&rsquo;s so much easier to navigate through files, find stuff, copy/delete/move/rename stuff - it&rsquo;s just way
faster. My Command Line is opened 24/7 and always there to get me access to whatever I want. So here follows some of my
favorite Command Line based tools.</p>
<h3 id="gulp">Gulp</h3>
<p>After fiddling around with <a href="http://gruntjs.com">Grunt</a> for quite some time I just recently switched to <a href="http://gulpjs.com">Gulp</a> due to the fact that is is A LOT easier, more logical and faster (as I can tell). However, I&rsquo;ll have to see it in real big projects first I guess. As of now, it powers this sites JS and CSS compression and compiling.</p>
<h3 id="image-magick">Image Magick</h3>
<p><a href="http://www.imagemagick.org/">Image Magick</a> is a simple command line tool to convert or even create images. I must admit
that I&rsquo;m using it mostly to resize images. Usage is as simple as <code>$ convert myimg.png -resize 100 myimg_100.png</code>, this
will resize myimg.png to 100px width and save it as myimg_100.png.</p>
<h3 id="vim">VIM</h3>
<p>It&rsquo;s been about 2-3 weeks now that I&rsquo;ve started to use vim more often and I currently really like it for writing
articles or README files and such like.  Developing in it still feels weird but well, maybe someday.
I&rsquo;m also continuously updating <a href="https://github.com/kevingimbel/config/blob/master/.vimrc">my .vimrc</a> on GitHub. In Vim
I&rsquo;m also using the <a href="http://emmet.io">Emmet</a> Plugin but the handling of it is a bit weird. In fact I haven&rsquo;t really found
out how exactly Emmet works with Vim. I&rsquo;m used to have Emmet support all the time and no different modes like VISUAL,
INSERT and COMMAND - so in any of these Emmet works. Anyway, if you know how it works give me a shout!</p>
<h3 id="bash">Bash</h3>
<p>That&rsquo;s not a tool. Or is it? Anyway, I&rsquo;d like to share my Bash Colors with you, they&rsquo;re also in the <a href="https://github.com/kevingimbel/config/blob/master/shell-color">config GitHub
repo</a> and given the fact they&rsquo;re standard non-fancy they
should work on almost all systems. Just edit your <code>.bashrc</code> or <code>.bash_profile</code> and add the PS1 line to it to have a
colored, good looking bash prompt.</p>
<p>So, what tools am I missing? Anything that&rsquo;s a absolute must-have? <a href="https://twitter.com/_kevinatari">Hit me up</a>!</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/chrome" term="chrome" label="chrome"/><category scheme="https://kevingimbel.de/tags/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/workflow" term="workflow" label="workflow"/></entry><entry><title type="html">Vim - first impression</title><link href="https://kevingimbel.de/blog/2014/05/vim-first-impression/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2013/12/brackets-vs.-sublime-text/?utm_source=atom_feed" rel="related" type="text/html" title="Brackets vs. Sublime Text"/><id>https://kevingimbel.de/blog/2014/05/vim-first-impression/</id><published>2014-05-26T00:00:00+00:00</published><updated>2014-05-26T00:00:00+00:00</updated><content type="html"><![CDATA[<p>When I first looked at Vim it was a very short experience that was literally as follows</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">	<span style="color:#75715e"># from the command line</span>
	vim test.md
	*vim opens*
	<span style="color:#e6db74">&#34;What&#39;s that?&#34;</span>
	*CTRL + C* 
	<span style="color:#e6db74">&#34;How do I even close this?!&#34;</span>
	*opens browser, googles <span style="color:#e6db74">&#34;how to close VIM&#34;</span>*
	ESC + :q
</code></pre></div><p>That was it and that was my Vim experience for quite some time. However, lately I see more and more people talking
about Vim being the single best editor for everything - no matter what language one writes. A site notice here: I
still use Sublime Text (2) daily and love it, I have it configured as I like, have all my Plugin and color schemes
and it just feels great. I tried some other editors like <a href="/brackets-vs-sublime-text/">Brackets</a> and
<a href="https://atom.io">Atom</a>, also <a href="http://www.jetbrains.com/webstorm/">WebStorm</a> and <a href="http://www.jetbrains.com/phpstorm/">PhpStorm</a>. The later two are great as IDEs but are not the way I like to write code because both are a lot slower than a
simple text editor like atom, sublime of vim. I guess that&rsquo;s the downside of having an IDE - for me it was too much (I still recommend
trying them, maybe they enhance your workflow). Atom is really like a  clone of Sublime Text running Web Technologies at
it&rsquo;s heart (Sublime Text is written in Python).</p>
<p><img src="https://i.kevingimbel.me/sc/vim_markdown.png" alt="&ldquo;Vim while writing a article&rdquo;" title="Vim while writing an article"></p>
<p>Anyway, back to Vim. Vim is, what surprised me first, a command line-based editor, there is a Graphic UI version called
gVim but I wanted to see how I can customize the command line one. Just like the normal bash has a
<code>.bashrc</code> Vim has its own <code>.vimrc</code> which defines the settings for all its (advanced) functionality and settings. When
you open Vim with from the command line with <code>vim my-file.md</code> you&rsquo;ll see a black editor with some &ldquo;~&rdquo; on the left.
You&rsquo;re now in &ldquo;normal&rdquo; mode and need to tab <code>i</code> to start <code>i</code>nserting stuff. From within the insert mode its really like
any other editor. When you leave the insert mode (by pressing <code>ESC</code>) you&rsquo;re back in the &ldquo;Normal&rdquo; mode where you can
easily navigate through your file and delete stuff. Deleting works pretty cool I guess, just double tab <code>d</code> to delete a
whole sentence or <code>x</code> to delete the character below the cursor. Or fancy stuff like <code>d + arrow up/down</code> to delete a
whole paragraph.</p>
<p>So basically everything in Vim is bound to keys and those keys can be combined (like <code>d</code>elete + up) and I am sure
there&rsquo;s even more power inside Vim when it comes to text manipulation, navigation, replacements, etc. Anyway, as long as
I haven&rsquo;t found out what stuff is possible I&rsquo;ll just share my <code>.vimrc</code> with you.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim">	{% <span style="color:#a6e22e">raw</span> %}<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">	&#34; vim:fdm=marker</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">nocompatible</span> <span style="color:#75715e">&#34; required by Vundle</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">filetype</span> <span style="color:#a6e22e">off</span> <span style="color:#75715e">&#34; required by Vundle</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">	&#34; Vundle Settings {{{</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">	&#34; set the runtime path to include Vundle and initialize</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">rtp</span>+=~<span style="color:#e6db74">/.vim/</span><span style="color:#a6e22e">bundle</span>/<span style="color:#a6e22e">Vundle</span>.<span style="color:#a6e22e">vim</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">call</span> <span style="color:#a6e22e">vundle</span>#<span style="color:#a6e22e">begin</span>()<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">	&#34; make Vundle manage itself.</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">Plugin</span> <span style="color:#e6db74">&#39;gmarik/Vundle.vim&#39;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">	&#34; Emmet - I just can not work without this powerful helper</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">Plugin</span> <span style="color:#e6db74">&#39;mattn/emmet-vim&#39;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">	&#34; Vim Airline is some kind of fancy status bar thingy I guess.</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">Plugin</span> <span style="color:#e6db74">&#39;bling/vim-airline&#39;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">	&#34; this needs to be called after all Plugins are loaded</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">call</span> <span style="color:#a6e22e">vundle</span>#<span style="color:#a6e22e">end</span>()<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">filetype</span> <span style="color:#a6e22e">plugin</span> <span style="color:#a6e22e">indent</span> <span style="color:#a6e22e">on</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">	&#34; }}}</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">	&#34; Syntax highlighting and vim style {{{</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">	&#34; enable syntax highlighting</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">syntax</span> <span style="color:#a6e22e">on</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">	&#34;setting the color scheme to github, which is places in ~/.vim/colors</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">t_Co</span>=<span style="color:#ae81ff">256</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">colorscheme</span> <span style="color:#a6e22e">Tomorrow</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">	&#34; vim Airline settings</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">	&#34; set airline to be displayed all the time (default is only in split mode)</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">laststatus</span>=<span style="color:#ae81ff">2</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">airline_left_sep</span> = <span style="color:#e6db74">&#39;▶&#39;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">airline_right_sep</span> = <span style="color:#e6db74">&#39;◀&#39;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">	&#34; line number</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">number</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">	&#34; }}}</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">	&#34; write settings {{{</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">tabstop</span>=<span style="color:#ae81ff">2</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">shiftwidth</span>=<span style="color:#ae81ff">2</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">backspace</span>=<span style="color:#a6e22e">indent</span>,<span style="color:#a6e22e">eol</span>,<span style="color:#a6e22e">start</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">smarttab</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">formatoptions</span>+=<span style="color:#a6e22e">t</span> <span style="color:#75715e">&#34; wikia said I need this</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">tw</span>=<span style="color:#ae81ff">120</span> <span style="color:#75715e">&#34; text width</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">colorcolumn</span>=<span style="color:#ae81ff">120</span> <span style="color:#75715e">&#34; addes a ruler to the right side of Vim</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">	&#34; }}}</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">	&#34; No backups and no swap file</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">nobackup</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">set</span> <span style="color:#a6e22e">noswapfile</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	{% <span style="color:#a6e22e">endraw</span> %}<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>So that&rsquo;s quite some stuff I guess. First of all, <a href="https://github.com/gmarik/Vundle.vim">Vundle</a> is the Plugin manager
for Vim, there are others but I chose this one because it is 99% written in VimL. This little thingy helps me keep track
of Plugins I use. Friendly.
<code>syntax on</code> simply turn on syntax highlighting. <code>set t_Co=256</code> sets the terminal colors to 256 colors so the
<code>colorscheme Tomorrow</code> (<a href="https://github.com/chriskempson/tomorrow-theme">here</a>) works. Next up is Airline, a &ldquo;better
statusbar&rdquo; for Vim. I saw this on a screenshot once and searched for it, what I first found was
<a href="https://github.com/Lokaltog/powerline">Powerline</a> but I then saw <a href="https://github.com/bling/vim-airline">Airline</a> and
chose it because it is written in VimL and I - as of now - try to avoid language mixin because I think it&rsquo;s a good idea
to keep Vim &ldquo;clean&rdquo; as long as possible. Airline can show in what mode I am, what Git Branch I&rsquo;m on, and a lot of other
stuff I haven&rsquo;t configured yet. I guess that&rsquo;ll be another blog post. The <code>airline_left_sep</code> and <code>airline_right_sep</code> are
the separators of the statusline (see the screenshot below, the seperators are down after &ldquo;Normal&rdquo; and before the &ldquo;1%&quot;)  which at the moment don&rsquo;t look as cool as I thought - have to fix this. Next up
tabstops, shiftwidth (self explaining), backspace (I&rsquo;ve no idea what this is but saw it in any .vimrc I found)
smarttabs, text width so Vim doesn&rsquo;t write until the end of the screen (I like small gaps to the right) and colorcolumn,
which is a ruler-like thingy to visually show the max text width. Last stuff: No backups, no swap files, according to a blog
post I found this isn&rsquo;t needed when working with version controls such as git.</p>
<p>The weird looking brackets are used to &ldquo;auto-close&rdquo; this section so that when I open my file only the description is
visible - this makes a long <code>.vimrc</code> a lot more readable.</p>
<p><img src="https://i.kevingimbel.me/sc/sc-26-01-13.png" alt="Vim with auto-closed sections" title="Vim with auto-closed sections"></p>
<p>So that&rsquo;s it, my tiny Vim experience and setup. As with every config things you can grab a copy of my <code>.vimrc</code> in the
<a href="https://github.com/kevingimbel/config/blob/master/.vimrc">Github Config Repo</a>.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/editor" term="editor" label="editor"/><category scheme="https://kevingimbel.de/tags/vim" term="vim" label="vim"/></entry><entry><title type="html">Brackets vs. Sublime Text</title><link href="https://kevingimbel.de/blog/2013/12/brackets-vs.-sublime-text/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2013/10/from-0-to-sass/?utm_source=atom_feed" rel="related" type="text/html" title="From 0 To Sass"/><id>https://kevingimbel.de/blog/2013/12/brackets-vs.-sublime-text/</id><published>2013-12-25T00:00:00+00:00</published><updated>2013-12-25T00:00:00+00:00</updated><content type="html"><![CDATA[<p>I first tried <a href="http://brackets.io">Brackets</a> back in my Windows time. It was a very early version, kinda heavy and wonky and not what I wanted from an editor I use on a daily base at all. Just today I decided to give it a second look because beside <a href="http://www.vim.org/">VIM</a> it is <em>the</em> editor I read quite a lot about latly. My first impression was: &ldquo;<em>Wow, that&rsquo;s a simple, clean editor!</em>&rdquo; - exactly the thing I liked so much about Sublime Text 2 which I&rsquo;ve been using for the last two years or so.</p>
<h2 id="functionality">Functionality</h2>
<h3 id="highlighting">Highlighting</h3>
<p>Bracket as well as Sublime Text comes with Syntax Highlighting for almost everything one needs: HTML, SCSS, CSS, JavaScript, Ruby, Python - all of these can be highlighted by default which, in my opinion, is a standard these days. However, as far as I can tell it is easier to customize the Highlight settings in Sublime Text (2) and with the standard Monokai Theme Sublime has a better highlighting than Brackets. Another point is that there is no way (as far as I found) to set a highlight language before saving a file in Brackets - so I can&rsquo;t have Markdown Highlighting for this post unless I save it once which is possible in Sublime Text.</p>
<h3 id="plugins--installation">Plugins + Installation</h3>
<p>Both editor support additional plugins to enhance the workflow. Both support <a href="http://emmet.io">Emmet</a> which is by far my most needed Plugin as well as FTP Solutions to upload on safe. Both of these are important plugin for my workflow because when developing on a (S)FTP Dev System uploading on save without another program running is a lot faster. I love it. In Sublime Text the easiest way to add new Plugin is through the <a href="https://sublime.wbond.net/installation">Package Controller</a> - Brackets comes with a build-in Package Manager that makes it super easy to add new Plugins. Here the point goes to Brackets for already build-in Package Management.</p>
<h3 id="ui--ux">UI / UX</h3>
<p>Both Editors have a clean and simple to understand UI. The only real difference that&rsquo;s notable in my opinion is that Brackets has open files on the top-left sidebar while Sublime Text has them on top organized as tabs (as well as in the sidebar when displayed). This is a difference at first when you come from Sublime Text and in my opinion it&rsquo;s easier to have open files at the top. Nevertheless in both editors it&rsquo;s possible to go through all open files by hitting <code>CMD + Tab</code> which comes very handy. A huge downside of Brackets is that it&rsquo;s not possible to have new files unsaved and then close the editor. In Sublime unsaved files stays as unsaved inside the editor until it is opened the next time. I really like this because in case of a sudden system crash, an electricity failure or whatever else files can still be found after re-booting. Highfive Sublime Text.</p>
<p>~Another thing I really miss in Brackets and I got unbelievable used to is multi-select. In Sublime Text it&rsquo;s possible to select multiple points inside a document when holding CMD while clicking inside the document so you can edit as many rows as you want at once - unbelievable useful!~<br>
As <a href="https://github.com/GuidoJansen">Guido Jansen</a> pointed out in <a href="https://github.com/kevingimbel/kevingimbel.github.io/issues/4">Issue #4</a> brackets now supports multiple lines.</p>
<h3 id="live-preview">Live Preview</h3>
<p>Bracket comes with a Live Preview functionality that allows to display a file inside the browser that&rsquo;ll be updated in real time as you type. I couldn&rsquo;t think of a scenario where I&rsquo;d need a real-time preview of my file to be honest but it&rsquo;s a cool feature anyway.</p>
<h3 id="auto-complete">Auto-Complete</h3>
<p>Both Sublime Text and Brackets have auto-complete for CSS. While Sublime Text &ldquo;only&rdquo; supports basic auto-complete (e.g. typing <code>'hei' + tab</code> will get you <code>height: </code>) Brackets supports to &ldquo;Quick Edit&rdquo; colors (right-click on a color or use <code>CMD+E</code> when hovering it) to bring up a color dialog as show below. This is a nice feature when trying to find a color.</p>
<p><img src="https://i.kevingimbel.me/sc/screenshot-53-24.png" alt="Quick Edit Colors in Brackets" title="Quick Edit Colors in Brackets"></p>
<p>Another thing both support is the auto-closing of HTML tags (e.g. <code>&lt;article&gt;</code> will get you <code>&lt;article&gt;&lt;/article&gt;</code>).
Unfortunately Brackets does not query SCSS variables. When you define your variables in Sublime and type <code>$color--</code> Sublime Text shows all variables starting with <code>$color--</code> - that&rsquo;s a thing I really miss in Brackets.</p>
<h3 id="debugging">Debugging</h3>
<p>Brackets comes with build-in JSHint support which is really useful especially for JavaScript beginners like I&rsquo;m one. You can see in-editor what errors you made - really great!
I&rsquo;m pretty sure there&rsquo;s a Sublime Text Plugin for this, too but having it build-in is just a great feature. What I&rsquo;m missing on the other hand is spell-checking. As non-native English speaker spell-checking is always a great thing.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;m impressed by Brackets, it&rsquo;s a simple and great editor and I&rsquo;ll definitely keep an eye on it. It&rsquo;s a good, free alternative to Sublime Text 2 (which costs 75$) and worth a try. However, depending on my current workflow I&rsquo;ll stick to Sublime Text for most of my work.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/tools" term="tools" label="tools"/><category scheme="https://kevingimbel.de/tags/tooling" term="tooling" label="tooling"/><category scheme="https://kevingimbel.de/tags/software" term="software" label="software"/><category scheme="https://kevingimbel.de/tags/editor" term="editor" label="editor"/></entry></feed>