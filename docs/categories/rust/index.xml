<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on KevOps</title><link>https://kevingimbel.de/categories/rust/</link><description>Recent content in rust on KevOps</description><generator>Hugo -- gohugo.io</generator><language>en_US</language><lastBuildDate>Mon, 31 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kevingimbel.de/categories/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Passt</title><link>https://kevingimbel.de/project/passt/</link><pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/project/passt/</guid><description>passt is a CLI tool and library that can be used to generate random strings, e.g. for use as passwords. It is very &amp;ldquo;weak&amp;rdquo; in that it doesn&amp;rsquo;t use any &amp;ldquo;real&amp;rdquo; cryptography and should therefor not be used as an actual password generator.
You can use passt to generate random test input when testing software tho.
Up to date information can be found on GitHub https://github.com/kevingimbel/passt.
Usage: CLI Install
$ cargo install passt Arguments</description></item><item><title>Mip</title><link>https://kevingimbel.de/project/mip/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/project/mip/</guid><description>mip gets the local IP address by requesting http://httpbin.org/ip (or a custom endpoint) and parsing the returned output.
It has 0 dependencies and only relies on the Rust std lib.
Usage Add the following to Cargo.toml.
[dependencies] mip = &amp;#34;0.4.0 Then use it like
use mip::IP; fn main() { println!(&amp;#34;My IP is {}&amp;#34;, IP::is()); } Or without use fn main() { println!(&amp;#34;My IP is {}&amp;#34;, mip::IP::is()); } Custom Endpoint Instead of using httpbin.</description></item><item><title>Yip</title><link>https://kevingimbel.de/project/yip/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://kevingimbel.de/project/yip/</guid><description>A Rust TCP server that responds with callers&amp;rsquo; IPv4 address
About This server is the counter part to mip. It responds with the callers&amp;rsquo; IP address on request. That&amp;rsquo;s it.
Usage Cargo Run the server with cargo run, then connect to it on port 8111.
Binary Build the binary for your system with cargo.
$ cargo build --release Then copy the binary from target/release/yip to some place in your $PATH. Afterwards the server can be started by running yip.</description></item></channel></rss>