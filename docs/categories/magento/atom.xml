<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us"><generator uri="https://gohugo.io/" version="0.63.1">Hugo</generator><title type="html">magento on KevOps</title><link href="https://kevingimbel.de/categories/magento/" rel="alternate" type="text/html" title="HTML"/><link href="https://kevingimbel.de/categories/magento/index.xml" rel="alternate" type="application/rss+xml" title="RSS"/><link href="https://kevingimbel.de/categories/magento/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2020-02-24T11:12:03+01:00</updated><id>https://kevingimbel.de/categories/magento/</id><entry><title type="html">Magento: Add fields to the Admin Backend</title><link href="https://kevingimbel.de/blog/2014/08/magento-add-fields-to-the-admin-backend/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://kevingimbel.de/blog/2014/05/magento-get-and-set-variables-in-config.xml/?utm_source=atom_feed" rel="related" type="text/html" title="Magento: get and set variables in config.xml"/><id>https://kevingimbel.de/blog/2014/08/magento-add-fields-to-the-admin-backend/</id><published>2014-08-27T00:00:00+00:00</published><updated>2014-08-27T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Today I had a task at work that first sounded rather easy: Add a field to the Admin backend, namely
<em>System-&gt;Config-&gt;Catalog</em> where the user could later insert some SKUs to control which products are shown on the home
page. The first resources I found on how to edit the Backend where all suggesting to create a Module and then create a
settings page. Not only was this rather complex it was also way too &ldquo;over engineered&rdquo; for a simple thing like a text
field. So I continued searching and found <a href="http://prattski.com/2008/09/29/magento-add-custom-module-for-custom-admin-config-options/">this
post</a> about creating fields
in the backend only with XML.</p>
<p>That was easy and fair enough I thought and so I gave it a try. First however I created a Module in
<code>app/code/community/Synoa</code> (<em>community</em> because this can be reused and is not directly project specific). My folder
structure is really simple since I don&rsquo;t need much:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">-app/code/community
 -Synoa
  -FeaturedProducts
   -etc
    -config.xml
    -system.xml
</code></pre></div><p>In <code>config.xml</code> is the default Module configuration. In my case the following XML.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
 <span style="color:#f92672">&lt;config</span><span style="color:#f92672">&gt;</span>
   <span style="color:#f92672">&lt;modules</span><span style="color:#f92672">&gt;</span>
     <span style="color:#f92672">&lt;Synoa_FeaturedProducts</span><span style="color:#f92672">&gt;</span>
       <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>0.0.1<span style="color:#f92672">&lt;/version&gt;</span>
     <span style="color:#f92672">&lt;/Synoa_FeaturedProducts&gt;</span>
   <span style="color:#f92672">&lt;/modules&gt;</span>
<span style="color:#f92672">&lt;/config&gt;</span>
</code></pre></div><p>The really important and <strong>amazing</strong> part happens in <code>system.xml</code>. The way of adding fields as shown below shows how
amazingly flexible Magento can be. When I tried it out and found that it worked right away I was really impressed.
Magento&rsquo;s Module System, where the Module Name is equal to the folder it is in, e.g. <code>Mage_Core_Block_Html_Link</code> is in
<code>Mage/Core/Block/Html/Link.php</code>, also applies to this XML configuration.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;config</span><span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;sections</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;catalog</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;groups</span><span style="color:#f92672">&gt;</span>
      <span style="color:#f92672">&lt;featured_products</span> <span style="color:#a6e22e">translate=</span><span style="color:#e6db74">&#34;label&#34;</span><span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;label</span><span style="color:#f92672">&gt;</span>Featured Products<span style="color:#f92672">&lt;/label&gt;</span>
        <span style="color:#f92672">&lt;frontend_type</span><span style="color:#f92672">&gt;</span>text<span style="color:#f92672">&lt;/frontend_type&gt;</span>
        <span style="color:#f92672">&lt;sort_order</span><span style="color:#f92672">&gt;</span>50<span style="color:#f92672">&lt;/sort_order&gt;</span>
        <span style="color:#f92672">&lt;show_in_default</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_default&gt;</span>
        <span style="color:#f92672">&lt;show_in_website</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_website&gt;</span>
        <span style="color:#f92672">&lt;show_in_store</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_store&gt;</span>
        <span style="color:#f92672">&lt;fields</span><span style="color:#f92672">&gt;</span>
          <span style="color:#f92672">&lt;product_skus</span> <span style="color:#a6e22e">translate=</span><span style="color:#e6db74">&#34;label&#34;</span><span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;label</span><span style="color:#f92672">&gt;</span>Insert product skus here<span style="color:#f92672">&lt;/label&gt;</span>
            <span style="color:#f92672">&lt;frontend_type</span><span style="color:#f92672">&gt;</span>text<span style="color:#f92672">&lt;/frontend_type&gt;</span>
            <span style="color:#f92672">&lt;sort_order</span><span style="color:#f92672">&gt;</span>50<span style="color:#f92672">&lt;/sort_order&gt;</span>
            <span style="color:#f92672">&lt;show_in_default</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_default&gt;</span>
            <span style="color:#f92672">&lt;show_in_website</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_website&gt;</span>
            <span style="color:#f92672">&lt;show_in_store</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_store&gt;</span>
          <span style="color:#f92672">&lt;/product_skus&gt;</span>
        <span style="color:#f92672">&lt;/fields&gt;</span>
      <span style="color:#f92672">&lt;/featured_products&gt;</span>
    <span style="color:#f92672">&lt;/groups&gt;</span>
  <span style="color:#f92672">&lt;/catalog&gt;</span>
<span style="color:#f92672">&lt;/sections&gt;</span>
<span style="color:#f92672">&lt;/config&gt;</span>
</code></pre></div><p>Well quite a lot of stuff happens here, let&rsquo;s break that down.</p>
<h3 id="sections">Sections</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"> <span style="color:#f92672">&lt;sections</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;catalog</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;/catalog&gt;</span>
 <span style="color:#f92672">&lt;/sections&gt;</span>
</code></pre></div><p>This part defines in what menu (in the backend on the left) the new fields will be inserted. In this case it&rsquo;s the
Catalog Menu and there the first Sub-Menu point (which is also named Catalog).</p>
<h3 id="groups">Groups</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;groups</span><span style="color:#f92672">&gt;</span>
 <span style="color:#f92672">&lt;group_name</span><span style="color:#f92672">&gt;</span>
 <span style="color:#f92672">&lt;/group_name&gt;</span>
<span style="color:#f92672">&lt;/groups&gt;</span>
</code></pre></div><p>Groups define the &ldquo;containers&rdquo; for settings. These are the boxes on the right part of the screen. Because describing it
is rather stupid, here&rsquo;s a picture of the new admin menu and it&rsquo;s container (the group).
![&ldquo;Custom field in the backend.&quot;](<a href="https://i.kevingimbel.me/sc/Screenshot">https://i.kevingimbel.me/sc/Screenshot</a> at 13-52-42.png)</p>
<p>Lastly inside the group the content is defined. The wrapping tag can have any valid XML name you want, in my case it is
<code>&lt;featured_products&gt;</code> the <code>translate=&quot;label&quot;</code> attribute tells Magento to translate the label if there is a translation
available, either in <code>translate.csv</code> or <code>myCompany_MyModule.csv</code> - that&rsquo;s up to you.</p>
<p>Inside the container is more stuff that could need some explanation.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;my_namespace</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;label</span><span style="color:#f92672">&gt;</span>Featured Products<span style="color:#f92672">&lt;/label&gt;</span>
  <span style="color:#f92672">&lt;frontend_type</span><span style="color:#f92672">&gt;</span>text<span style="color:#f92672">&lt;/frontend_type&gt;</span>
  <span style="color:#f92672">&lt;sort_order</span><span style="color:#f92672">&gt;</span>50<span style="color:#f92672">&lt;/sort_order&gt;</span>
  <span style="color:#f92672">&lt;show_in_default</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_default&gt;</span>
  <span style="color:#f92672">&lt;show_in_website</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_website&gt;</span>
  <span style="color:#f92672">&lt;show_in_store</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_store&gt;</span>
<span style="color:#f92672">&lt;my_namespace</span><span style="color:#f92672">/&gt;</span>
</code></pre></div><ul>
<li><code>label</code> - The label to show at the top (headline)</li>
<li><code>frontend_type</code>- type of the field in the frontend</li>
<li><code>sort_order</code> - position in the list</li>
<li><code>show_in_default</code> - available in default view</li>
<li><code>show_in_website</code> - available in website view</li>
<li><code>show_in_store</code> - available in default store view
The show tags determine in what store config &ldquo;scope&rdquo; (after setting it in the top right) the option is available.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;fields</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;product_skus</span> <span style="color:#a6e22e">translate=</span><span style="color:#e6db74">&#34;label&#34;</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;label</span><span style="color:#f92672">&gt;</span>Insert product skus here (csv, e.g 123, 144, 255)<span style="color:#f92672">&lt;/label&gt;</span>
    <span style="color:#f92672">&lt;frontend_type</span><span style="color:#f92672">&gt;</span>text<span style="color:#f92672">&lt;/frontend_type&gt;</span>
    <span style="color:#f92672">&lt;sort_order</span><span style="color:#f92672">&gt;</span>50<span style="color:#f92672">&lt;/sort_order&gt;</span>
    <span style="color:#f92672">&lt;show_in_default</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_default&gt;</span>
    <span style="color:#f92672">&lt;show_in_website</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_website&gt;</span>
    <span style="color:#f92672">&lt;show_in_store</span><span style="color:#f92672">&gt;</span>1<span style="color:#f92672">&lt;/show_in_store&gt;</span>
  <span style="color:#f92672">&lt;/product_skus&gt;</span>
<span style="color:#f92672">&lt;/fields&gt;</span>
</code></pre></div><ul>
<li><code>label</code> - Label on the left (field description)</li>
<li><code>sort_order</code>- position <em>inside</em> the list</li>
</ul>
<p>I&rsquo;m not entirely sure what the store variables do here, but I guess they configure if and where the field can be
<code>echo</code>ed in the frontend.</p>
<p>And that&rsquo;s it. Without a single line of PHP fields can be added to the backend in Magento. Retrieving the values of
those fields is also easy, as the following example shows.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">&lt;?php</span> <span style="color:#66d9ef">echo</span> <span style="color:#a6e22e">Mage</span><span style="color:#f92672">::</span><span style="color:#a6e22e">getStoreConfig</span>(<span style="color:#e6db74">&#39;catalog/featured_products/product_skus&#39;</span>); <span style="color:#75715e">?&gt;</span>
</code></pre></div><p>The logic here is simply <code>section/groupname/fieldname</code>. This fits pretty good with the previously mentioned folder
structure of Magento.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/magento" term="magento" label="magento"/><category scheme="https://kevingimbel.de/categories/php" term="php" label="php"/><category scheme="https://kevingimbel.de/categories/backend" term="backend" label="backend"/><category scheme="https://kevingimbel.de/tags/magento" term="magento" label="magento"/><category scheme="https://kevingimbel.de/tags/xml" term="xml" label="xml"/><category scheme="https://kevingimbel.de/tags/php" term="php" label="php"/></entry><entry><title type="html">Magento: get and set variables in config.xml</title><link href="https://kevingimbel.de/blog/2014/05/magento-get-and-set-variables-in-config.xml/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://kevingimbel.de/blog/2014/05/magento-get-and-set-variables-in-config.xml/</id><published>2014-05-27T00:00:00+00:00</published><updated>2014-05-27T00:00:00+00:00</updated><content type="html"><![CDATA[<p>The other day I had a kind of easy problem in Magento that still took me quite some time to solve. In the shop I&rsquo;m
working on we had a contact form module that sents and validates emails which worked perfectly fine on one page (the one it was made for),
however this form should be &ldquo;cloned&rdquo; to be present on 4 pages with different email addresses. Since Magentos Core is
MVC-like I  believed there would be an easy way to pass email addresses to the Controller. Indeed I found a way to do
so, and I&rsquo;m happy if someone finds a better way!</p>
<p>I managed to set the different emails in the config.xml (located in <code>/mymodule/etc/config.xml</code>) like so</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"> # ... Default Block within the <span style="color:#f92672">&lt;config</span><span style="color:#f92672">&gt;</span> block
	<span style="color:#f92672">&lt;default</span><span style="color:#f92672">&gt;</span>
		<span style="color:#f92672">&lt;email</span><span style="color:#f92672">&gt;</span>
			<span style="color:#f92672">&lt;contact</span><span style="color:#f92672">&gt;</span>contact@standard.com<span style="color:#f92672">&lt;/contact&gt;</span>
			<span style="color:#f92672">&lt;support</span><span style="color:#f92672">&gt;</span>support@standard.com<span style="color:#f92672">&lt;/support&gt;</span>
			<span style="color:#f92672">&lt;yetanotheremail</span><span style="color:#f92672">&gt;</span>mailme@contact.com<span style="color:#f92672">&lt;/yetanotheremail&gt;</span>
	<span style="color:#f92672">&lt;/email&gt;</span>
	<span style="color:#f92672">&lt;/default&gt;</span>
# ....
# Example of a Router config,
# these are important for the switch below
<span style="color:#f92672">&lt;routers</span><span style="color:#f92672">&gt;</span>
	<span style="color:#f92672">&lt;company_contactform_contact</span><span style="color:#f92672">&gt;</span>
		<span style="color:#f92672">&lt;args</span><span style="color:#f92672">&gt;</span>
			<span style="color:#f92672">&lt;module</span><span style="color:#f92672">&gt;</span>Company_ContactForm<span style="color:#f92672">&lt;/module&gt;</span>
			<span style="color:#f92672">&lt;frontName</span><span style="color:#f92672">&gt;</span>contact<span style="color:#f92672">&lt;/frontName&gt;</span>
		<span style="color:#f92672">&lt;/args&gt;</span>
	<span style="color:#f92672">&lt;/company_contactform_contact&gt;</span>
<span style="color:#f92672">&lt;/routers&gt;</span>
</code></pre></div><p>This way the variables can be easily changed inside the <code>config.xml</code>, later they are retrieved (in the fronend or inside
the Controller.php) with this code</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">	<span style="color:#a6e22e">$email</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Mage</span><span style="color:#f92672">:</span><span style="color:#f92672">:</span><span style="color:#a6e22e">getStoreConfig</span>(<span style="color:#e6db74">&#39;email/contact&#39;</span>);
	<span style="color:#a6e22e">$email</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Mage</span><span style="color:#f92672">:</span><span style="color:#f92672">:</span><span style="color:#a6e22e">getStoreConfig</span>(<span style="color:#e6db74">&#39;email/support&#39;</span>);
	<span style="color:#a6e22e">$email</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Mage</span><span style="color:#f92672">:</span><span style="color:#f92672">:</span><span style="color:#a6e22e">getStoreConfig</span>(<span style="color:#e6db74">&#39;email/yetanotheremail&#39;</span>);
</code></pre></div><p>Those store configs are only accessable from within this Model and its View, so in <code>compare.phtml</code> this would throw an error.
Next thing I needed was a <code>switch()</code> to determine in what view I am. Again, I&rsquo;m pretty sure there is a better way of
handling this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"> <span style="color:#75715e">/* This returns the name set for the Router in the config.xml.
</span><span style="color:#75715e">	* (Between &lt;routers&gt; and &lt;/routers&gt;
</span><span style="color:#75715e"> */</span>
	<span style="color:#a6e22e">$currentRoute</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Mage</span><span style="color:#f92672">:</span><span style="color:#f92672">:</span><span style="color:#a6e22e">app</span>()<span style="color:#f92672">-</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">getFrontController</span>()<span style="color:#f92672">-</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">getRequest</span>()<span style="color:#f92672">-</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">getRouterName</span>();

		<span style="color:#66d9ef">switch</span>(<span style="color:#a6e22e">$currentRoute</span>) {
			<span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;company_contactform_productsupport&#34;</span><span style="color:#f92672">:</span>
				<span style="color:#a6e22e">$email</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Mage</span><span style="color:#f92672">:</span><span style="color:#f92672">:</span><span style="color:#a6e22e">getStoreConfig</span>(<span style="color:#e6db74">&#39;email/productsupport&#39;</span>);
				<span style="color:#66d9ef">break</span>;

			<span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;comapny_contactform_contact&#34;</span><span style="color:#f92672">:</span>
				<span style="color:#a6e22e">$email</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Mage</span><span style="color:#f92672">:</span><span style="color:#f92672">:</span><span style="color:#a6e22e">getStoreConfig</span>(<span style="color:#e6db74">&#39;email/contact&#39;</span>);
				<span style="color:#66d9ef">break</span>;

			<span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;company_contactform_support&#34;</span><span style="color:#f92672">:</span>
				<span style="color:#a6e22e">$email</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Mage</span><span style="color:#f92672">:</span><span style="color:#f92672">:</span><span style="color:#a6e22e">getStoreConfig</span>(<span style="color:#e6db74">&#39;email/support&#39;</span>);
				<span style="color:#66d9ef">break</span>;

			<span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
				<span style="color:#a6e22e">$email</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Mage</span><span style="color:#f92672">:</span><span style="color:#f92672">:</span><span style="color:#a6e22e">getStoreConfig</span>(<span style="color:#e6db74">&#39;email/fallback&#39;</span>);
				<span style="color:#66d9ef">break</span>;
	}
</code></pre></div><p>The fallback is used for the case of no match - it should not happen but it still can happen, so it&rsquo;s always save to
have a fallback. In this case it just goes to the generic info eMail of the client.</p>
<p>I&rsquo;m not sure if there&rsquo;s a better or easier way but I found that this solution fits my needs pretty good.</p>
]]></content><category scheme="https://kevingimbel.de/categories/coding" term="coding" label="coding"/><category scheme="https://kevingimbel.de/categories/magento" term="magento" label="magento"/><category scheme="https://kevingimbel.de/tags/magento" term="magento" label="magento"/><category scheme="https://kevingimbel.de/tags/mvc" term="mvc" label="mvc"/></entry></feed>