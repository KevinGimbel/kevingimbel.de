class DarkMode extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"})
this.state={isDarkMode:false,}
this.LOCAL_STORAGE_KEY="kgde_theme_dark_mode";this.addEventListener("click",this.changeMode);}
connectedCallback(){let darkModeFromLocalStorage=window.localStorage.getItem(this.LOCAL_STORAGE_KEY);if(darkModeFromLocalStorage!=null){let dm=darkModeFromLocalStorage=="true";this.setDarkMode(dm);}
if(darkModeFromLocalStorage==null){let wantDarkMode=window.matchMedia('(prefers-color-scheme: dark)');this.setDarkMode(wantDarkMode.matches||false);}
this.render();}
CSS(){return `<style>
    .dark-mode-toggle {
      width: 1.5em;
      height: 1.5em;
      display: inline-block;
      margin-right: .25em;
    }
    
    label {
      line-height: 1.25em;
      display: flex;
      align-items: center;
    }
  </style>`;}
setDarkMode(boolDarkMode){if(boolDarkMode){document.body.classList.add('dark-theme');}else{document.body.classList.remove('dark-theme');}
this.state.isDarkMode=boolDarkMode;window.localStorage.setItem(this.LOCAL_STORAGE_KEY,boolDarkMode);}
changeMode(event){event.stopPropagation()
let input=event.composedPath()[0];this.state.isDarkMode=input.checked;this.setDarkMode(this.state.isDarkMode);}
renderDarkmodeToggle(){return `<label for="dark-mode-toggle"><slot></slot> <input type="checkbox" id="dark-mode-toggle" name="dark-mode-toggle" class="dark-mode-toggle" ${this.state.isDarkMode?'checked':''}/></label>`}
render(){let darkModeHtml=this.renderDarkmodeToggle();this.shadowRoot.innerHTML=`${this.CSS()}\n${darkModeHtml}`;}}
customElements.define('kg-darkmode',DarkMode);