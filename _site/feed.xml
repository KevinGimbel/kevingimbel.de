<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kevingimbel.de</title>
  <subtitle>Web Development, DevOps, Baking, and everything else.</subtitle>
  <link href="https://kevingimbel.de/feed.xml" rel="self"/>
  <link href="https://kevingimbel.de/"/>
  <updated>2021-02-09T00:00:00Z</updated>
  <id>https://kevingimbel.de/</id>
  <author>
    <name>Kevin Gimbel</name>
    <email>blog@kevingimbel.de</email>
  </author>
  
  <entry>
    <title>::selection</title>
    <link href="https://kevingimbel.de/blog/2012/10/selection/"/>
    <updated>2012-10-14T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2012/10/selection/</id>
    <content type="html">&lt;p&gt;Using &lt;code&gt;::selection&lt;/code&gt; for fancy selection colors.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;::selection&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#279&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;::-moz-selection&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#279&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;::-webkit-selection&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#279&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;demo-1&quot;&gt;Try to select this text, the background will be #279 the color will be #fff.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;demo-2&quot;&gt;Also try to select this text. The color will be pink, the background will be black.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;This post was imported from my old Tumblr blog I used in 2012.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Switching to Notepad++</title>
    <link href="https://kevingimbel.de/blog/2012/10/switching-to-notepad/"/>
    <updated>2012-10-14T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2012/10/switching-to-notepad/</id>
    <content type="html">&lt;p&gt;I decided to use this small blog for any personal thing I think needs to be documented. Well, some weeks ago I decided to switch from Adobe Dreamweaver to Notepad++ for all webstuff I create. Some reasons are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it&#39;s faster&lt;/li&gt;
&lt;li&gt;the whole software is smaller&lt;/li&gt;
&lt;li&gt;the syntax highlighting is better&lt;/li&gt;
&lt;li&gt;the general workflow is better&lt;/li&gt;
&lt;li&gt;it&#39;s not overloaded with tiny &amp;quot;macro-buttons&amp;quot;&lt;/li&gt;
&lt;li&gt;i can close the program with a lot of files opened and they&#39;ll be automatically reloaded when I restart notepad++&lt;/li&gt;
&lt;li&gt;it&#39;s free - go try it&lt;/li&gt;
&lt;li&gt;I feel much better using this software. I love it.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;This post was imported from my old Tumblr blog I used in 2012.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kevingimbel.de/blog/2013/08/hello-world/"/>
    <updated>2013-08-12T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/08/hello-world/</id>
    <content type="html">&lt;p&gt;Recently I decided to redesign and redefine my online appearance and the way I publish content to the internet. I switched from using 2 domains as Blog and Portfolio to one new Domain for both: &lt;em&gt;kevingimbel.com&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This page is build with &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; a blog-aware static site generator you&#39;re going to love. I wrote a &lt;a href=&quot;https://kevingimbel.de/jekyll-guide/&quot;&gt;Guide to get started&lt;/a&gt; - so if you consider doing so give it a look.&lt;/p&gt;
&lt;p&gt;Beside switching to a new domain I also switched my hoster. This page is &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.github.io&quot;&gt;hosted at GitHub&lt;/a&gt; and my domain(s) and everything else will be moved to &lt;a href=&quot;http://uberspace.de/&quot;&gt;Uberspace.de&lt;/a&gt; an amazing hosting service from Germany.&lt;/p&gt;
&lt;p&gt;Another point on the list is to write more posts about web related stuff. I think it&#39;s interesting to get a deeper look into the technique or idea of some CodePen experiments, new Technologies (such as &lt;a href=&quot;http://dev.w3.org/csswg/selectors4/#drag-pseudos&quot;&gt;CSS4&#39;s Drag Pseudo Class Draft&lt;/a&gt;) and much more.&lt;/p&gt;
&lt;p&gt;If you&#39;d like to have a tutorial for any of my &lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;CodePens&lt;/a&gt; simply &lt;a href=&quot;http://twitter.com/kevingimbel&quot;&gt;tweet me&lt;/a&gt; the Link to it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>px vs em</title>
    <link href="https://kevingimbel.de/blog/2013/08/px-vs-em/"/>
    <updated>2013-08-15T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/08/px-vs-em/</id>
    <content type="html">&lt;p&gt;Recently &lt;a href=&quot;http://timpietrusky.com/&quot;&gt;Tim Pietrusky&lt;/a&gt; wrote and article about &lt;a href=&quot;http://timpietrusky.com/i-love-r-emmmmmm-because-px-suck&quot;&gt;px vs em&lt;/a&gt; that contains a few links on resources that explain why you should use em instead of px as measure unit on websites.&lt;/p&gt;
&lt;p&gt;I was using pixel like forever and I couldn&#39;t think of any reason to switch to a new unit until Tim explained why em is better: &lt;em&gt;em is more responsive and it is scalable&lt;/em&gt;.
In fact when you switch from pixel to em you&#39;ll feel like working on a completely new Level. The fact you can scale all elements of your website by simply passing a new value to &lt;code&gt;:root {font-size:1em;}&lt;/code&gt; or &lt;code&gt;body {font-size:1em;}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;My &lt;code&gt;_responsive.scss&lt;/code&gt; works this way. Because I think it&#39;s good to have large texts on smartphones I applied &lt;code&gt;font-size:120%&lt;/code&gt; to the &lt;code&gt;.main-content&lt;/code&gt; class that holds all elements.&lt;/p&gt;
&lt;p&gt;One of the main reasons to use em instead of pixel is that this measurement unit doesn&#39;t depend on the screen size in Pixel while the pixel unit does. An button that has the markup you see below will look the same on any device at any scale - it is fully responsive in other words.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.button&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;.5em .7em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another important point is that em Media Queries apply even if the user zooms the page. Go ahead an try to zoom this blog, at some point the responsive layout (breakpoint 55em) will apply - if you use pixel in your breakpoint (for example &lt;code&gt;@media all and (max-width:800px)&lt;/code&gt;) it will not apply the responsive layout when someone zooms in.&lt;/p&gt;
&lt;h3&gt;Final Words&lt;/h3&gt;
&lt;p&gt;em is a lot better than pixel even if it takes some time to change your mind and work flow. It is &lt;em&gt;more flexible&lt;/em&gt;, &lt;em&gt;more scalable&lt;/em&gt; and - which is the most important, &lt;em&gt;completely responsive&lt;/em&gt;.
So if you create a new responsive website, and you should always do so, do your self a favor and use em instead of px.&lt;/p&gt;
&lt;h3&gt;Further Reading&lt;/h3&gt;
&lt;p&gt;More articles on this topic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/front-end-development/8f433689736f&quot;&gt;Sizing (Web) components&lt;/a&gt; by &lt;a href=&quot;http://simurai.com/&quot;&gt;Simurai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://snook.ca/archives/html_and_css/font-size-with-rem&quot;&gt;Font-size with rem &lt;/a&gt; by &lt;a href=&quot;http://snook.ca/&quot;&gt;Jonathan Snook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.cloudfour.com/the-ems-have-it-proportional-media-queries-ftw/&quot;&gt;The ems have it: Proportional Media Queries FTW&lt;/a&gt; by &lt;a href=&quot;http://blog.cloudfour.com/author/lyza-gardner/&quot;&gt;Lyza Gardner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/LukyVj/blog/em-vs-px&quot;&gt;em vs px&lt;/a&gt; by &lt;a href=&quot;http://lucasbonomi.com/&quot;&gt;Lucas Bonomi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Is this :valid?</title>
    <link href="https://kevingimbel.de/blog/2013/08/is-this-valid/"/>
    <updated>2013-08-16T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/08/is-this-valid/</id>
    <content type="html">&lt;p&gt;I recently stumbled upon the &lt;code&gt;:valid&lt;/code&gt; and &lt;code&gt;:invalid&lt;/code&gt; class for input fields. It gives you the ability to use visual feedback on inputs that show the user whether the input is - guess what? - valid or not. This is, in fact, a very handy pseudo class in case of UI and UX Design because you can easily give a feedback on input without using JavaScript. Anyway, this pseudo element does not &lt;strong&gt;validate the input&lt;/strong&gt;, the entered email for example can still be formated wrong.&lt;/p&gt;
&lt;p&gt;Anyway I thought this is a handy little helper that I could give a try so I started working around with it, checking what I can do and what I can&#39;t.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.contact__form--email&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;&amp;amp;:valid&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;green&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;&amp;amp;:invalid&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Above you see the basic markup for a simple use case of &lt;code&gt;:valid&lt;/code&gt; and &lt;code&gt;:invalid&lt;/code&gt;. You can apply everything you want so far I&#39;ve tested. In my opinion &lt;code&gt;color&lt;/code&gt; and &lt;code&gt;border&lt;/code&gt; are the best and most basic use cases where this makes sense.&lt;/p&gt;
&lt;h3&gt;Strange behavior of :valid&lt;/h3&gt;
&lt;p&gt;While the &lt;code&gt;:invalid&lt;/code&gt; pseudo class makes perfect sense I found some strange behavior while experimenting with &lt;code&gt;:valid&lt;/code&gt;.
When the user starts typing the color will be red, as soon as he writes &lt;code&gt;yourname@g&lt;/code&gt; the color will turn green - because the eMail is now valid, even though it&#39;s not finished and here comes the point I start wondering: Why doesn&#39;t it check for a dot followed by at least 2 letters? The chances that this would be a valid email and this can be marked valid is much higher then triggering the valid pseudo class right after someone puts a letter behind the @ mark.&lt;/p&gt;
&lt;p&gt;Mozilla&#39;s Firefox and Google Chrome behave the same way, both trigger the &lt;code&gt;:valid&lt;/code&gt; class as soon as there is one character behind the @ mark. I wonder if this is specified by W3C - and now I ask: Is this really the best way to handle &lt;code&gt;:valid&lt;/code&gt; and &lt;code&gt;:invalid&lt;/code&gt; pseudo classes? Wouldn&#39;t it be better to wait until the user types at least one dot followed by a letter &lt;strong&gt;after&lt;/strong&gt; the user already wrote an @ mark? This would, in all cases, make sure the email is set up correctly.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Firefox and Chrome trigger :valid &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# at this point&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;#       |&lt;/span&gt;&lt;br /&gt;    you@host.com&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;#             | &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# I suggest triggering after &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# 2 letters have been entered&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# because chances that the email&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# is valid are much higher here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At least you have to check the email via JavaScript or PHP with RegEx to make sure it is valid but it would be a nice UX feature to have a visual feedback that checks the email so a user sees that the inputed email is correct - the :valid class doesn&#39;t provide this yet because it triggers to early so there is no &amp;quot;guarantee&amp;quot; the email is correct.&lt;/p&gt;
&lt;p&gt;I hope that they&#39;ll change this behavior in the future so it&#39;s save to use :valid on email inputs and it works correctly. What do you think about &lt;code&gt;:valid&lt;/code&gt; and &lt;code&gt;:invalid&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;You can find a working example of :valid and :invalid &lt;a href=&quot;http://codepen.io/kevingimbel/pen/jlhJg&quot;&gt;here at CodePen&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Endless scrolling</title>
    <link href="https://kevingimbel.de/blog/2013/09/endless-scrolling/"/>
    <updated>2013-09-01T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/09/endless-scrolling/</id>
    <content type="html">&lt;p&gt;If you see Apps (no matter if native or web) and websites like I do, you&#39;ll probably now the worst thing that can happen to an endless scrolling page: No shortcut to get back to top. Even Facebook doesn&#39;t offer a way to get back to top on their website nor do they on Facebook for Android.&lt;/p&gt;
&lt;p&gt;On Android you can simply hit the menu button and the sidebar-like menu will fade in, so there is no problem with not having an &amp;quot;scroll to top&amp;quot; action because there is no need to get back to the top. I&#39;ve nothing more to say on their app in this case (beside that it&#39;s the slowest Social Network App I can think of but that&#39;s another point).&lt;/p&gt;
&lt;p&gt;On &lt;a href=&quot;http://facebook.com/&quot;&gt;facebook.com&lt;/a&gt; you&#39;ll experience something that is, in my opinion, a bad UI/X idea: If you scroll down the sidebar on the left (that contains all the shortcuts to messages, groups and pages) will stay on top of the page while the Advertisement section on the right scrolls down - who thought of this? And what&#39;s the reason to fix the Advertisement while the menu, which is also important, isn&#39;t fixed?&lt;/p&gt;
&lt;p&gt;I see a reason in fixing the Advertisement: People are more likely to read them and click them the longer they stay inside the viewpoint, but not fixing the menu is just a bad idea - there&#39;s no reason I could think of to explain why the menu should hide when scrolling without a possibility to bring it back. When you click the Facebook Logo on the top left the site will refresh and bring you back to top. In case of UX I&#39;d rather like to have a smooth animation that scrolls the content back to top that having a completely refresh. What about people with slow Internet connection? They&#39;ll need to scroll up by themselves or have to wait until the whole site refreshed - this is, in every way, a bad example of UX. Even though Facebook has a lot of great minds onboard, some should maybe think twice about what to hide, what to fix and how to get back to the top.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A bit sticky</title>
    <link href="https://kevingimbel.de/blog/2013/09/a-bit-sticky/"/>
    <updated>2013-09-20T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/09/a-bit-sticky/</id>
    <content type="html">&lt;p&gt;I just stumbled upon a very handy CSS Property: &lt;code&gt;position:sticky&lt;/code&gt;. As far as I found out it&#39;s only working in Chrome and Chromium with the experimental Webkit Features Flag enabled (see at chrome://flags/#enable-experimental-webkit-features).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;position:sticky&lt;/code&gt; is a pretty handy feature that allows you to stick an element to the top of the page (or wherever you want) until the parent element is moved out of the screen.&lt;/p&gt;
&lt;h3&gt;Basic Markup&lt;/h3&gt;
&lt;p&gt;To get an idea of how &lt;code&gt;position:sticky&lt;/code&gt; works I made some basic markup.&lt;/p&gt;
&lt;h4&gt;HTML&lt;/h4&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;single__article&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;hgroup&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;single__article--header&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        # article header, this one will be sticked&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;hgroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    ...&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;CSS&lt;/h4&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.single__article&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    # classic article styles&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.single__article--header&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;sticky&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* general CSS3 */&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;-webkit-sticky&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* webkit prefixed */&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 20px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* Space between the element and top */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What &lt;code&gt;position:sticky&lt;/code&gt; does is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the elements Parent (&lt;code&gt;.single__article&lt;/code&gt;) is scrolled&lt;/li&gt;
&lt;li&gt;It sticks the header to the top of the page (in other words it gets &lt;code&gt;fixed&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;And scrolls it with until the Parent gets out of the way&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
That&#39;s all. And it is very handy compared to the JavaScript and CSS usually needed for this (taken from HTML5 Rocks).
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; header &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.header&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; origOffsetY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; header&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;offsetTop&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollY &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; origOffsetY &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; header&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sticky&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;                                  header&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sticky&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;scroll&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onScroll&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.sticky&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fixed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.header&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #F6D565&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 25px 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://codepen.io/kevingimbel/pen/Cybof&quot;&gt;See the Demo on CodePen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://updates.html5rocks.com/2012/08/Stick-your-landings-position-sticky-lands-in-WebKit&quot;&gt;HTML5 Rocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>From 0 To Sass</title>
    <link href="https://kevingimbel.de/blog/2013/10/from-0-to-sass/"/>
    <updated>2013-10-02T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/10/from-0-to-sass/</id>
    <content type="html">&lt;p&gt;If you&#39;re a Front-End Developer you may have already heard about Pre-Processors such as &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt;, &lt;a href=&quot;http://lesscss.org/&quot;&gt;LESS&lt;/a&gt; or &lt;a href=&quot;http://learnboost.github.io/stylus/&quot;&gt;Stylus&lt;/a&gt;. It&#39;s fair to say that they&#39;re all good and which one you use is up to you or your team. I prefer Sass with the SCSS Syntax (= keeps semicolons and brackets).&lt;/p&gt;
&lt;p&gt;Even though Pre-Processors are easy to use and setup some people are still confused: &lt;em&gt;Do I have to run them on a server? How do I install them? Why should I use them?&lt;/em&gt; - I want to answer all these questions in this article: Getting from 0 to Sass in X Steps!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notice:&lt;/strong&gt; This guide covers the installation on Linux and Mac only, for Windows support please take a look at &lt;a href=&quot;http://www.impressivewebs.com/sass-on-windows/&quot;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Sass summary&lt;/h3&gt;
&lt;p&gt;Sass was build by &lt;a href=&quot;http://www.hamptoncatlin.com/&quot;&gt;Hampton Catlin&lt;/a&gt; and &lt;a href=&quot;http://nex-3.com/&quot;&gt;Nathan Weizenbaum&lt;/a&gt;. Since late 2008 &lt;a href=&quot;http://chriseppstein.github.io/&quot;&gt;Chris Eppstein&lt;/a&gt; is also on board, he&#39;s also the creator of &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt; which is a CSS3 Framework for Sass (I&#39;ll cover Compass and other Frameworks for Sass later).&lt;/p&gt;
&lt;p&gt;Sass enables you to use Variables, Functions and Mixins inside your CSS. This comes very handy because a stylesheet gets amazingly maintainable with variables and mixins.&lt;/p&gt;
&lt;p&gt;Before we start I want you to notice something important about Sass: Sass runs on ruby so you have to install Ruby if it&#39;s not (Yeah Windows, I&#39;m looking in your direction!) - on Mac and Linux Ruby should be installed. All code blocks starting with &lt;code&gt;$&lt;/code&gt; need to be inputed into a Terminal (without the &lt;em&gt;$&lt;/em&gt;!). On OS X and Linux you may need to put a &lt;code&gt;sudo&lt;/code&gt; command before every command prompt.&lt;/p&gt;
&lt;p&gt;Simply check your ruby version by typing the following&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ruby --version&lt;br /&gt;ruby &lt;span class=&quot;token number&quot;&gt;1.9&lt;/span&gt;.3p194 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2012&lt;/span&gt;-04-20 revision &lt;span class=&quot;token number&quot;&gt;35410&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i686-linux&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;You&#39;ve maybe tried to install Sass previously and maybe it is still installed.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# checking the installed Sass Version&lt;/span&gt;&lt;br /&gt;$ sass --version&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# If up to date the output (as of today, 10/2/13) is&lt;/span&gt;&lt;br /&gt;Sass &lt;span class=&quot;token number&quot;&gt;3.2&lt;/span&gt;.9 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Media Mark&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you get an error such as &amp;quot;command not found&amp;quot; Sass is not installed, so we start from 0.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gem &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; sass&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your Terminal will now show you the download and install process for Sass, depending on your internet connection this may take a while.
After things are finished we&#39;ll skip the step of testing Sass directly or using it on its own - trust me here, it&#39;s way better to install Compass first.&lt;/p&gt;
&lt;h3&gt;Compass&lt;/h3&gt;
&lt;p&gt;Compass is a Framework for Sass that comes with a ton of build in Mixins and Functions that you&#39;ll love. I&#39;m using compass for every project - no matter if small or large.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# updating the system first so everything is running correctly&lt;/span&gt;&lt;br /&gt;$ gem update system&lt;br /&gt;$ gem &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; compass&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After compass is installed simply head over to your Local Web Direction (in my case this is &lt;code&gt;var/www/&lt;/code&gt;) and run&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ compass create myproject&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It doesn&#39;t matter what you call &lt;code&gt;myproject&lt;/code&gt; - I&#39;ve only used this command once in my life. Anyway this will create a config.rb file that you should open next.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;config.rb&lt;/code&gt; is well commented, below you can see my file (just in case you don&#39;t edit the wrong file by accident)&lt;/p&gt;
&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Require any additional compass plugins here.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# Set this to the root of your project when deployed:&lt;/span&gt;&lt;br /&gt;http_path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;br /&gt;css_dir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;assets/css&quot;&lt;/span&gt;&lt;br /&gt;sass_dir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;assets/css&quot;&lt;/span&gt;&lt;br /&gt;images_dir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;assets/img&quot;&lt;/span&gt;&lt;br /&gt;javascripts_dir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;assets/js&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# You can select your preferred output style here (can be overridden via the command line):&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# output_style = :expanded or :nested or :compact or :compressed&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# To enable relative paths to assets via compass helper functions. Uncomment:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# relative_assets = true&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# To disable debugging comments that display the original location of your selectors. Uncomment:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# line_comments = false&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# If you prefer the indented syntax, you might want to regenerate this&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# project again passing --syntax sass, or you can uncomment this:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# preferred_syntax = :sass&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# and then run:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# sass-convert -R --from scss --to sass sass scss &amp;amp;&amp;amp; rm -rf sass &amp;amp;&amp;amp; mv scss sass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I changed the path (&lt;code&gt;css_dir&lt;/code&gt;,&lt;code&gt;sass_dir&lt;/code&gt;,...) so that they match my standard folder setup for projects.I do also always compress my files by changing the &lt;code&gt;output_style&lt;/code&gt; to &lt;code&gt;:compressed&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# You can select your preferred output style here (can be overridden via the command line):&lt;/span&gt;&lt;br /&gt;output_style &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; :compressed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;config.rb&lt;/code&gt; is essential for running Compass. You have to Copy and Paste it into every root direction of your project. See and example below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# lets say this is the folder var/www/my-new-project&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# this is the root of your project where your config.rb&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# needs to be placed - NOT inside assets/css as many think!&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token string&quot;&gt;&#39;- assets&lt;br /&gt;    &#39;&lt;/span&gt;- css&lt;br /&gt;        &lt;span class=&quot;token string&quot;&gt;&#39;- style.scss&lt;br /&gt;        &#39;&lt;/span&gt;- style.css&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;- js&lt;br /&gt;        &#39;&lt;/span&gt;- jquery.min.js&lt;br /&gt;        &lt;span class=&quot;token string&quot;&gt;&#39;- main.js&lt;br /&gt;    &#39;&lt;/span&gt;- img&lt;br /&gt;&lt;span class=&quot;token string&quot;&gt;&#39;- about&lt;br /&gt;    &#39;&lt;/span&gt;- index.html&lt;br /&gt;&lt;span class=&quot;token string&quot;&gt;&#39;- imprint.html&lt;br /&gt;&#39;&lt;/span&gt;- index.html&lt;br /&gt;&lt;span class=&quot;token string&quot;&gt;&#39;- config.rb&lt;br /&gt;#   &#39;&lt;/span&gt;- there it is, the config.rb&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sass and Compass are now installed and ready to use. This is, in my opinion, best made via the good old Terminal!&lt;/p&gt;
&lt;p&gt;So let&#39;s navigate to our folders and run our first command.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# switching to our project folder&lt;/span&gt;&lt;br /&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; var/www/my-new-project&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# telling compass to compile our files&lt;/span&gt;&lt;br /&gt;$ compass &lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compass is now watching for changes and everytime you save your &lt;code&gt;style.scss&lt;/code&gt; it will automatically create an style.css out of it. Still wondering what all of this is about?&lt;/p&gt;
&lt;h3&gt;Variables&lt;/h3&gt;
&lt;p&gt;Let&#39;s start with Variables because I assume you know what they are and have already seen variables in other programming languages.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;// Variables start with a $&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e.g.&lt;br /&gt;$&lt;span class=&quot;token property&quot;&gt;main-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #85c226&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Variables must be declared &lt;strong&gt;before&lt;/strong&gt; they&#39;re used, that&#39;s why I recommend to declare all variables at the top of the document (or inside a other stylesheet that can be included, more later on).
To use a variable you simply write it to the place you want it to be used. Logical, isn&#39;t it?&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;$&lt;span class=&quot;token property&quot;&gt;main-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #85c226&lt;span class=&quot;token selector&quot;&gt;;&lt;br /&gt;&lt;br /&gt;.my-class&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;border-top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid $main-color&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above snipped will be compiled to&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.my-class&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;border-top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1px solid #85c226&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically that&#39;s it. You can store Strings, Colors, and other variables inside a variables. More on variables can be found inside the &lt;a href=&quot;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#variables_&quot;&gt;Sass Docs&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Mixins&lt;/h3&gt;
&lt;p&gt;Mixins are getting a little bit more interesting. They&#39;re snippets of code you can use, for example, to save the vendor prefixing. Compass comes with build-in Mixins but you can also create your own Mixins. To use the Compass Mixins you have to include Compass on top of your style.scss as followed:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;// import everything that compass has&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;compass&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;// import special library &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e.g. css3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;compass/css3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;// creating a mixin&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;-moz-border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;-ms-border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;-o-border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;// using it inside a class&lt;br /&gt;.my-class&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;20em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;5px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The mixin can be created once and then be reused everywhere inside your style.scss - it&#39;ll save you a lot of writing whenever you have to apply a border to an object. The &lt;code&gt;border-radius()&lt;/code&gt; mixin is also build-in to Compass. The output in style.css will be as following:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.my-class&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;20em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;-moz-border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;-ms-border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;-o-border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are more super useful build in function in Sass. Some of my favorite are &lt;code&gt;darken()&lt;/code&gt; and &lt;code&gt;lighten()&lt;/code&gt; for colors.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;$&lt;span class=&quot;token property&quot;&gt;my-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;$&lt;span class=&quot;token property&quot;&gt;my-color--dark&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$my-color&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;10%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;// this will produce a hexadecimal code &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e.g. #132644&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; of a &lt;br /&gt;// color that is 10% lighter than red.&lt;br /&gt;// &lt;span class=&quot;token property&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;br /&gt;# &lt;span class=&quot;token function&quot;&gt;lighten&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;color&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;percent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;# &lt;span class=&quot;token function&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;color&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;percent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Structure, Files and Folders&lt;/h3&gt;
&lt;p&gt;Before this Guideline to Sass ends I want to talk about structures, files and folders. Compass is able to watch a whole directory of files so you can go totally crazy by striping down your CSS file into a lot of small files. Your css folder could look like this:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;-css&lt;br /&gt;    &#39;&lt;/span&gt;_includes&lt;br /&gt;        &lt;span class=&quot;token string&quot;&gt;&#39;- _article.scss&lt;br /&gt;        &#39;&lt;/span&gt;- _header.scss&lt;br /&gt;        &lt;span class=&quot;token string&quot;&gt;&#39;- _menu.scss&lt;br /&gt;        &#39;&lt;/span&gt;- _imprint.scss&lt;br /&gt;        &lt;span class=&quot;token string&quot;&gt;&#39;- _front-page.scss&lt;br /&gt;        &#39;&lt;/span&gt;- _sidebar.scss&lt;br /&gt;        &lt;span class=&quot;token string&quot;&gt;&#39;- _plugins.scss&lt;br /&gt;        &#39;&lt;/span&gt;- _mixins.scss&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;- style.scss&lt;br /&gt;    &#39;&lt;/span&gt;- style.css&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The amazing thing about Compass is: every file that starts with &lt;code&gt;_&lt;/code&gt; is not compiled. So in the above folder tree there&#39;s still only &lt;code&gt;style.scss&lt;/code&gt; that will be compiled - but all the others can be included. &lt;strong&gt;Wow but what about performance with all those files?&lt;/strong&gt; you&#39;ll maybe ask yourself? The point is: There&#39;s still just one file, the style.&lt;em&gt;css&lt;/em&gt; that will be included to the page later - so all the other files only exist locally on your computer.
If you want to have an example what the &lt;code&gt;style.scss&lt;/code&gt; would look like, here&#39;s the one I &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.github.io/blob/v1/assets/css/style.scss&quot;&gt;used for my blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sass and Compass are amazing, powerful tools and you, as a Front-End Developer, should be able to work with both. This small summary of the basic Sass features is just the top of the iceberg - there&#39;s a lot more to explore about &lt;a href=&quot;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html&quot;&gt;Sass&lt;/a&gt; and &lt;a href=&quot;http://compass-style.org/reference/compass/&quot;&gt;Compass&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You should also check out &lt;a href=&quot;http://codepen.io/thebabydino/&quot;&gt;Ana Tudor&lt;/a&gt; on CodePen, she&#39;s doing amazing stuff with Sass and Maths!&lt;/p&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html&quot;&gt;Sass Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://compass-style.org/reference/compass/&quot;&gt;Compass Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://thesassway.com/&quot;&gt;The Sass Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Join a Dev Group</title>
    <link href="https://kevingimbel.de/blog/2013/10/join-a-dev-group/"/>
    <updated>2013-10-13T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/10/join-a-dev-group/</id>
    <content type="html">&lt;p&gt;Earlier this year I joined a Dev Group. It was the best decision I made this year and I want to tell you why.
After doing more experiments on &lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;CodePen&lt;/a&gt; and right after I got to know &lt;a href=&quot;http://timpietrusky.com/&quot;&gt;Tim Pietrusky&lt;/a&gt; he opened a &lt;a href=&quot;http://tlk.io/&quot;&gt;tlk.io&lt;/a&gt; Chat called &lt;a href=&quot;http://tlk.io/codepen&quot;&gt;#CodePen&lt;/a&gt;. For those who&#39;re not familiar with tlk: it&#39;s an open web chat. You can create a room, everyone can join and all things are open to everyone who knows the URL. Over the time a group of about seven people used this chat on a daily base and as of today I love them all. They&#39;re &lt;a href=&quot;http://timpietrusky.com/&quot;&gt;Tim&lt;/a&gt;, &lt;a href=&quot;http://myxotod.de/&quot;&gt;Max&lt;/a&gt;, &lt;a href=&quot;http://lucasbonomi.com/&quot;&gt;Luky&lt;/a&gt;, &lt;a href=&quot;http://janreimers.net/&quot;&gt;Jan&lt;/a&gt;, &lt;a href=&quot;https://github.com/dervondenbergen&quot;&gt;Felix&lt;/a&gt;, &lt;a href=&quot;http://seebeetee.com/&quot;&gt;Kanu&lt;/a&gt; and myself - for sure. We recently moved our Chat to Google+, we do Hangouts very often and talk about Webdesign, Development and Nerd stuff daily.&lt;/p&gt;
&lt;p&gt;We build useless but fun stuff together at &lt;a href=&quot;http://bullgit.github.io/&quot;&gt;bullgit&lt;/a&gt;, we learn from each other, help each other and discuss best practices. It&#39;s amazing to have a Dev Group and there are some reasons for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You&#39;ve people with the same interests&lt;/li&gt;
&lt;li&gt;You learn a lot of new stuff&lt;/li&gt;
&lt;li&gt;You can discuss&lt;/li&gt;
&lt;li&gt;It&#39;s fun to build and learn together&lt;/li&gt;
&lt;li&gt;You&#39;ll get better over time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whenever one of us has a problem others are there to help. For sure the unspoken rule number 1 is to try for yourself first before you give up and ask the others but this works pretty well. I love this group.&lt;/p&gt;
&lt;p&gt;Lately &lt;a href=&quot;https://twitter.com/shvelo96&quot;&gt;Nick&lt;/a&gt; joined the bullgit team by simply asking if we accept new members. For sure we do! No matter what skill level you have, no matter if web dev is your hobby or job, no matter who you are: Contact us. If you&#39;re interested in all kinds of funny site projects just &lt;a href=&quot;http://tlk.io/codepen&quot;&gt;drop us a line on tlk&lt;/a&gt; - if nobody is online and you log-in with twitter we&#39;ll contact you as soon as we see your message.&lt;/p&gt;
&lt;p&gt;Everyone should find and join a Dev Group. The benefits you have from communicating with others who do and love the same things you love are infinite. I learned a lot of things, I improved my workflow and I even got a Job offer (more on that when the time has come) - Dev Groups will make your online life a lot better.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>i-js</title>
    <link href="https://kevingimbel.de/blog/2013/10/i-js/"/>
    <updated>2013-10-14T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/10/i-js/</id>
    <content type="html">&lt;p&gt;Today I decided to dig deeper into JavaScript and experiment a bit with scope, query selection and the general manipulation of the DOM. To do so I set up an object to store all my functions - this is not necessary but definitely more fun.&lt;/p&gt;
&lt;p&gt;After naming my Object $ (because I new this from jQuery and I thought it would look cool) I renamed it to &lt;code&gt;I&lt;/code&gt; and here comes the fun part: While learning JS I build i.js - a tiny JS &amp;quot;Framework&amp;quot; that enables you to write JS nearly the same you&#39;d speak.
For example you may thing: &lt;em&gt;&amp;quot;I want to get the Object with the class name test&amp;quot;&lt;/em&gt; - to get this, simply write the following:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WantA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;classname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will return you the element that has the class &lt;code&gt;test&lt;/code&gt;. Not so cool? Well, let&#39;s bring Events to the game!&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Spoken: &quot;I want to add an Event that when you click on the &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// element with the ID js-removeClass a FUNCTION triggers&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WantTo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;js-removeClass&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WantTo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lorem&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above script does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When &lt;code&gt;js-removeClass&lt;/code&gt; is clicked&lt;/li&gt;
&lt;li&gt;the class &lt;code&gt;lorem&lt;/code&gt; will be removed from an element with the class &lt;code&gt;output&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find a working Demo on &lt;a href=&quot;http://codepen.io/kevingimbel/pen/sgCae&quot;&gt;CodePen&lt;/a&gt; or &lt;a href=&quot;http://kevingimbel.com/i.js/demo/&quot;&gt;directly on my site&lt;/a&gt;. If you want to contribute more functions I&#39;d be very happy!&lt;/p&gt;
&lt;p&gt;Beside of this useless but fun Framework I also wrote a kinda useful function: &lt;code&gt;_match()&lt;/code&gt;. &lt;code&gt;_match()&lt;/code&gt; takes any value and checks if it&#39;s a ID, a class or an Tag Name. When it matches one of these it returns the correct element.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;_match&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Ghost in the shell</title>
    <link href="https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/"/>
    <updated>2013-10-16T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/10/ghost-in-the-shell/</id>
    <content type="html">&lt;p&gt;Finally &lt;a href=&quot;http://ghost.org/&quot;&gt;Ghost&lt;/a&gt; launched to the public! I waited for this CMS since I first heard of, at this time my blog was running on WordPress which always felt overloaded. WordPress has a lot of functions and stuff I don&#39;t need when publishing a few articles a month to the Internet. However, I switched to Jekyll as you may know and now there is Ghost. It felt like it&#39;d be my birthday while unpacking the *.zip file. Anyway, I want to write a small installation guide, tell you something about my first impressions and how theming with Ghost works.&lt;/p&gt;
&lt;p&gt;Ghost runs on &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; which is basically a installable version of &lt;a href=&quot;https://code.google.com/p/v8/&quot;&gt;Google Chrome&#39;s v8 JavaScript Engine&lt;/a&gt;, in other words Ghost doesn&#39;t use PHP or Ruby to run it just needs a Node Process.&lt;/p&gt;
&lt;h3&gt;Installing Node.js&lt;/h3&gt;
&lt;p&gt;First of all you have to install Node.js from &lt;a href=&quot;http://nodejs.org/&quot;&gt;http://nodejs.org/&lt;/a&gt;. Afterwards go back to your terminal and run the following&lt;/p&gt;
&lt;h3&gt;Installing Ghost&lt;/h3&gt;
&lt;p&gt;Now you need to sign-up and download the Ghost source code from &lt;a href=&quot;https://ghost.org/&quot;&gt;https://ghost.org/&lt;/a&gt;. Unpack the zip into the directory of your choice (mine is &lt;code&gt;var/www/&lt;/code&gt;), open a terminal, navigate to the directory and enter the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# prefix with sudo on Ubuntu!&lt;/span&gt;&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --production&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the installation process is finished run &lt;code&gt;$ npm start&lt;/code&gt; to start the Node.js Server. Your brand-new Ghost site should now be running on 127.0.0.1:2368.&lt;/p&gt;
&lt;p&gt;If you see the Ghost site navigate to 127.0.0.1:2368/ghost and sign-up (again) for your own local Ghost installation. You can, in fact, ignore the eMail warnings (or &lt;a href=&quot;http://docs.ghost.org/mail&quot;&gt;read this to set up your eMail Account&lt;/a&gt;).
So far your Ghost page is running locally and you can start writing posts.&lt;/p&gt;
&lt;h3&gt;Themes&lt;/h3&gt;
&lt;p&gt;Themes in Ghost are something completely new for me. They&#39;re using &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars.js&lt;/a&gt; which looks like &lt;a href=&quot;http://docs.shopify.com/themes/liquid-basics&quot;&gt;Liquid&lt;/a&gt; used by Jekyll on first sight.&lt;/p&gt;
&lt;p&gt;After I wrapped my head around Handlebars and the Ghost default Theme &amp;quot;Casper&amp;quot; I found it easy to manipulate and build my first Theme.
Basically Ghost can work with 3 layout files: post.hbs, default.hbs and index.hbs - they&#39;re pretty self-explaining though.&lt;/p&gt;
&lt;h4&gt;index.hbs&lt;/h4&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;br /&gt;{{#post }}&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;hgroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{{title}}}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      {{#if author}}&lt;br /&gt;        written by {{author.name}}&lt;br /&gt;      {{/if}}&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;hgroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;{{/post}}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above snippet simply outputs the title of the post and the author&#39;s name if one is given. A pretty neat thing about Handlebars is, that everything between `` and &#39;&#39; automatically gets pulled from the post it belongs to. As I mentioned above this looks a lot like Liquid as you can see in the &lt;a href=&quot;http://kevingimbel.com/jekyll-guide/layouts/&quot;&gt;first code example here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&#39;ll not get into detail on how to style &lt;code&gt;post.hbs&lt;/code&gt; because it is nearly the same. &lt;code&gt;default.hbs&lt;/code&gt;, however, is a bit more interesting.&lt;/p&gt;
&lt;h4&gt;default.hbs&lt;/h4&gt;
&lt;p&gt;First I thought this would be the &amp;quot;default&amp;quot; layout if no format is given (like in Jekyll) but it&#39;s a lot more important: &lt;code&gt;default.hbs&lt;/code&gt; holds the entirely page and all the posts get included into it!&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    ...&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    # build your header and stuff here&lt;br /&gt;    {}{}&lt;br /&gt;    # build your footer here&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;body&lt;/code&gt; handlebar is the point where another pages content gets included. To tell a layout that it will be included into another file you simply write `` in the first line of it.&lt;/p&gt;
&lt;p&gt;This is a pretty handy feature I think. So far Ghost and building Themes for it is pretty easy and handy to use. You have to learn Handlebars to get the full potential out of it but that&#39;s OK I&#39;d say. However, I&#39;ll now show off some things that I don&#39;t like or found confusing (still locally, deploying to a server comes later!)&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;br /&gt;{{! Ghost outputs important scripts and data with this tag }}&lt;br /&gt;{{ghost_foot}}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So Ghost, please tell me more about &amp;quot;important data and scripts&amp;quot;. I haven&#39;t found any file that contains this data or scripts and I wasn&#39;t sure if this tag is only needed for the Casper Theme or if it&#39;s important for other stuff. In the end I just left it there.&lt;/p&gt;
&lt;p&gt;Beside this tag I found another, kinda self-explaining tag: ``&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;br /&gt;{{!! After all the posts, we have the previous/next pagination links }}&lt;br /&gt;{{pagination}}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool, so Ghost builds me a pagination! But wait, I&#39;d like to style it. So...where&#39;s the pagination layout? I searched it inside my themes directory (because I copy/pasted the Casper Theme to modify it) but there was no file that holds the pagination. After searching around for quite some time I found it inside &lt;code&gt;core/server/helper/tpl&lt;/code&gt; - I have no idea why this helper is here. However, it&#39;s a &lt;code&gt;*.bhs&lt;/code&gt; file so customizing it is the same as with any other file.&lt;/p&gt;
&lt;p&gt;That&#39;s it on themes and structure for now, let&#39;s see how we get this Baby online!&lt;/p&gt;
&lt;h3&gt;Deploying&lt;/h3&gt;
&lt;p&gt;First of all you need two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time&lt;/li&gt;
&lt;li&gt;A server
&lt;ul&gt;
&lt;li&gt;with SSH connection via Terminal&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Daemons&lt;/li&gt;
&lt;li&gt;sqlite3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In before, I couldn&#39;t make Ghost running on my server and I&#39;m not sure why this is so. The Service is running, the logs say it&#39;s running, the subdomain works (checked with a index.html inside the Ghost Directory) but for whatever reasons nothing gets compiled.&lt;/p&gt;
&lt;p&gt;I could tell you what exactly I did on my server but I&#39;d rather like to redirect you to some posts explaining the installation (all on &lt;a href=&quot;https://uberspace.de/&quot;&gt;Uberspace.de&lt;/a&gt; but most of it should work with your server, too).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(DE) &lt;a href=&quot;https://uberspace.de/dokuwiki/cool:ghost&quot;&gt;Uberspace Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(EN) &lt;a href=&quot;http://christophvoigt.com/how-to-setup-ghost-on-uberspace-de/&quot;&gt;How to Setup Ghost on Uberspace.de&lt;/a&gt; by Christoph Voigt&lt;/li&gt;
&lt;li&gt;(EN) &lt;a href=&quot;http://ghost.jotbe.io/setting-up-ghost-on-uberspace/&quot;&gt;Setting up Ghost in a Sub-Directory&lt;/a&gt; by Jan Beilicke&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I can tell so far is: If you&#39;re not familiar with working over SSH and logged-in via your terminal setting up Ghost is a pain in the ass. I&#39;m ashamed to say I wasn&#39;t able to get it running even thought the service itself &lt;em&gt;is&lt;/em&gt; running as my Log-Files tell me.&lt;/p&gt;
&lt;p&gt;The more I worked with Ghost on the server side one thing came to my mind: It&#39;s not just a blogging Software, it&#39;s made to sell hosting. As some other people already said it is a kinda smart decision to write a great Blog System that is not-so-easy to install so you can sell your own Hosting Services with it.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Non-Tech People will not be able to install Ghost on their servers, Ghost requires Node.js which isn&#39;t a default installation on servers yet (even though some have it), Ghost is at least locally fast and easy to setup. The Theme system with Handlebars is also pretty nice and they have the most beautiful back-end I saw so far.
Regardless of all the good aspects, overall I&#39;m disappointed by Ghost. I&#39;ll stick to Jekyll and GitHub Hosting. I&#39;ll try to deploy Ghost and work around with it just for the sake of learning something new but as engine to build my Blog it has not convinced me so far.&lt;/p&gt;
&lt;p&gt;You may have noticed that the Title is a reference to &lt;a href=&quot;http://de.wikipedia.org/wiki/Ghost_in_the_Shell&quot;&gt;Ghost in the Shell&lt;/a&gt; which is a great Manga from 1989.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Custom Radio Buttons</title>
    <link href="https://kevingimbel.de/blog/2013/10/custom-radio-buttons/"/>
    <updated>2013-10-28T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/10/custom-radio-buttons/</id>
    <content type="html">&lt;p&gt;Today I thought about a project I had in mind for some time, it has to do with ratings of different contents and the first thing I thought about was: What&#39;s the easiest or best way to create a rating form with custom buttons (stars, hearts, whatever).&lt;/p&gt;
&lt;p&gt;A few years ago I had to do this once and I remember doing it with an image and &lt;code&gt;background-position&lt;/code&gt; but as of today I really love pseudo elements and &amp;quot;Look-Ma-No-Image!&amp;quot;. However I decided to use Icon Fonts this time and play around a bit with them. My HTML Markup is very simple:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;radio&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-rate&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rating&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rating--star&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;radio&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-rate&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rating&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rating--star&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;radio&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-rate&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;3&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rating&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rating--star&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;radio&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-rate&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rating&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rating--star&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;radio&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-rate&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rating&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rating--star&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s it: A group of &lt;code&gt;radio inputs&lt;/code&gt; representing a rating system with 1-5 possible choices. The CSS part is a little bit trickier (note that I&#39;m using Sass with SCSS Syntax!)&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.rating--star&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#ff7711&lt;span class=&quot;token selector&quot;&gt;;&lt;br /&gt;  &amp;amp;:before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\2605&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;2em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;entypo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sans-serif&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;&amp;amp;:checked ~ :before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\2606&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;&amp;amp;:focus&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A small piece of code, yet it can seem complicated. I&#39;ll break it down a bit.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.rating--star&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#ff7711&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;appearance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;&amp;amp;:before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\2605&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;2em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;entypo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sans-serif&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first part represents the class itself and the &lt;code&gt;:before&lt;/code&gt; pseudo element that holds the icon (in this case a Star from the entypo icon font served via &lt;a href=&quot;http://weloveiconfonts.com/&quot;&gt;We Love Icon Fonts&lt;/a&gt;), I set the color on the element directly because the &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:checked ~ :before&lt;/code&gt; are using the same color. &lt;code&gt;appearance:none;&lt;/code&gt; removes the User Agent style from the input element or, in other words, &amp;quot;hides&amp;quot; the element.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt; &lt;span class=&quot;token selector&quot;&gt;&amp;amp;:checked ~ :before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\2606&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next line says &amp;quot;when the input is &lt;code&gt;:checked&lt;/code&gt; change the properties of &lt;code&gt;:before&lt;/code&gt;&amp;quot;. So when it is checked I want the filled Star to show up (&amp;quot;\2606&amp;quot;). Seems logical? It&#39;s not. &lt;code&gt;\2606&lt;/code&gt; is the empty star. So the &lt;code&gt;&amp;amp;:checked ~ :before&lt;/code&gt; pseudo holds the icon that should be included if the button is not checked and the &lt;code&gt;:before&lt;/code&gt; holds the checked (in this case filled) icon. This is because &lt;code&gt;:checked ~ :before&lt;/code&gt; selects every element that is preceded of the &lt;code&gt;:checked&lt;/code&gt; element. This comes handy because this also means all inputs display a filled star if we check the last star (and that&#39;s exactly what we want).&lt;/p&gt;
&lt;p&gt;A live demo can be found on &lt;a href=&quot;http://codepen.io/kevingimbel/pen/kwIgi&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>To infinity and beyond</title>
    <link href="https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/"/>
    <updated>2013-11-18T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/11/to-infinity-and-beyond/</id>
    <content type="html">&lt;p&gt;While I was re-designing my Website I decided to finally add some JavaScript to it. I&#39;m learning JavaScript for like 2 months now and - to be honest - I finally understand most of the things I&#39;m doing. Yesterday night&#39;s topic was a &amp;quot;Back to Top&amp;quot; Button written in Vanilla JS. Actually the code behind it is &lt;em&gt;kinda&lt;/em&gt; simple, however, I wrote an endless function that got to infinity and beyond (that&#39;s where the title comes from. I&#39;m so funny.)&lt;/p&gt;
&lt;p&gt;Because I still like to google around while writing JavaScript I stumbled upon a function that looked okay to me.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;scrollToTop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollTop&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollTop&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;scrollBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    timeOut&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;scrollToTop()&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timeOut&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem with this one was: It didn&#39;t work. So I looked around and found &lt;code&gt;setInterval()&lt;/code&gt; which seemed to me a bit like &lt;code&gt;setTimeout&lt;/code&gt; and - in my opinion - would mix perfect with &lt;code&gt;scrollBy(x,y)&lt;/code&gt;. I was right, hurray!&lt;/p&gt;
&lt;p&gt;So my function then looked a bit like this (I&#39;m not exactly sure, it was kinda late already).&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;scrollToTop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollY&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; scrollBack &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;scrollBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scrollBack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;   &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I applied the function to a button, the page scrolled up and I was happy. I &lt;a href=&quot;https://twitter.com/_kevinatari/status/402189289422721024&quot;&gt;tweeted&lt;/a&gt; about it just to find out that my Interval wasn&#39;t cleared and I &lt;a href=&quot;https://twitter.com/_kevinatari/status/402190105533640704&quot;&gt;could never scroll down again&lt;/a&gt; after the function was triggered. Yeah! Awesome.&lt;/p&gt;
&lt;p&gt;Well, I thought more about it and read again about &lt;code&gt;setInterval&lt;/code&gt; and - most important - the actual object I&#39;m checking. &lt;code&gt;scrollY&lt;/code&gt; was the right direction and I decided it must be the Interval that&#39;s wrong. I was right and came up with this sweet function!&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// notice: backTop is my back to top button!&lt;/span&gt;&lt;br /&gt;  backTop&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// setting an interval &lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; toTop &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// if we&#39;re not on top of the page&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollY &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token comment&quot;&gt;// we scroll back to the top [scrollBy(x,y)]&lt;/span&gt;&lt;br /&gt;        window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;scrollBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span class=&quot;token comment&quot;&gt;// in case we&#39;re at the top (window.scrollY = 0)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token comment&quot;&gt;// clear the interval&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;toTop&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// the delay between the steps to go back to top. The smaller the number, the slower it goes&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// prevent the click to reload the page&lt;/span&gt;&lt;br /&gt;    event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// end of the Back to Top function&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s it! My sweet little Back To Top Function. I&#39;m sure there are points that could be improved and I&#39;m sure one could add easing to it (I already got something in mind) but for now I&#39;m happy with it.&lt;/p&gt;
&lt;p&gt;(Also check out what else I discovered yesterday. It&#39;s a &lt;a href=&quot;https://twitter.com/_kevinatari/status/402197154539651072&quot;&gt;YouTube Easter Egg&lt;/a&gt;!)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Pseudo Product Flags</title>
    <link href="https://kevingimbel.de/blog/2013/11/pseudo-product-flags/"/>
    <updated>2013-11-24T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/11/pseudo-product-flags/</id>
    <content type="html">&lt;p&gt;For a recent client Project I had to create Product Flags that are displayed at the top of each product. The Flags should have different colors and different values (which also have different lengths). The values are applied via the &lt;code&gt;data&lt;/code&gt; Attribute and the colors are also controlled via a data Attribute. The &amp;quot;Problem&amp;quot; with this task was that it&#39;s not only a few different length, it&#39;s a multi-language system and therefore can end up in a lot of different width of the product flags - a &amp;quot;fixed&amp;quot; solution, like applying a &lt;code&gt;max-width&lt;/code&gt; of let&#39;s say 20em, isn&#39;t the best solution for this so I ended up creating a flexible solution.&lt;/p&gt;
&lt;h3&gt;The Setup&lt;/h3&gt;
&lt;p&gt;First of all I had a Product and a &lt;code&gt;div&lt;/code&gt; that holds the flag (in this example &amp;quot;Tag&amp;quot;).&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tag&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-tagname&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;STAR WARS&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;hgroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Awesome Star Wars Cup&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &amp;lt;img &quot;http://www.getdigital.de/web/getdigital/gfx/products/__generated__resized/1100x1100/R2D2_Relief_Mug_Titel.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;hgroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;(img via &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.getdigital.de/R2D2-3D-Relief-Becher.html&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;getDigital.de&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;)&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;data-id&lt;/code&gt; controls the color of the tag and the &lt;code&gt;data-tagname&lt;/code&gt; controls the content of it. In the real-world example they&#39;re applied via a Content Management System and, as I said before, can vary in length. The HTML Job is done with this setup and now comes the most fun part: The (S)CSS.&lt;/p&gt;
&lt;h3&gt;CSS&lt;/h3&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;.tag&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;-1em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#8e44ad&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // standard background if there&#39;s no data-id&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;.5em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The basic tag should be position absolute on the left of the article and &lt;code&gt;-1em&lt;/code&gt; on top of the article (this comes because the article has a padding of 1.5em and I want it to be half the way out of the article container). So far there is a tag with auto width and auto height. With the next snippet we&#39;ll get the data-tagname inside out pseudo element.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;&amp;amp;:before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data-tagname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a small triangle behind it&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;&amp;amp;:after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;border-top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1em solid transparent&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;border-left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1em solid &lt;span class=&quot;token function&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#8e44ad&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;20%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // fallback if no data-id is given&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Success! The first basic tag is finished, but why the &lt;code&gt;data-id&lt;/code&gt; you may ask? Because they make the magic! As I said before the color is controlled via &lt;code&gt;data-id&lt;/code&gt; and here&#39;s how this works:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;&amp;amp;[data-id=&quot;1&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$color-1&lt;span class=&quot;token selector&quot;&gt;;&lt;br /&gt;    &amp;amp;:after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;border-left-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$color-1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;20%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you repeat this for all your &lt;code&gt;data-id&lt;/code&gt;s and colors you&#39;ll end up having some sweet Product Flags. The whole code for my product flags looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;.tag&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;-1em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#8e44ad&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* fallback if no data-id is given */&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;.5em&lt;span class=&quot;token selector&quot;&gt;;&lt;br /&gt;&lt;br /&gt;    &amp;amp;:before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data-tagname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    // there&lt;span class=&quot;token selector&quot;&gt;&#39;s always a triangle behind it&lt;br /&gt;    &amp;amp;:after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;border-top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1em solid transparent&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;border-left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1em solid &lt;span class=&quot;token function&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#8e44ad&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;20%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;/* fallback if no data-id is given */&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token selector&quot;&gt;// the data-id controls the colors&lt;br /&gt;    &amp;amp;[data-id=&quot;1&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$color-1&lt;span class=&quot;token selector&quot;&gt;;&lt;br /&gt;      &amp;amp;:after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token property&quot;&gt;border-left-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$color-1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;20%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token selector&quot;&gt;&amp;amp;[data-id=&quot;2&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$color-2&lt;span class=&quot;token selector&quot;&gt;;&lt;br /&gt;&lt;br /&gt;      &amp;amp;:after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token property&quot;&gt;border-left-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$color-2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;20%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token selector&quot;&gt;&amp;amp;[data-id=&quot;3&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$color-3&lt;span class=&quot;token selector&quot;&gt;;&lt;br /&gt;&lt;br /&gt;      &amp;amp;:after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token property&quot;&gt;border-left-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$color-3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;20%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token selector&quot;&gt;&amp;amp;[data-id=&quot;4&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$color-4&lt;span class=&quot;token selector&quot;&gt;;&lt;br /&gt;&lt;br /&gt;      &amp;amp;:after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token property&quot;&gt;border-left-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$color-4&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;20%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; // tag&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A working example can be found &lt;a href=&quot;http://codepen.io/kevingimbel/pen/Hpazh&quot;&gt;here on CodePen&lt;/a&gt;. Special thanks to &lt;a href=&quot;http://getdigital.de/&quot;&gt;getDigital.de&lt;/a&gt; for letting me use some of their nerdy Product Images! May the force be with you.&lt;/p&gt;
&lt;p&gt;In case you&#39;ve any questions feel free to &lt;a href=&quot;http://twitter.com/kevingimbel&quot;&gt;tweet me&lt;/a&gt; or comment on the &lt;a href=&quot;http://codepen.io/kevingimbel/pen/Hpazh&quot;&gt;Pen&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How I got employed</title>
    <link href="https://kevingimbel.de/blog/2013/12/how-i-got-employed/"/>
    <updated>2013-12-22T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/12/how-i-got-employed/</id>
    <content type="html">&lt;p&gt;About 1 year ago I joined a &lt;a href=&quot;http://tlk.io/codepen&quot;&gt;tlk.io&lt;/a&gt; Chat created by &lt;a href=&quot;http://twitter.com/timpietrusky&quot;&gt;Tim Pietrusky&lt;/a&gt;. It was my first time ever I joined a group of other devs and I was more then nervouse about because I - at this time - considered my self more of a Hobby-Dev who&#39;s not that skilled. I just started using CodePen a few months before and did some fun demos and experiments there like drawing images with CSS and stuff. However, through &lt;a href=&quot;http://weloveiconfonts.com/&quot;&gt;We Love Icon Fonts&lt;/a&gt; and Twitter I got to know Tim a bit more and as time passed we - and the others - talked daily in our dev chat. It felt super awesome to be around skilled people and I really enjoyed their company.&lt;/p&gt;
&lt;p&gt;As I found out that Tim lives near me I wanted to meet him because the only person I ever knew who did web-stuff was my best friend &lt;a href=&quot;http://twitter.com/MyXoToD&quot;&gt;Max&lt;/a&gt; so we drove to Tim&#39;s, had some self-made burgers and worked a bit together. That was about 5 months ago and just on Friday I broke up School to work as a full-time Front-End Developer with Tim at &lt;a href=&quot;http://synoa.de/&quot;&gt;Synoa&lt;/a&gt;. I&#39;m really excited about this!&lt;/p&gt;
&lt;p&gt;Tim always said I&#39;d be skilled and he&#39;d be sure I could create amazing things and I can be - and am willing to - become an awesome web developer. In fact, Tim trusts more in me then I do. Thanks for this at this point.
So, he got me into a Company and wanted to work with me, I accepted and on January 1th 2014 I&#39;ll officially start working there. &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt; played a big role in getting me this Job because it&#39;s an easy way to show off your skills and an even more easy way to build a Portfolio full of snippets. It took me a lot of time to do different things and while my friends where outside drinking on the weekends I was home doing &lt;a href=&quot;http://codepen.io/kevingimbel/pen/vtJzn&quot;&gt;a CSS classic Gameboy&lt;/a&gt;, a &lt;a href=&quot;http://codepen.io/kevingimbel/pen/IsBka&quot;&gt;Vault-Tec Logo&lt;/a&gt;, the &lt;a href=&quot;http://codepen.io/kevingimbel/pen/wAljf&quot;&gt;Aperture Science Logo&lt;/a&gt;, a &lt;a href=&quot;http://codepen.io/kevingimbel/pen/jGFCs&quot;&gt;turret from Portal&lt;/a&gt;, &lt;a href=&quot;http://codepen.io/kevingimbel/pen/BpcGr&quot;&gt;R2D2&lt;/a&gt; or a single element &lt;a href=&quot;http://codepen.io/kevingimbel/pen/iqDIv&quot;&gt;Link from The Legend Of Zelda&lt;/a&gt; - those things are all useless but fun and they helped me a lot in understanding CSS and Sass. I did this to have fun and to have things I could show to others and as I know now it was worth it. I&#39;ve got a Job offer and I&#39;ll work at a company again.&lt;/p&gt;
&lt;p&gt;Getting to know &lt;a href=&quot;http://twitter.com/timpietrusky&quot;&gt;Tim&lt;/a&gt;, using &lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;CodePen&lt;/a&gt; that much and &lt;a href=&quot;https://kevingimbel.de/join-a-dev-group&quot;&gt;joining a dev group&lt;/a&gt; have been the best decisions I made this year. I am happy and I&#39;m looking forward to a full-time working year with a lot of awesome client projects.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brackets vs. Sublime Text</title>
    <link href="https://kevingimbel.de/blog/2013/12/brackets-vs-sublime-text/"/>
    <updated>2013-12-25T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2013/12/brackets-vs-sublime-text/</id>
    <content type="html">&lt;p&gt;I first tried &lt;a href=&quot;http://brackets.io/&quot;&gt;Brackets&lt;/a&gt; back in my Windows time. It was a very early version, kinda heavy and wonky and not what I wanted from an editor I use on a daily base at all. Just today I decided to give it a second look because beside &lt;a href=&quot;http://www.vim.org/&quot;&gt;VIM&lt;/a&gt; it is &lt;em&gt;the&lt;/em&gt; editor I read quite a lot about latly. My first impression was: &amp;quot;&lt;em&gt;Wow, that&#39;s a simple, clean editor!&lt;/em&gt;&amp;quot; - exactly the thing I liked so much about Sublime Text 2 which I&#39;ve been using for the last two years or so.&lt;/p&gt;
&lt;h2&gt;Functionality&lt;/h2&gt;
&lt;h3&gt;Highlighting&lt;/h3&gt;
&lt;p&gt;Bracket as well as Sublime Text comes with Syntax Highlighting for almost everything one needs: HTML, SCSS, CSS, JavaScript, Ruby, Python - all of these can be highlighted by default which, in my opinion, is a standard these days. However, as far as I can tell it is easier to customize the Highlight settings in Sublime Text (2) and with the standard Monokai Theme Sublime has a better highlighting than Brackets. Another point is that there is no way (as far as I found) to set a highlight language before saving a file in Brackets - so I can&#39;t have Markdown Highlighting for this post unless I save it once which is possible in Sublime Text.&lt;/p&gt;
&lt;h3&gt;Plugins + Installation&lt;/h3&gt;
&lt;p&gt;Both editor support additional plugins to enhance the workflow. Both support &lt;a href=&quot;http://emmet.io/&quot;&gt;Emmet&lt;/a&gt; which is by far my most needed Plugin as well as FTP Solutions to upload on safe. Both of these are important plugin for my workflow because when developing on a (S)FTP Dev System uploading on save without another program running is a lot faster. I love it. In Sublime Text the easiest way to add new Plugin is through the &lt;a href=&quot;https://sublime.wbond.net/installation&quot;&gt;Package Controller&lt;/a&gt; - Brackets comes with a build-in Package Manager that makes it super easy to add new Plugins. Here the point goes to Brackets for already build-in Package Management.&lt;/p&gt;
&lt;h3&gt;UI / UX&lt;/h3&gt;
&lt;p&gt;Both Editors have a clean and simple to understand UI. The only real difference that&#39;s notable in my opinion is that Brackets has open files on the top-left sidebar while Sublime Text has them on top organized as tabs (as well as in the sidebar when displayed). This is a difference at first when you come from Sublime Text and in my opinion it&#39;s easier to have open files at the top. Nevertheless in both editors it&#39;s possible to go through all open files by hitting &lt;code&gt;CMD + Tab&lt;/code&gt; which comes very handy. A huge downside of Brackets is that it&#39;s not possible to have new files unsaved and then close the editor. In Sublime unsaved files stays as unsaved inside the editor until it is opened the next time. I really like this because in case of a sudden system crash, an electricity failure or whatever else files can still be found after re-booting. Highfive Sublime Text.&lt;/p&gt;
&lt;p&gt;~Another thing I really miss in Brackets and I got unbelievable used to is multi-select. In Sublime Text it&#39;s possible to select multiple points inside a document when holding CMD while clicking inside the document so you can edit as many rows as you want at once - unbelievable useful!~&lt;br /&gt;
As &lt;a href=&quot;https://github.com/GuidoJansen&quot;&gt;Guido Jansen&lt;/a&gt; pointed out in &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.github.io/issues/4&quot;&gt;Issue #4&lt;/a&gt; brackets now supports multiple lines.&lt;/p&gt;
&lt;h3&gt;Live Preview&lt;/h3&gt;
&lt;p&gt;Bracket comes with a Live Preview functionality that allows to display a file inside the browser that&#39;ll be updated in real time as you type. I couldn&#39;t think of a scenario where I&#39;d need a real-time preview of my file to be honest but it&#39;s a cool feature anyway.&lt;/p&gt;
&lt;h3&gt;Auto-Complete&lt;/h3&gt;
&lt;p&gt;Both Sublime Text and Brackets have auto-complete for CSS. While Sublime Text &amp;quot;only&amp;quot; supports basic auto-complete (e.g. typing &lt;code&gt;&#39;hei&#39; + tab&lt;/code&gt; will get you &lt;code&gt;height: &lt;/code&gt;) Brackets supports to &amp;quot;Quick Edit&amp;quot; colors (right-click on a color or use &lt;code&gt;CMD+E&lt;/code&gt; when hovering it) to bring up a color dialog as show below. This is a nice feature when trying to find a color.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.kevingimbel.me/sc/screenshot-53-24.png&quot; alt=&quot;Quick Edit Colors in Brackets&quot; title=&quot;Quick Edit Colors in Brackets&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Another thing both support is the auto-closing of HTML tags (e.g. &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; will get you &lt;code&gt;&amp;lt;article&amp;gt;&amp;lt;/article&amp;gt;&lt;/code&gt;).
Unfortunately Brackets does not query SCSS variables. When you define your variables in Sublime and type &lt;code&gt;$color--&lt;/code&gt; Sublime Text shows all variables starting with &lt;code&gt;$color--&lt;/code&gt; - that&#39;s a thing I really miss in Brackets.&lt;/p&gt;
&lt;h3&gt;Debugging&lt;/h3&gt;
&lt;p&gt;Brackets comes with build-in JSHint support which is really useful especially for JavaScript beginners like I&#39;m one. You can see in-editor what errors you made - really great!
I&#39;m pretty sure there&#39;s a Sublime Text Plugin for this, too but having it build-in is just a great feature. What I&#39;m missing on the other hand is spell-checking. As non-native English speaker spell-checking is always a great thing.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I&#39;m impressed by Brackets, it&#39;s a simple and great editor and I&#39;ll definitely keep an eye on it. It&#39;s a good, free alternative to Sublime Text 2 (which costs 75$) and worth a try. However, depending on my current workflow I&#39;ll stick to Sublime Text for most of my work.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Web Development in 2014</title>
    <link href="https://kevingimbel.de/blog/2014/01/web-development-in-2014/"/>
    <updated>2014-01-02T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/01/web-development-in-2014/</id>
    <content type="html">&lt;p&gt;As soon as you start to really dig into web development it feels like things would change daily - at least I feel that way. But there&#39;s one thing that I&#39;d like everyone to do in 2014: At least &lt;strong&gt;basic responsive web development&lt;/strong&gt; to ensure your site - at least - looks good and is usable on whatever screen it will be displayed. There&#39;s nothing I hate more than scrolling websites around on my phone when I want to read an article (to be honest, I mostly leave the site and never come back). However, I&#39;ll give you a short look into basic responsive design/development patterns.&lt;/p&gt;
&lt;h3&gt;Planning&lt;/h3&gt;
&lt;p&gt;First of all make sure what your site is about and what your content is like. &lt;strong&gt;Never hide content!&lt;/strong&gt; Hiding content is the last resort and I prefer to avoid this. Make sure your site displays all the information you need the user to have in a order that makes sense: Do I want to scroll through your header, sidebar and a small advertisement area before I can find the article I&#39;m searching for? No, I don&#39;t. Good responsive, scalable design starts with mark up and there are a few tricks to archive a good looking, usable website. Before we start to look at the code: I&#39;ll focus on blog-like websites here and will cover more complex things later in another post.&lt;/p&gt;
&lt;h3&gt;Drop the m.domain&lt;/h3&gt;
&lt;p&gt;Some people may tell you that &lt;code&gt;m.domain.tld&lt;/code&gt; is a great thing but it is not. Actually, it&#39;s the first and worst mistake you can make. There are a few reasons for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you split your whole page into 2 domains (m.domain.tld and domain.tld)&lt;/li&gt;
&lt;li&gt;you need doubled content&lt;/li&gt;
&lt;li&gt;users on desktop don&#39;t get re-directed to the domain.tld when clicking on a m-dot link&lt;/li&gt;
&lt;li&gt;when the windows gets resized your page doesn&#39;t fit the new viewport&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are even more reasons to drop m-dot domains but I think those should make it clear. Another downside to &amp;quot;smartphone&amp;quot;-only optimization is the last point on the list: The resizing. I really like to re-size a page to half it&#39;s size on desktop so that I can, for example, follow a guide and do stuff inside my editor without switching between the windows all the time. This screenshot of &lt;a href=&quot;http://spiegel.de/&quot;&gt;spiegel.de&lt;/a&gt; shows the downside of &amp;quot;mobile-only&amp;quot; responsive design.
&lt;img src=&quot;https://i.kevingimbel.me/sc/screenshot-16-46.png&quot; alt=&quot;Screenshot of Spiegel Online, left the desktop version half it&#39;s size, right the mobile version&quot; title=&quot;Screenshot of Spiegel Online, left the desktop version half it&#39;s size, right the mobile version&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So, the key of a good, flexible design is the CSS and the breakpoints. I prefer to create them in em instead of pixel or - even worse - exact screen sizes to target different devices. If you keep your head out of the iOS world you&#39;ll find hundreds of different screen sizes, would you target them all with exact pixels? I guess you wouldn&#39;t want to and wouldn&#39;t do it. So what else can we do? Support just a few devices, let&#39;s say a min-width of 600px? No. We&#39;ll use em instead and build a responsive site with 3 to 4 breakpoints like so:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; all &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 80em&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/* large screens */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; all &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 80em&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/* medium up to large */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; all &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50em&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/* small screens as well as sites pinned to one-half of the screen */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; all &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 30em&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/* small devices like smartphones */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I once created a page that only &lt;a href=&quot;http://dev.kevingimbel.me/breakpoint/&quot;&gt;shows the current breakpoint&lt;/a&gt; and based on this I found that the above breakpoints are safe to use. However, just knowing the breakpoints isn&#39;t the goal. Next it comes to markup and grids while I&#39;ll use a early beta of Bullgrid, a Grid System I&#39;m working on with &lt;a href=&quot;http://twitter.com/timpietrusky&quot;&gt;Tim Pietrusky&lt;/a&gt; at the moment. It&#39;s based on &lt;a href=&quot;http://inuitcss.com/2012/12/building-grid-systems-with-inuit-css/&quot;&gt;inuit CSS Grids&lt;/a&gt; but moved into one file and re-written to use &lt;a href=&quot;https://kevingimbel.de/em-vs-px&quot;&gt;em instead of px&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;The Markup&lt;/h3&gt;
&lt;p&gt;The first Demo Markup for this post is a simple blog with a large header, a content area and a sidebar as well as a footer.&lt;/p&gt;
&lt;p data-height=&quot;400&quot; data-theme-id=&quot;647&quot; data-slug-hash=&quot;imvDF&quot; data-user=&quot;kevingimbel&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/kevingimbel/pen/imvDF&quot;&gt;imvDF&lt;/a&gt; by Kevin (&lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;@kevingimbel&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;&lt;/p&gt;
&lt;script async=&quot;&quot; &quot;=&quot;&quot; codepen.io=&quot;&quot; assets=&quot;&quot; embed=&quot;&quot; ei.js&quot;=&quot;&quot;&gt;&lt;/script&gt;
&lt;p&gt;When you open the pen in &lt;a href=&quot;http://codepen.io/kevingimbel/full/imvDF&quot;&gt;fullscreen view&lt;/a&gt; and resize it you can see that the sidebar moves underneath the article itself so that it is not in the way but visible to everyone who finish the article - in my opinion a good way to hide a sidebar on small screens because it doesn&#39;t require an extra click to open or see the sidebar and it is still there.&lt;/p&gt;
&lt;p&gt;This all works with a Grid I&#39;ll talk about next and the way the markup is written.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Wrapping the Grid inside the gw class --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wrapper gw&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;header&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;g one-whole  small-one-whole&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- the header always stays at 100% of the available width --&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;main&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;g two-thirds  small-one-whole&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!--&lt;br /&gt;        The content takes 2/3 of the space&lt;br /&gt;        --&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;aside&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;g one-third  small-one-whole&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!--&lt;br /&gt;        The Sidebar takes the remaining 1/3 of the space and because it&#39;s&lt;br /&gt;        below the content in the DOM order it moves below it when the page&lt;br /&gt;        get&#39;s resized. That&#39;s basically the &quot;Markup magic&quot;&lt;br /&gt;        --&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;aside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;footer&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;g one-whole&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Again, one-whole = all available width --&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;footer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may wonder what this &lt;code&gt;small-one-whole&lt;/code&gt; thing does? I&#39;ll cover that next!&lt;/p&gt;
&lt;h3&gt;The Grid&lt;/h3&gt;
&lt;p&gt;As mentioned above I&#39;m using an early beta of Bullgrid. However, the best thing about this grid is that it is re-usable, easy to understand and you can see the behavior of elements inside the markup. Here&#39;s an example.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;g one-third  medium-one-half  small-one-whole&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Article 1 --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;g one-third  medium-one-half  small-one-whole&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Article 2 --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;g one-third  medium-one-half  small-one-whole&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Article 3 --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the above results in something similar to this.&lt;/p&gt;
&lt;p data-height=&quot;500&quot; data-theme-id=&quot;647&quot; data-slug-hash=&quot;aifLb&quot; data-user=&quot;kevingimbel&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/kevingimbel/pen/aifLb&quot;&gt;aifLb&lt;/a&gt; by Kevin (&lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;@kevingimbel&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;&lt;/p&gt;
&lt;script async=&quot;&quot; &quot;=&quot;&quot; codepen.io=&quot;&quot; assets=&quot;&quot; embed=&quot;&quot; ei.js&quot;=&quot;&quot;&gt;&lt;/script&gt;
&lt;p&gt;As you can see the article&#39;s width is always adjusted to the width of the screen and it is completly readable inside the code.&lt;/p&gt;
&lt;p&gt;The hearth of this grid is the breakpoint mixin you can see below.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$point&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@if&lt;/span&gt; $point == &lt;span class=&quot;token string&quot;&gt;&quot;large&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; all &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 80em&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@if&lt;/span&gt; $point == &lt;span class=&quot;token string&quot;&gt;&quot;medium&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; all &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 80em&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@if&lt;/span&gt; $point == &lt;span class=&quot;token string&quot;&gt;&quot;small&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; all &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 30em&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This mixin can be used like&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;.my-class&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;small&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So when the breakpoint small is triggered &lt;code&gt;my-class&lt;/code&gt; will have a width of 100% instead of 50%. Quite a lot to write in case of the grid right? &lt;a href=&quot;http://csswizardry.com/&quot;&gt;Harry Roberts&lt;/a&gt; has a handy &lt;code&gt;grid-setup()&lt;/code&gt; SCSS function that we re-used for bullgrid. It looks as followed.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grid-setup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$&lt;span class=&quot;token property&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/*&lt;br /&gt;   * Hidden&lt;br /&gt;   */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;.#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$namespace&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token selector&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt;   * Whole&lt;br /&gt;   */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;.#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$namespace&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token selector&quot;&gt;one-whole&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt;   * Halves&lt;br /&gt;   */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;.#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$namespace&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token selector&quot;&gt;one-half&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt;   * Thirds&lt;br /&gt;   */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;.#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$namespace&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token selector&quot;&gt;one-third&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 33.333%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;.#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$namespace&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token selector&quot;&gt;two-thirds&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 66.666%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt;   * Quarters&lt;br /&gt;   */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;.#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$namespace&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token selector&quot;&gt;one-quarter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 25%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;.#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$namespace&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token selector&quot;&gt;two-quarters&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@extend&lt;/span&gt; .#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$namespace&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;one-half&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;.#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$namespace&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token selector&quot;&gt;three-quarters&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 75%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/*&lt;br /&gt;    and so on....&lt;br /&gt;&lt;br /&gt;*/&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;.#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$namespace&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token selector&quot;&gt;eleven-twelfths&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 91.666%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To set up the &lt;code&gt;small-&lt;/code&gt;, &lt;code&gt;medium-&lt;/code&gt; and &lt;code&gt;large-&lt;/code&gt; grid we use &lt;code&gt;grid-setup&lt;/code&gt; combined with &lt;code&gt;breakpoint&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;large&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grid-setup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;large-&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;medium&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grid-setup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;medium-&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;small&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grid-setup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;small-&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the grid is setup we can use all the different combinations and prefix them with &lt;code&gt;large-&lt;/code&gt;,&lt;code&gt;meduim-&lt;/code&gt; or &lt;code&gt;small-&lt;/code&gt;. Basically that&#39;s it what I want to say about responsive development to this point. I think it is important to stop thinking in different categories like &amp;quot;mobile&amp;quot;, &amp;quot;desktop&amp;quot;, &amp;quot;TV&amp;quot; or whatever - it&#39;s more important to see a bunch of screens and devices that have a specific width you need to target with your breakpoints. Also I think every website you create this year should be responsive. There&#39;s no excuse anymore to do a non-responsive website. It should be a standard. So as a developer in a design team you should talk to your designers to keep responsive design in mind when making screen-designs. The Internet has become a canvas with a lot of sizes and we, as the artist, have to re-think the way we paint on it.&lt;/p&gt;
&lt;p&gt;I appreciate your opinion and critic &lt;a href=&quot;http://twitter.com/kevingimbel&quot;&gt;@kevingimbel&lt;/a&gt; or via &lt;a href=&quot;https://kevingimbel.de/imprint&quot;&gt;eMail&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Mixtape: 2013</title>
    <link href="https://kevingimbel.de/blog/2014/01/mixtape-2013/"/>
    <updated>2014-01-05T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/01/mixtape-2013/</id>
    <content type="html">&lt;p&gt;I like to make Mixtapes (or playlists) on SoundCloud and this one is my &amp;quot;Best of 2013&amp;quot; Mixtape featuring my favorites of Drum and Bass, Electro and Dubstep. Enjoy!&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; ,=&quot;&quot; &quot;https:=&quot;&quot; w.soundcloud.com=&quot;&quot; player=&quot;&quot; ?url=&quot;https%3A//api.soundcloud.com/playlists/17883496&amp;amp;color=ff6600&amp;amp;auto_play=false&amp;amp;show_artwork=true&amp;quot;&quot;&gt;&lt;/iframe&gt;
</content>
  </entry>
  
  <entry>
    <title>Bullgit loves Jekyll</title>
    <link href="https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/"/>
    <updated>2014-01-06T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/01/bullgit-loves-jekyll/</id>
    <content type="html">&lt;p&gt;After having a static HTML Page for about 6 months, we at &lt;a href=&quot;http://bullg.it/&quot;&gt;bullgit&lt;/a&gt; just switched to a brand-new Jekyll page that uses the GitHub API to display all our repos as well as a list of members with images and links and there are a few reasons why we made this switch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jekyll is built-in GitHub pages&lt;/li&gt;
&lt;li&gt;Jekyll is easy-to-learn and easy to maintain&lt;/li&gt;
&lt;li&gt;No-Database handling of Data (see &lt;a href=&quot;https://github.com/bullgit/bullgit.github.io/blob/master/_data/members.yml&quot;&gt;the list of members we use&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Everyone can clone the repo and run it locally&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So basically, as soon as you have a Project on GitHub or an organization like &lt;a href=&quot;http://twitter.com/bullgit&quot;&gt;bullgit&lt;/a&gt; you can use the power of Jekyll to make your page easy to use and easy to change even for new members. We don&#39;t even use the Blog function of Jekyll (yet), we just have a front-page rendered with some Ajax to load all the Repos.&lt;/p&gt;
&lt;h3&gt;The basic Jekyll code&lt;/h3&gt;
&lt;p&gt;As I always like to remember in Jekyll posts: Jekyll builds static HTML pages but isn&#39;t that static at all. There is a lot of dynamics because files can be included into others, layouts are defined through the &lt;a href=&quot;http://kevingimbel.com/jekyll-guide/first-page/&quot;&gt;Front Matter&lt;/a&gt; and you&#39;re basically free to create whatever Front Matter and Data you want.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; front&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;page&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s it, the whole structure is loaded from a Layout file based in &lt;code&gt;/_layouts/&lt;/code&gt;, this file is called &lt;code&gt;front-page.html&lt;/code&gt;. This &lt;strong&gt;only&lt;/strong&gt; holds the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; content for the front-page, the header and footer are - equal like you&#39;d do it in PHP or other languages - included from &lt;code&gt;header.html&lt;/code&gt; and &lt;code&gt;footer.html&lt;/code&gt; on every page. So even though it is &amp;quot;static&amp;quot;, when you change &lt;code&gt;header.html&lt;/code&gt; all files will get updated and the new header is available everywhere.&lt;/p&gt;
&lt;p&gt;You can work like this, with &lt;code&gt;include file.html&lt;/code&gt; and Layouts in the Front Matter for every file and kind of content you like. It is even possible to create a &lt;a href=&quot;http://kevingimbel.com/atom.xml&quot;&gt;atom.xml&lt;/a&gt; that serves people wo like to subscribe to your posts.&lt;/p&gt;
&lt;p&gt;However, back to the bullgit. I discovered a awesome feature about Jekyll I didn&#39;t knew before: Data handling. When you create a folder called &lt;code&gt;_data&lt;/code&gt; in your root directory you can put every kind of text-based data inside a *.yml file and load it in every page of your site.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# let&#39;s assume this is members.yml&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Tim&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; timpietrusky&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; timpietrusky&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;codepen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; timpietrusky&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;gravatar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//www.gravatar.com/avatar/13a9550a854af911366d9f5deb785cd6&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;s=200&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Max&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; MyXoToD&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; myxotod&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;codepen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; MyXoToD&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;gravatar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//www.gravatar.com/avatar/a284083f6f4f9446723adf3b97b90151&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;s=200&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Kevin&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; _kevinatari&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kevingimbel&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;codepen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kevingimbel&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;gravatar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//www.gravatar.com/avatar/6d391d8c3a528122f3f6c991821350ac&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;s=200  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the file is saved you can loop through its content like:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;br /&gt;{% for member in site.data.member %}&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ member.name }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://twitter.com/{{member.twitter}}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ member.twitter }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{ member.url }}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; {{ member.url }} &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://codepen.io/{{ member.codepen }}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ member.codepen }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;{% endfor %}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s it, the result is a &lt;code&gt;h3&lt;/code&gt; for every member holding its name and 3 links holding the Twitter, Personal Website and CodePen URL, this way new members can be added easily - only one of us has to edit the &lt;code&gt;members.yml&lt;/code&gt; file and the page gets updated a few seconds after.&lt;/p&gt;
&lt;h3&gt;GitHub API&lt;/h3&gt;
&lt;p&gt;As I mentioned above we&#39;re using GitHub&#39;s API to get all our repos on the front-page. This was pretty easy to be honest, even for a JavaScript and API beginner like I am.&lt;/p&gt;
&lt;p&gt;As I always do I avoided jQuery for this because I think it is a waste of Requests to load jQuery if I only use a minimal of its functionality. So I wrote the Ajax request by hand. The comments describe what goes one.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Loading a new Ajax Request and saving it&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// to the variable xml&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; xml &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// opening the connection to GitHub&#39;s REPO API&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Method: GET&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Source &lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Asynchronous: false &lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// For some reasons asynch: true results doubled results&lt;/span&gt;&lt;br /&gt;    xml&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://api.github.com/orgs/bullgit/repos&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// when the state changed (data received )&lt;/span&gt;&lt;br /&gt;    xml&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// controller for the grid system&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// we take the response&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; xml&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;responseText&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// put it into a new var and parse it &lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// then run over ALL THE BULLGIT&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// running reverse because github goes from oldest to newest&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;homepage&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;homepage&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                      &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://github.com/&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;full_name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;br /&gt;                      &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;homepage&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;            &lt;span class=&quot;token comment&quot;&gt;// if it&#39;s the first item&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token comment&quot;&gt;// create a layout for the first featured project&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; layout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;article class=&#39;content--wrap  featured--article&#39;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;                         &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;h2&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;                            &lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;a href=&quot;%s&quot;&gt;%s&amp;lt;/a&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;br /&gt;                        &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;/h2&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;                            &lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;p&gt;%s&amp;lt;/p&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;description&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;                         &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;/article&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                output &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[data-js=featured-project]&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;               &lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;              &lt;span class=&quot;token comment&quot;&gt;// output = document.querySelector(&quot;[data-js=old-projects]&quot;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span class=&quot;token comment&quot;&gt;// create a layout for all other projects&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; layout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;article class=&#39;project&#39;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;                         &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;h3 class=&#39;project--headline&#39;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;                            &lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;a href=&quot;%s&quot;&gt;%s&amp;lt;/a&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;br /&gt;                        &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;/h3&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;                             &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;p&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;description&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;/p&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;                         &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;/article&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                &lt;span class=&quot;token comment&quot;&gt;// select an output @TODO[Kevin]: Re-think logic...&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;                  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; output &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[data-column=&#39;1&#39;]&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;case 1: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; --- &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                  j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                  &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;                  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; output &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[data-column=&#39;2&#39;]&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;case 2: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; --- &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                  j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                  &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;                  j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  &lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;       &lt;br /&gt;            &lt;span class=&quot;token comment&quot;&gt;// and adding our brand-new bullshit to it.&lt;/span&gt;&lt;br /&gt;            output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; layout&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// sending data&lt;/span&gt;&lt;br /&gt;    xml&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another piece if JavaScript is used to add the Script after the DOM is fully loaded, as suggested by &lt;a href=&quot;http://twitter.com/timpietrusky&quot;&gt;Tim&lt;/a&gt; to speed up the overall loading speed.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Add a script element as a child of the body&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;downloadJSAtOnload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; element &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;script&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;assets/js/main.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Check for browser support of event handling capability&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;addEventListener&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;load&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; downloadJSAtOnload&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;attachEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;onload&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; downloadJSAtOnload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onload &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; downloadJSAtOnload&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those are just a few of the benefits of Jekyll and, because we&#39;re a &amp;quot;GitHub only&amp;quot; organization we switched so it&#39;s easier to scale the site. Building a Blog would now only take a some time because we&#39;re already running Jekyll and just have to add one more layout. That&#39;s it, the basics of our brand-new &lt;a href=&quot;http://bullg.it/&quot;&gt;bullgit&lt;/a&gt; page.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Labels in GMail</title>
    <link href="https://kevingimbel.de/blog/2014/01/labels-in-g-mail/"/>
    <updated>2014-01-08T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/01/labels-in-g-mail/</id>
    <content type="html">&lt;p&gt;In case your company is using &lt;a href=&quot;http://www.google.com/intx/de/enterprise/apps/business/campaign/business-email-by-google-de.html?utm_campaign=emea-smb-apps-bkws-de&amp;amp;utm_medium=cpc&amp;amp;utm_source=google&amp;amp;utm_term=gmail%20business&quot;&gt;GMail Business&lt;/a&gt; there&#39;s one thing that comes to your daily work-life I really love about GMail: &lt;strong&gt;Labels&lt;/strong&gt;. Labels are used to sort eMails automatically and - what I really love about - without removing them from the Inbox into 1000 folders. Instead they just get a Label and their own &amp;quot;View&amp;quot; inside GMail - on Desktop as well as Mobile which makes them even better!&lt;/p&gt;
&lt;p&gt;Unfortunately they&#39;re kinda hidden and not really promoted by Google. To set up automatic labels you first you need to click the &lt;strong&gt;gear&lt;/strong&gt; in the upper right, then &lt;strong&gt;Settings&lt;/strong&gt; and then, in the top navigation just below the search input &lt;strong&gt;Filters&lt;/strong&gt;. Now there&#39;s a &amp;quot;Create new Filter&amp;quot; link you should click. (I personally always search for this link because it is not highlighted in any way).&lt;/p&gt;
&lt;p&gt;However, a dialog pops up where you can enter a bunch of stuff: From, To, Subject, Has words, Has not words, Has Attachment and Don&#39;t include chats. Pretty obvious what can be done here, right? Indeed but the thing is: When you work with a CallTracker system most of the input emails are not from a specific eMail so filtering after an eMail address is not an option. I currently stick with filtering the Subject Line for everything project. I&#39;ll give a example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Project Name: Project X&lt;/li&gt;
&lt;li&gt;CallTracker Schemata: &amp;quot;[Project X - TASK #1 ] Description of the Task...&amp;quot;&lt;/li&gt;
&lt;li&gt;Expected Subject from Clients/Colleags: &amp;quot;Project X&amp;quot;, &amp;quot;project-x.com&amp;quot;, &amp;quot;Project-X&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the rule I&#39;d define here for the subject would be the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt; &lt;span class=&quot;token comment&quot;&gt;# Subject&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Project X&quot;&lt;/span&gt; OR project-x.com OR &lt;span class=&quot;token string&quot;&gt;&quot;[Project X&quot;&lt;/span&gt; OR &lt;span class=&quot;token string&quot;&gt;&quot;Project-X&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;OR&lt;/strong&gt; tells GMail to look for any of these Subject lines and put a label on it. The quotes are only used if there&#39;s a space between the words.
This rule covers the CallTracker as well as the other eMail Subjects so that everything gets sorted automatically into it&#39;s own Label view. I also try to match the Brand color with the Label color to have a visual difference for myself.&lt;/p&gt;
&lt;h3 id=&quot;update&quot;&gt;Update&lt;/h3&gt;
To enhance the features of sorting your inbox with Labels I found it useful for myself to create an additional filter that searches the content of the eMail. In the **Has Words** input I wrote &quot;Assigned to: Gimbel, Kevin&quot; and gave it a red-colored label called &quot;Assigned&quot;. So whenever an eMail from a Calltracker-System contains &quot;Assigned to: Gimbel, Kevin&quot; it gets labeled with the Project related Label as well as the Assigned Label. In the &quot;Assigned&quot;-View (left sidebar, click on &quot;Assigned&quot;) I can now see everything that&#39;s assigned to me - and it still contains the Project Labels in this view.
</content>
  </entry>
  
  <entry>
    <title>Digitalism - Boiler Room at MELT! 2013</title>
    <link href="https://kevingimbel.de/blog/2014/01/digitalism-boiler-room-at-melt-2013/"/>
    <updated>2014-01-10T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/01/digitalism-boiler-room-at-melt-2013/</id>
    <content type="html">&lt;p&gt;I really like Digitalism and I really love electronic music so this DJ Set recorded at MELT! festival in Germany is just perfect. I can highliy recommend to follow &lt;a href=&quot;https://soundcloud.com/digitalism_official&quot;&gt;Digitalism&lt;/a&gt; and &lt;a href=&quot;https://soundcloud.com/platform&quot;&gt;Boiler Room&lt;/a&gt; on SoundCloud.&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; ,=&quot;&quot; &quot;https:=&quot;&quot; w.soundcloud.com=&quot;&quot; player=&quot;&quot; ?url=&quot;https%3A//api.soundcloud.com/tracks/101860747&amp;amp;color=ff6600&amp;amp;auto_play=false&amp;amp;show_artwork=true&amp;quot;&quot;&gt;&lt;/iframe&gt;
</content>
  </entry>
  
  <entry>
    <title>Fatboy Slim - Why Try Harder</title>
    <link href="https://kevingimbel.de/blog/2014/01/fatboy-slim-why-try-harder/"/>
    <updated>2014-01-13T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/01/fatboy-slim-why-try-harder/</id>
    <content type="html">&lt;p&gt;Start your day right and listen to the best of the best of the best from Fatboy Slim - Free on SoundCloud!&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; ,=&quot;&quot; &quot;https:=&quot;&quot; w.soundcloud.com=&quot;&quot; player=&quot;&quot; ?url=&quot;https%3A//api.soundcloud.com/playlists/962346&amp;amp;color=ff6600&amp;amp;auto_play=false&amp;amp;show_artwork=true&amp;quot;&quot;&gt;&lt;/iframe&gt;
</content>
  </entry>
  
  <entry>
    <title>Pure JavaScript slider</title>
    <link href="https://kevingimbel.de/blog/2014/02/pure-java-script-slider/"/>
    <updated>2014-02-22T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/02/pure-java-script-slider/</id>
    <content type="html">&lt;p&gt;The great thing when you&#39;re a beginner in any programming language (or in anything in general) is, that even small successes make you happy and proud of what you did. I&#39;m very  proud of my &lt;a href=&quot;http://kevingimbel.com/to-infinity-and-beyond/&quot;&gt;back to top script&lt;/a&gt; even though it&#39;s not perfect at all. I could make a back to top button with jQuery in a few minutes but it wouldn&#39;t be that much fun. However, I made another JavaScript thing I&#39;m proud of: A pure JavaScript slider.&lt;/p&gt;
&lt;p data-height=&quot;500&quot; data-theme-id=&quot;647&quot; data-slug-hash=&quot;BxflH&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/kevingimbel/pen/BxflH&quot;&gt;BxflH&lt;/a&gt; by Kevin (&lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;@kevingimbel&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; &quot;=&quot;&quot; codepen.io=&quot;&quot; assets=&quot;&quot; embed=&quot;&quot; ei.js&quot;=&quot;&quot;&gt;&lt;/script&gt;
&lt;p&gt;The slider runs forever in a loop, animating images to the left until the last image is reached. When the last image is reached it will animate all back to the first image (I&#39;m not happy with this animation yet) and will start over. Pretty simple. The hardest part for me was - and still is - the animation timing. I&#39;m may over-thinking stuff but I can&#39;t figure out a formula to calculate a good timing based on how many images the slider has. If someone has an idea, fork the pen or &lt;a href=&quot;http://twitter.com/kevingimbel&quot;&gt;tweet me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First of all I defined some variables.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;     &lt;span class=&quot;token comment&quot;&gt;// current image is 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token comment&quot;&gt;// used for loops&lt;/span&gt;&lt;br /&gt;     i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token comment&quot;&gt;// the whole slider element&lt;/span&gt;&lt;br /&gt;     slider &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;[data-js=&quot;sslide&quot;]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token comment&quot;&gt;// all images inside the slider&lt;/span&gt;&lt;br /&gt;     allImages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;  slider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;img&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token comment&quot;&gt;// the width of 1 image based on all images (used in % later)&lt;/span&gt;&lt;br /&gt;     imgWidth &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; allImages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token comment&quot;&gt;// the slider width based on the number of images&lt;/span&gt;&lt;br /&gt;     sliderWidth &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; allImages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next I set the width of all images as well as the slider.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;br /&gt;  slider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sliderWidth &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;%&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; allImages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    allImages&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; imgWidth &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;%&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the slider and images have the correct width (in percent) and I began to make the animation part. It&#39;s made with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window.setInterval&quot;&gt;setInterval&lt;/a&gt; JavaScript function.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;animateLeft&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          time &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; animate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; imgWidth&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        allImages&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cur&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;marginLeft &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; i  &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;%&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;animate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br /&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The interval runs as long as &lt;code&gt;i&lt;/code&gt; is smaller or equal to the image width. Because the interval is set to 50ms it runs &amp;quot;fast&amp;quot; and sets the images &lt;code&gt;margin-left&lt;/code&gt; rapidly to &lt;code&gt;-i%&lt;/code&gt; and because it runs as long as &lt;code&gt;i&lt;/code&gt; is smaller than the image width it hides the image completely to the left. Pretty simple right? However, &lt;code&gt;time&lt;/code&gt; is at the moment a variable that is set to 50 because I couldn&#39;t figure out a good way to calculate it.&lt;/p&gt;
&lt;p&gt;Another function I use is &lt;code&gt;animateRight&lt;/code&gt; that is just the opposite of &lt;code&gt;animateLeft&lt;/code&gt;. It is only used to animate all images back to the start and has the same markup as &lt;code&gt;animateLeft&lt;/code&gt; expect it runs revers (&lt;code&gt;i--&lt;/code&gt;). I combine it with a &lt;code&gt;reset&lt;/code&gt; function that also resets the &lt;code&gt;current&lt;/code&gt; variable to 0.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;animateRight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; imgWidth&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          time &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; animate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; sliderWidth&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        allImages&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cur&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;marginLeft &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;%&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;animate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br /&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; allImages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;animateRight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// resseting the current image to the first image&lt;/span&gt;&lt;br /&gt;      current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;   &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s all the functions I needed for this slider - I could&#39;ve combined the &lt;code&gt;animateLeft&lt;/code&gt; and &lt;code&gt;animateRight&lt;/code&gt; function and if I continue developing this slider I&#39;ll make it. Last thing to do: Call a final interval that handles the sliding of all images.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; allImages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;animateLeft&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        current&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Mixtape: February 2014</title>
    <link href="https://kevingimbel.de/blog/2014/03/mixtape-february-2014/"/>
    <updated>2014-03-02T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/03/mixtape-february-2014/</id>
    <content type="html">&lt;p&gt;Another month passed and a new mixtape arrived. My favorites of February 2014. Enjoy!&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; ,=&quot;&quot; &quot;https:=&quot;&quot; w.soundcloud.com=&quot;&quot; player=&quot;&quot; ?url=&quot;https%3A//api.soundcloud.com/playlists/22172425%3Fsecret_token%3Ds-tPeCl&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;visual=true&amp;quot;&quot;&gt;&lt;/iframe&gt;
</content>
  </entry>
  
  <entry>
    <title>Passing Arguments in JavaScript</title>
    <link href="https://kevingimbel.de/blog/2014/05/passing-arguments-in-java-script/"/>
    <updated>2014-05-23T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/05/passing-arguments-in-java-script/</id>
    <content type="html">&lt;p&gt;One of my favorite aspects of JavaScript is that it is unbelievable flexible. I am currently reading &amp;quot;Secrets of the JavaScript Ninja&amp;quot; by the amazing &lt;a href=&quot;http://ejohn.org/&quot;&gt;John Resig&lt;/a&gt; and try to play around with JavaScript whenever I&#39;ve the time to do so. Just yesteday I needed to pass as many arguments to a function as the user wants which means I can&#39;t check for every possible thingy. Anyway, I&#39;ll cover this in a small write-up aka a blog post. Yay!&lt;/p&gt;
&lt;p&gt;First of all we should have some use case or scenario. I needed the a variable number of options for my &lt;a href=&quot;https://github.com/bullgit/Bulllog&quot;&gt;Bulllog&lt;/a&gt; script that takes any number of CSS oroperty-value pairs and applies them to your console.logs (Chrome only, sadly). Anyway, CSS is a good example in my opinion so we&#39;ll write a small css() function that can be applies to an element.&lt;/p&gt;
&lt;p&gt;First of all, what should this function do? It should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Take any number of CSS property-value pairs&lt;/li&gt;
&lt;li&gt;apply them to our element&lt;/li&gt;
&lt;li&gt;respond (console.log()) errors if any happen&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The functions&lt;/h3&gt;
&lt;p&gt;We&#39;ll start with the basic: getting an element and manipulating its CSS.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;// Getting the element&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; el &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.test&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;background &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;red&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;background&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;black&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of the above ways (&lt;code&gt;el.style.background&lt;/code&gt; and &lt;code&gt;el.style[&#39;background&#39;]&lt;/code&gt;) work the exact same way. But that&#39;s not much fun, right? Why should we want to set our styles this way and where&#39;s the dynamic functional stuff at all? Lets extend the script with a &lt;code&gt;css&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;css&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;el&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; options&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;/*1 */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;object&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    el &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    el &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; el &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;/* 2 */&lt;/span&gt;&lt;br /&gt;  el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;opts&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;red&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this script does:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;check if el is already an object, if so we don&#39;t need to select it again. That&#39;d be the case if we pass the previously defined &lt;code&gt;el&lt;/code&gt; directly to the function.  We can also use &lt;code&gt;css(&#39;.my-class&#39;, &#39;background&#39;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the desired property, e.g. background, color to be red.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alright, that&#39;s not bad but why should we want to sett everything to red? You&#39;re right - we don&#39;t want this. Next up: for in loops!&lt;/p&gt;
&lt;h3&gt;For key in obj&lt;/h3&gt;
&lt;p&gt;For loops are always fun and especially &lt;code&gt;for in&lt;/code&gt; loops. They&#39;re perfect for our needs because we&#39;ll pass a list (or better an Object) with property-value pairs to our function and need to process them so they can be applies as styles. Our modified function now looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;css&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;el&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; options&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; el &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;object&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		el &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		el &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;/* 1 */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; styleProperties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      styleValues &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/* 2 */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/* 3 */&lt;/span&gt;&lt;br /&gt;		styleProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    styleValues&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;We need to create an empty array to store all our property-value pairs in.&lt;/li&gt;
&lt;li&gt;We start our for in loop. We go over every key in our options object.&lt;/li&gt;
&lt;li&gt;Every propery-value pair gets pushed into our arrays, the properties into the &lt;code&gt;styleProperties&lt;/code&gt; array and the values into the &lt;code&gt;styleValues&lt;/code&gt; array.
I&#39;m sure there is a more elegant way to do this, but I couldn&#39;t really think of any - so I&#39;m as always up for improvments!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Our &lt;code&gt;css()&lt;/code&gt; function just got a lot more flexible! Before we could only set any property to one value (everything we want to &lt;code&gt;red&lt;/code&gt;), now we can pass a lot of property-value pairs and they&#39;ll get processes by our function! Awesome, right?
Calling the function would now look like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;	&lt;span class=&quot;token function&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.my-div&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	  color&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;yellow&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;	  background&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#333&#39;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Almost there&lt;/h3&gt;
&lt;p&gt;So far we can pass a list (object) of property-value pairs and process them into two nice arrays. However, the function does not apply these styles yet which is why we have to do one last step.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; styleProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;styleProperties&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styleValues&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We iterate over the array (doesn&#39;t matter which because both are exatctly the same size) and extract the matching properties and values. That&#39;s the point where we actually apply the styles.&lt;/p&gt;
&lt;p&gt;The result looks like this.&lt;/p&gt;
&lt;p data-height=&quot;268&quot; data-theme-id=&quot;647&quot; data-slug-hash=&quot;sJkna&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/kevingimbel/pen/sJkna/&quot;&gt;sJkna&lt;/a&gt; by Kevin Gimbel (&lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;@kevingimbel&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; &quot;=&quot;&quot; codepen.io=&quot;&quot; assets=&quot;&quot; embed=&quot;&quot; ei.js&quot;=&quot;&quot;&gt;&lt;/script&gt;
&lt;p&gt;With this technique you can make any function accept any amount of property-value pairs by simply passing in an object. This would also work when you define the object itsef as a variable (see the second div). It&#39;s important to know that properties like &lt;code&gt;font-size&lt;/code&gt; must be written in quotes (e.g. &lt;code&gt;&amp;quot;font-size&amp;quot;: &amp;quot;1em&amp;quot;&lt;/code&gt;), otherwise the script will fail.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Vim - first impression</title>
    <link href="https://kevingimbel.de/blog/2014/05/vim-first-impression/"/>
    <updated>2014-05-26T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/05/vim-first-impression/</id>
    <content type="html">&lt;p&gt;When I first looked at Vim it was a very short experience that was literally as follows&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;# from the command line&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token function&quot;&gt;vim&lt;/span&gt; test.md&lt;br /&gt;	*vim opens*&lt;br /&gt;	&lt;span class=&quot;token string&quot;&gt;&quot;What&#39;s that?&quot;&lt;/span&gt;&lt;br /&gt;	*CTRL + C* &lt;br /&gt;	&lt;span class=&quot;token string&quot;&gt;&quot;How do I even close this?!&quot;&lt;/span&gt;&lt;br /&gt;	*opens browser, googles &lt;span class=&quot;token string&quot;&gt;&quot;how to close VIM&quot;&lt;/span&gt;*&lt;br /&gt;	ESC + :q&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That was it and that was my Vim experience for quite some time. However, lately I see more and more people talking
about Vim being the single best editor for everything - no matter what language one writes. A site notice here: I
still use Sublime Text (2) daily and love it, I have it configured as I like, have all my Plugin and color schemes
and it just feels great. I tried some other editors like &lt;a href=&quot;https://kevingimbel.de/brackets-vs-sublime-text/&quot;&gt;Brackets&lt;/a&gt; and
&lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;, also &lt;a href=&quot;http://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt; and &lt;a href=&quot;http://www.jetbrains.com/phpstorm/&quot;&gt;PhpStorm&lt;/a&gt;. The later two are great as IDEs but are not the way I like to write code because both are a lot slower than a
simple text editor like atom, sublime of vim. I guess that&#39;s the downside of having an IDE - for me it was too much (I still recommend
trying them, maybe they enhance your workflow). Atom is really like a  clone of Sublime Text running Web Technologies at
it&#39;s heart (Sublime Text is written in Python).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.kevingimbel.me/sc/vim_markdown.png&quot; alt=&quot;&amp;quot;Vim while writing a article&amp;quot;&quot; title=&quot;Vim while writing an article&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Anyway, back to Vim. Vim is, what surprised me first, a command line-based editor, there is a Graphic UI version called
gVim but I wanted to see how I can customize the command line one. Just like the normal bash has a
&lt;code&gt;.bashrc&lt;/code&gt; Vim has its own &lt;code&gt;.vimrc&lt;/code&gt; which defines the settings for all its (advanced) functionality and settings. When
you open Vim with from the command line with &lt;code&gt;vim my-file.md&lt;/code&gt; you&#39;ll see a black editor with some &amp;quot;~&amp;quot; on the left.
You&#39;re now in &amp;quot;normal&amp;quot; mode and need to tab &lt;code&gt;i&lt;/code&gt; to start &lt;code&gt;i&lt;/code&gt;nserting stuff. From within the insert mode its really like
any other editor. When you leave the insert mode (by pressing &lt;code&gt;ESC&lt;/code&gt;) you&#39;re back in the &amp;quot;Normal&amp;quot; mode where you can
easily navigate through your file and delete stuff. Deleting works pretty cool I guess, just double tab &lt;code&gt;d&lt;/code&gt; to delete a
whole sentence or &lt;code&gt;x&lt;/code&gt; to delete the character below the cursor. Or fancy stuff like &lt;code&gt;d + arrow up/down&lt;/code&gt; to delete a
whole paragraph.&lt;/p&gt;
&lt;p&gt;So basically everything in Vim is bound to keys and those keys can be combined (like &lt;code&gt;d&lt;/code&gt;elete + up) and I am sure
there&#39;s even more power inside Vim when it comes to text manipulation, navigation, replacements, etc. Anyway, as long as
I haven&#39;t found out what stuff is possible I&#39;ll just share my &lt;code&gt;.vimrc&lt;/code&gt; with you.&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;	&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; vim:fdm=marker&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;nocompatible&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;&quot; required by Vundle&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;filetype&lt;/span&gt; off &lt;span class=&quot;token comment&quot;&gt;&quot; required by Vundle&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; Vundle Settings {{{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; set the runtime path to include Vundle and initialize&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;rtp&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;~&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;bundle&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Vundle&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;vim&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;token function&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; make Vundle manage itself.&lt;/span&gt;&lt;br /&gt;	Plugin &lt;span class=&quot;token string&quot;&gt;&#39;gmarik/Vundle.vim&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; Emmet - I just can not work without this powerful helper&lt;/span&gt;&lt;br /&gt;	Plugin &lt;span class=&quot;token string&quot;&gt;&#39;mattn/emmet-vim&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; Vim Airline is some kind of fancy status bar thingy I guess.&lt;/span&gt;&lt;br /&gt;	Plugin &lt;span class=&quot;token string&quot;&gt;&#39;bling/vim-airline&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; this needs to be called after all Plugins are loaded&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;filetype&lt;/span&gt; plugin indent &lt;span class=&quot;token keyword&quot;&gt;on&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; }}}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; Syntax highlighting and vim style {{{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; enable syntax highlighting&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token builtin&quot;&gt;syntax&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;on&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot;setting the color scheme to github, which is places in ~/.vim/colors&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;t_Co&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;256&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;colorscheme&lt;/span&gt; Tomorrow&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; vim Airline settings&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; set airline to be displayed all the time (default is only in split mode)&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; last2&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;airline_left_sep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;▶&#39;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;airline_right_sep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;◀&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; line number&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;number&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; }}}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; write settings {{{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;tabstop&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;shiftwidth&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;backspace&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;indent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;eol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;start&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;smarttab&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;formatoptions&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;&quot; wikia said I need this&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;&quot; text width&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; colorcolumn&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;&quot; addes a ruler to the right side of Vim&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; }}}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;&quot; No backups and no swap file&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;nobackup&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;noswapfile&lt;/span&gt;&lt;br /&gt;	&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that&#39;s quite some stuff I guess. First of all, &lt;a href=&quot;https://github.com/gmarik/Vundle.vim&quot;&gt;Vundle&lt;/a&gt; is the Plugin manager
for Vim, there are others but I chose this one because it is 99% written in VimL. This little thingy helps me keep track
of Plugins I use. Friendly.
&lt;code&gt;syntax on&lt;/code&gt; simply turn on syntax highlighting. &lt;code&gt;set t_Co=256&lt;/code&gt; sets the terminal colors to 256 colors so the
&lt;code&gt;colorscheme Tomorrow&lt;/code&gt; (&lt;a href=&quot;https://github.com/chriskempson/tomorrow-theme&quot;&gt;here&lt;/a&gt;) works. Next up is Airline, a &amp;quot;better
statusbar&amp;quot; for Vim. I saw this on a screenshot once and searched for it, what I first found was
&lt;a href=&quot;https://github.com/Lokaltog/powerline&quot;&gt;Powerline&lt;/a&gt; but I then saw &lt;a href=&quot;https://github.com/bling/vim-airline&quot;&gt;Airline&lt;/a&gt; and
chose it because it is written in VimL and I - as of now - try to avoid language mixin because I think it&#39;s a good idea
to keep Vim &amp;quot;clean&amp;quot; as long as possible. Airline can show in what mode I am, what Git Branch I&#39;m on, and a lot of other
stuff I haven&#39;t configured yet. I guess that&#39;ll be another blog post. The &lt;code&gt;airline_left_sep&lt;/code&gt; and &lt;code&gt;airline_right_sep&lt;/code&gt; are
the separators of the statusline (see the screenshot below, the seperators are down after &amp;quot;Normal&amp;quot; and before the &amp;quot;1%&amp;quot;)  which at the moment don&#39;t look as cool as I thought - have to fix this. Next up
tabstops, shiftwidth (self explaining), backspace (I&#39;ve no idea what this is but saw it in any .vimrc I found)
smarttabs, text width so Vim doesn&#39;t write until the end of the screen (I like small gaps to the right) and colorcolumn,
which is a ruler-like thingy to visually show the max text width. Last stuff: No backups, no swap files, according to a blog
post I found this isn&#39;t needed when working with version controls such as git.&lt;/p&gt;
&lt;p&gt;The weird looking brackets are used to &amp;quot;auto-close&amp;quot; this section so that when I open my file only the description is
visible - this makes a long &lt;code&gt;.vimrc&lt;/code&gt; a lot more readable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.kevingimbel.me/sc/sc-26-01-13.png&quot; alt=&quot;Vim with auto-closed sections&quot; title=&quot;Vim with auto-closed sections&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So that&#39;s it, my tiny Vim experience and setup. As with every config things you can grab a copy of my &lt;code&gt;.vimrc&lt;/code&gt; in the
&lt;a href=&quot;https://github.com/kevingimbel/config/blob/master/.vimrc&quot;&gt;Github Config Repo&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Magento: get and set variables in config.xml</title>
    <link href="https://kevingimbel.de/blog/2014/05/magento-get-and-set-variables-in-config-xml/"/>
    <updated>2014-05-27T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/05/magento-get-and-set-variables-in-config-xml/</id>
    <content type="html">&lt;p&gt;The other day I had a kind of easy problem in Magento that still took me quite some time to solve. In the shop I&#39;m
working on we had a contact form module that sents and validates emails which worked perfectly fine on one page (the one it was made for),
however this form should be &amp;quot;cloned&amp;quot; to be present on 4 pages with different email addresses. Since Magentos Core is
MVC-like I  believed there would be an easy way to pass email addresses to the Controller. Indeed I found a way to do
so, and I&#39;m happy if someone finds a better way!&lt;/p&gt;
&lt;p&gt;I managed to set the different emails in the config.xml (located in &lt;code&gt;/mymodule/etc/config.xml&lt;/code&gt;) like so&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt; # ... Default Block within the &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; block&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;email&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;contact&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;contact@standard.com&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;contact&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;support&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;support@standard.com&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;support&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;yetanotheremail&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;mailme@contact.com&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;yetanotheremail&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;email&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;# ....&lt;br /&gt;# Example of a Router config,&lt;br /&gt;# these are important for the switch below&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;routers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;company_contactform_contact&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Company_ContactForm&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;module&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;frontName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;contact&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;frontName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;company_contactform_contact&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;routers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way the variables can be easily changed inside the &lt;code&gt;config.xml&lt;/code&gt;, later they are retrieved (in the fronend or inside
the Controller.php) with this code&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;	$email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Mage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStoreConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;email/contact&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	$email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Mage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStoreConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;email/support&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	$email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Mage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStoreConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;email/yetanotheremail&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those store configs are only accessable from within this Model and its View, so in &lt;code&gt;compare.phtml&lt;/code&gt; this would throw an error.
Next thing I needed was a &lt;code&gt;switch()&lt;/code&gt; to determine in what view I am. Again, I&#39;m pretty sure there is a better way of
handling this.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt; &lt;span class=&quot;token comment&quot;&gt;/* This returns the name set for the Router in the config.xml.&lt;br /&gt;	* (Between &amp;lt;routers&gt; and &amp;lt;/routers&gt;&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;	$currentRoute &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Mage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFrontController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRouterName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;		&lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$currentRoute&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;company_contactform_productsupport&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;				$email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Mage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStoreConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;email/productsupport&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;				&lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;			&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;comapny_contactform_contact&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;				$email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Mage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStoreConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;email/contact&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;				&lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;			&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;company_contactform_support&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;				$email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Mage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStoreConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;email/support&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;				&lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;			&lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;				$email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Mage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStoreConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;email/fallback&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;				&lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The fallback is used for the case of no match - it should not happen but it still can happen, so it&#39;s always save to
have a fallback. In this case it just goes to the generic info eMail of the client.&lt;/p&gt;
&lt;p&gt;I&#39;m not sure if there&#39;s a better or easier way but I found that this solution fits my needs pretty good.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Useful Web Developer Tools</title>
    <link href="https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/"/>
    <updated>2014-06-13T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/06/useful-web-developer-tools/</id>
    <content type="html">&lt;p&gt;I myself always like to see what other developers use in their workflow: What tools? What plugin? Live-Reload,
Pre-Processors, shortcuts - all that stuff. It&#39;s always great to save some time, especially for repeating tasks or
challenges. Today I want to share my list of tool that I use on a daily base for all kinds of things.&lt;/p&gt;
&lt;h2&gt;Browser-based&lt;/h2&gt;
&lt;p&gt;The following tools are all for Chrome because I use Chrome for most of my development. If you&#39;re using another browser
this section will not be relevant and you can skip to the next list.&lt;/p&gt;
&lt;h3&gt;Web Developer&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm&quot;&gt;Web Developer&lt;/a&gt; is my personal
number 1 Chrome extension. It&#39;s packed with all kinds of functions like responsive previews, disable
actions (for JavaScript, Cookies, CSS) and what so not - in fact I&#39;m pretty sure this extension can do anything you&#39;ll
ever need on the front-end.&lt;/p&gt;
&lt;h3&gt;Awesome Screenshot&lt;/h3&gt;
&lt;p&gt;Even though it is not my main screenshot tool (more later), &lt;a href=&quot;https://chrome.google.com/webstore/detail/awesome-screenshot-captur/alelhddbbhepgpmgidjdcjakblofbmce&quot;&gt;Awesome
Screenshot&lt;/a&gt; really
is handy when it comes to quickly taking screenshots inside the browser. It can capture selections, visible parts and
even the whole website into one picture. The main reason I have this plugin is the easy way of writing into the
screenshots, adding notes or drawing rectangles and circles - that&#39;s really the only reason I have this extension.&lt;/p&gt;
&lt;h3&gt;Wappalyzer&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg&quot;&gt;Wappalyzer&lt;/a&gt; shows frameworks and
software used to build the page you&#39;re currently on. This tool is really sweet and I only use it because I&#39;ve been
looking into the source code of several websites to find hints on the used software. Wappalyzer can also show CSS
Frameworks (like Bootstrap or Foundation), JavaScript Frameworks (like jQuery and Prototype), Web Servers (Nginx or
Apache), Operating Systems (that one&#39;s interesting I&#39;ve no idea how this works) or programming languages (Ruby, PHP).
Wappalyzer also sends anonymous informations to its &lt;a href=&quot;https://wappalyzer.com/&quot;&gt;Web Platform&lt;/a&gt; where you can see statistics
on used software. (This can be turned off in the settings).&lt;/p&gt;
&lt;h3&gt;ColorZilla&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp&quot;&gt;ColorZilla&lt;/a&gt; is a really simple
and easy-to-use tool with the purpose to get color informations from a website. It can be used by clicking the icon or
setting a custom shortcut.&lt;/p&gt;
&lt;h3&gt;SoundCloud&lt;/h3&gt;
&lt;p&gt;Not really a development tool but lots of &lt;a href=&quot;https://soundcloud.com/atarijunge/likes&quot;&gt;good music&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Non Browser-based&lt;/h2&gt;
&lt;h3&gt;Sublime Text 3&lt;/h3&gt;
&lt;p&gt;After trying a lot of different editors (Some IDE-like, some Sublime Text like) I always came back to Sublime Text
after some while. It&#39;s stable, easy to use, easy to customize and has tons of plugins that can enhance your workflow.
Some of my absolute favorite plugins are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://emmet.io/&quot;&gt;Emmet&lt;/a&gt;, Ex-Zen Coding for generating code from stuff like this &lt;code&gt;(div&amp;gt;.header&amp;gt;.body&amp;gt;p{Test})*5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wbond.net/sublime_packages/sftp&quot;&gt;(S)FTP Plugin&lt;/a&gt; Like the name says, used for (S)FTP deployment&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sublime.wbond.net/installation&quot;&gt;Package Control&lt;/a&gt; easily install packages from within sublime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ScreenCloud&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://screencloud.net/&quot;&gt;ScreenCloud&lt;/a&gt; is my number 1 in-OS screenshot tool. It&#39;s capable of SFTP uploads, Dropbox
uploads, imgur uploads or local file saves so it has everything I need with 3 options of capturing the screen, the active
window or a selection. It&#39;s also multi-OS and runs on Mac, Windows and Linux.&lt;/p&gt;
&lt;h2&gt;Command Line&lt;/h2&gt;
&lt;p&gt;Sweet, sweet command line. Since I switched from Windows 7 to Ubuntu somewhere in summer 2013 I absolutely love the
command line. It&#39;s so much easier to navigate through files, find stuff, copy/delete/move/rename stuff - it&#39;s just way
faster. My Command Line is opened 24/7 and always there to get me access to whatever I want. So here follows some of my
favorite Command Line based tools.&lt;/p&gt;
&lt;h3&gt;Gulp&lt;/h3&gt;
&lt;p&gt;After fiddling around with &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; for quite some time I just recently switched to &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt; due to the fact that is is A LOT easier, more logical and faster (as I can tell). However, I&#39;ll have to see it in real big projects first I guess. As of now, it powers this sites JS and CSS compression and compiling.&lt;/p&gt;
&lt;h3&gt;Image Magick&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.imagemagick.org/&quot;&gt;Image Magick&lt;/a&gt; is a simple command line tool to convert or even create images. I must admit
that I&#39;m using it mostly to resize images. Usage is as simple as &lt;code&gt;$ convert myimg.png -resize 100 myimg_100.png&lt;/code&gt;, this
will resize myimg.png to 100px width and save it as myimg_100.png.&lt;/p&gt;
&lt;h3&gt;VIM&lt;/h3&gt;
&lt;p&gt;It&#39;s been about 2-3 weeks now that I&#39;ve started to use vim more often and I currently really like it for writing
articles or README files and such like.  Developing in it still feels weird but well, maybe someday.
I&#39;m also continuously updating &lt;a href=&quot;https://github.com/kevingimbel/config/blob/master/.vimrc&quot;&gt;my .vimrc&lt;/a&gt; on GitHub. In Vim
I&#39;m also using the &lt;a href=&quot;http://emmet.io/&quot;&gt;Emmet&lt;/a&gt; Plugin but the handling of it is a bit weird. In fact I haven&#39;t really found
out how exactly Emmet works with Vim. I&#39;m used to have Emmet support all the time and no different modes like VISUAL,
INSERT and COMMAND - so in any of these Emmet works. Anyway, if you know how it works give me a shout!&lt;/p&gt;
&lt;h3&gt;Bash&lt;/h3&gt;
&lt;p&gt;That&#39;s not a tool. Or is it? Anyway, I&#39;d like to share my Bash Colors with you, they&#39;re also in the &lt;a href=&quot;https://github.com/kevingimbel/config/blob/master/shell-color&quot;&gt;config GitHub
repo&lt;/a&gt; and given the fact they&#39;re standard non-fancy they
should work on almost all systems. Just edit your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.bash_profile&lt;/code&gt; and add the PS1 line to it to have a
colored, good looking bash prompt.&lt;/p&gt;
&lt;p&gt;So, what tools am I missing? Anything that&#39;s a absolute must-have? &lt;a href=&quot;https://twitter.com/kevingimbel&quot;&gt;Hit me up&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Noobish VIM</title>
    <link href="https://kevingimbel.de/blog/2014/07/noobish-vim/"/>
    <updated>2014-07-13T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/07/noobish-vim/</id>
    <content type="html">&lt;p&gt;Since I&#39;m still trying to really get why so many (Front-End) Devs love VIM I tried to find a &amp;quot;good&amp;quot; way to integrate it
into my daily workflow. Since I&#39;m working in a relativley small company it&#39;s most of the time stressy to get all things
done and to keep an overview - so long story short: There&#39;s not much time for new tools that don&#39;t increase my workflow
directly. VIM is one of these tools that don&#39;t fully support my workflow at the moment. While on one hand being good at
dealing with text and stuff, it is on the other hand (not-so-easily) capable of stuff like (S)FTP sync, auto complete
through Emmet (I still don&#39;t really get how this works in VIM) and the most important thing: It&#39;s hard to switch from
Sublime Text. I&#39;m so used to Sublime Text and it&#39;s shortcuts, multi-cursor, easy-to-use UI, plugins and what so not.&lt;/p&gt;
&lt;p&gt;Anyway, there is a way to make Sublime Text behave more vim-ish. Originally I was searching for a Plugin or something or
a config file to get some VIM keybindings into my safe-zone Sublime Text enviroment. Turns out Sublime Test has this
built-in. In the &amp;quot;ignore_packages&amp;quot; settings is a package called &amp;quot;Vintage&amp;quot;. If this line is changed like seen below&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;	// ignore nothing &lt;br /&gt;	&lt;span class=&quot;token string&quot;&gt;&quot;ignored_packages&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sublime Text will switch into &amp;quot;Vintage&amp;quot; mode which basically is VIM-like. It will have the default VIM modes (Command,
Insert, Visual) and all the keybindings. By default it will still start in Insert Mode, to switch this just set the
following inside the user settings:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;	// always start/open files &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; Command Mode &lt;br /&gt;	&lt;span class=&quot;token string&quot;&gt;&quot;vintage_start_in_command_mode&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With these two settings Sublime Text is ready to run in Vi(m|n)tage mode. This means in particular most (or all?) Vim
commands are available and can be used such as ci&amp;quot; (change in &amp;quot;&amp;quot;), x or r (delete character; replace character below the
cursor in command mode), y and p (yank and put; copy/paste) and so on. I&#39;ve been working this way for about one week now
and I must say that I really like it. It doesn&#39;t hold me back, I can still enjoy my other plugins and if I&#39;m ever
feeling lost I can still use all of Sublime Text&#39;s features. So that&#39;s it, my current setup to get a around some VIM
stuff while still being productive and fast daily. In my free-time and when writing articles I&#39;ve almost switched
completly to VIM to dig into it and see if it can replace Sublime Text one day.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A closer look to closure</title>
    <link href="https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/"/>
    <updated>2014-07-20T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/07/a-closer-look-to-closure/</id>
    <content type="html">&lt;p&gt;Closure is a very interesting concept in JavaScript. It basically determinse where and how variables or
functions are accessable and where not. Since this is an essential part of JavaScript and one can run into quite some
problems I want to try and give short introduction to closure and what it can be good for. It&#39;s good to have at least
basic understanding of JavaScript.&lt;/p&gt;
&lt;p&gt;So before I start I&#39;d like to say that I consider myself a JavaScript beginner and this is how I understand closure
and scopes at the moment. If you happen to find mistakes please &lt;a href=&quot;https://twitter.com/kevingimbel&quot;&gt;tweet me&lt;/a&gt; or &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.github.io/issues?page=1&amp;amp;state=open&quot;&gt;open an
issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consider the following example&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What value will &lt;code&gt;x&lt;/code&gt; have when logged to the console? 5 or 10? The correct answer is 5, because inside the immediate
executing function &lt;code&gt;var x&lt;/code&gt; does not reference the previously defined &lt;code&gt;var x&lt;/code&gt;. They&#39;re both standalone and do not effect
each other. Let&#39;s try this again and see what happens now&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What value will &lt;code&gt;x&lt;/code&gt; have now? Still 5, because it&#39;s the same function but we only left the &lt;code&gt;var&lt;/code&gt; keyword? Nope, now &lt;code&gt;x&lt;/code&gt;
inside the immediate executing function references the previously defined &lt;code&gt;var x&lt;/code&gt; and will update it&#39;s value, so
&lt;code&gt;console.log(x)&lt;/code&gt; results to 10 this time. As you can see just now, leaving out the single word &lt;code&gt;var&lt;/code&gt; can change how your
program behaves. The missing var statment, where closure hits hard and overrides the variable, can really be annoying
because JavaScript doesn&#39;t throw errors. Overriding values inside a closure, e.g. the immediate executing function, is
perfectly fine.&lt;/p&gt;
&lt;p&gt;So what happens if we pass &lt;code&gt;x&lt;/code&gt;, which is 10 now, to the immediate executing function and declare &#39;x = 15&#39; inside the
functions body? Will &lt;code&gt;x&lt;/code&gt; become 15 or stay 10?&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// x is 10 at this point&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the result shows, x is still 10. But wait, wasn&#39;t it supposed to be overridden if we don&#39;t declare &lt;code&gt;var x = 15&lt;/code&gt;? Well
that is true, but since we pass x as a parameter, x is &amp;quot;re-defined&amp;quot; as a local variable and, inside the functions body, it is
indeed 15 - outside it is not.&lt;/p&gt;
&lt;p data-height=&quot;268&quot; data-theme-id=&quot;647&quot; data-slug-hash=&quot;nwmCD&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/kevingimbel/pen/nwmCD/&quot;&gt;nwmCD&lt;/a&gt; by Kevin Gimbel (&lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;@kevingimbel&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;What can closures do for me?&lt;/h3&gt;
&lt;p&gt;What can it do? Good stuff. Closures can help to organize code and keep the global namespace clear. In general one shouldn&#39;t write variables into the global namespace because they&#39;re almost asking to be overriden or changed. Let&#39;s say one writes a function like this.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;con&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;con&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s a super simple assert function to see if a statment (&lt;code&gt;con&lt;/code&gt;dition) is true or false. If it&#39;s false we&#39;ll log a console.error(), if not we&#39;ll log a normal console.log() statement. This is great and perfectly fine unless someone else
tries to use a function with the same name. Then there&#39;ll be a &amp;quot;conflict&amp;quot; and the last declared function overrides the other. (In this example I&#39;ll use a function called myFunction)&lt;/p&gt;
&lt;p data-height=&quot;268&quot; data-theme-id=&quot;647&quot; data-slug-hash=&quot;wuAdv&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/kevingimbel/pen/wuAdv/&quot;&gt;wuAdv&lt;/a&gt; by Kevin Gimbel (&lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;@kevingimbel&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So still, what can closure do for me? It can save my declared functions - inside a closure. So far all closure examples were immediate executing function, but Objects also create closures, assigning all there properties to a specific &amp;quot;namespace&amp;quot;.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myNamespace &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way we introduce one variable to the global scope: myNamespace and keep all the functions inside this scope.
Therefore, the myFunction() is still accessable within the scope and has the expected results, no matter who
declares myFunction in the globale scope.&lt;/p&gt;
&lt;p data-height=&quot;268&quot; data-theme-id=&quot;647&quot; data-slug-hash=&quot;ELfal&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/kevingimbel/pen/ELfal/&quot;&gt;ELfal&lt;/a&gt; by Kevin Gimbel (&lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;@kevingimbel&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; &quot;=&quot;&quot; codepen.io=&quot;&quot; assets=&quot;&quot; embed=&quot;&quot; ei.js&quot;=&quot;&quot;&gt;&lt;/script&gt;
</content>
  </entry>
  
  <entry>
    <title>Conditional CSS</title>
    <link href="https://kevingimbel.de/blog/2014/07/conditional-css/"/>
    <updated>2014-07-31T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/07/conditional-css/</id>
    <content type="html">&lt;p&gt;While there&#39;s a lot of talking about CSS writing styles, organization styles and if it&#39;s maybe better or not to avoid
pre-processors or frameworks there&#39;s one very powerful thing that gets pretty much no attention at all: Conditional CSS,
i.e. pieces of CSS that serve one specific task the easiest and most known is &lt;code&gt;.active&lt;/code&gt; given to, well, active elements.
I&#39;d like to talk a bit about conditional CSS that I&#39;ve been using in production and that I think can improve the overall
logic of CSS.&lt;/p&gt;
&lt;h3&gt;Grids&lt;/h3&gt;
&lt;p&gt;I&#39;d like to notice that the first example is taken from &lt;a href=&quot;http://inuitcss.com/&quot;&gt;inuit.css&lt;/a&gt; by &lt;a href=&quot;http://csswizardry.com/&quot;&gt;Harry
Roberts&lt;/a&gt;. The grid itself has been adopted into &lt;a href=&quot;http://github.com/synoa/bullgrid&quot;&gt;Bullgrid&lt;/a&gt;
which is at the moment a &lt;code&gt;em&lt;/code&gt; based, stripped down and standalone version of &lt;a href=&quot;https://github.com/csswizardry/inuit.css/blob/master/objects/_grids.scss&quot;&gt;inuit.css
grids&lt;/a&gt;. So all the kudos for the next section
go to &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;Harry Roberts&lt;/a&gt;.
One of the most amazing things about inuit.css Grids is its use of viewport-name based classes.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;gw&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;g one-third small-one-whole&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;g one-third small-one-whole&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;g one-third small-one-whole&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example creates a 3 column grid that&#39;ll turn into 3 full-width (one-whole) containers once the viewport
&amp;quot;small&amp;quot; is reached. To achieve this behavior Harry wrote an amazingly logical &lt;a href=&quot;https://github.com/csswizardry/inuit.css/blob/master/generic/_widths.scss#L13-L102&quot;&gt;mixin to set up the
grids&lt;/a&gt; that can later be used to set
up the grid with a given &amp;quot;viewport&amp;quot; prefix (&lt;a href=&quot;https://github.com/csswizardry/inuit.css/blob/master/generic/_widths.scss#L121-L141&quot;&gt;see this
function&lt;/a&gt;). While this creates
quite a lot of CSS on one hand it is amazingly flexible when working with this grid. Most of the time 3 classes are
enough to make any component of the page, or better it&#39;s container, adjust to the current viewport. I categorize this as
&amp;quot;Conditional CSS&amp;quot; because it has a condition (the viewport prefix, e.g. small-).&lt;/p&gt;
&lt;p&gt;Not only is this grid amazingly simple once you get used to the naming, it is also great for prototyping inside the
browser. If one part of the page looks a bit weird I can directly play around with all grid classes to find the perfect
fiting one.&lt;/p&gt;
&lt;h3&gt;JavaScript/Behaviour conditions&lt;/h3&gt;
&lt;p&gt;JavaScript based conditions are similar to the &lt;code&gt;active&lt;/code&gt; example from the intro. Mostly they&#39;ll be applied to elements
with JavaScript. In general Conditional CSS should be prefered over applying styles directly with JavaScript. Not only
is it cleaner to devide functions and styles, it is also easier to debug, especially when immediate executing functions
change the look of elements. Consider the next example.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// hide all things on load using element.style&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; allThings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.things&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; allThings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;			allThings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;display &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;none&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// hide all things with a conditional class&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; allThings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.things&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; allThings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;			allThings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;is-hidden&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.is-hidden&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When only looking at the result both functions do the same: They hide all &lt;code&gt;.things&lt;/code&gt;. However, the conditional CSS
approach applies a class to the element. So when looking at the code from the inspector it is clear that this element
is hidden because of a class name. This way it is easier to find out why an element is not displayed. Also it avoids
inline styles which always have a higher priority than everything else (as the next pen shows).&lt;/p&gt;
&lt;p data-height=&quot;268&quot; data-theme-id=&quot;647&quot; data-slug-hash=&quot;hgpAL&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/kevingimbel/pen/hgpAL/&quot;&gt;hgpAL&lt;/a&gt; by Kevin Gimbel (&lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;@kevingimbel&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; &quot;=&quot;&quot; codepen.io=&quot;&quot; assets=&quot;&quot; embed=&quot;&quot; ei.js&quot;=&quot;&quot;&gt;&lt;/script&gt;
&lt;p&gt;Some of the Conditional CSS classes I use are&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;// element is hidden&lt;br /&gt;.is-hidden&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;// element is displayed&lt;br /&gt;.is-displayed&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;// element is active (most of the time nav items)&lt;br /&gt;.active&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	// styles&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;// used with buttons&lt;br /&gt;.has-icon&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	// styles&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/*&lt;br /&gt; * The following basically works for all&lt;br /&gt; * viewports but it&#39;s more a hack-y thing.&lt;br /&gt; * I use it to hide/display the text inside&lt;br /&gt; *	the header of this blog.&lt;br /&gt;*/&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; all &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 30em&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token selector&quot;&gt;.small--is-hidden&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token selector&quot;&gt;.small--is-displayed&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/*&lt;br /&gt; * Print specific elements&lt;br /&gt; * [1]: Depending on the content and layout&lt;br /&gt; * 			maybe display: inline|inline-block;&lt;br /&gt;*/&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.print-only&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; print&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token selector&quot;&gt;.print-only&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // [1]&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far I find Conditional CSS a good idea and really like to work with it. It&#39;s easier, at least for me, to see what a
class does and where/how it should be used. Also it&#39;s a simple use of DRY (don&#39;t repeat yourself) and &lt;a href=&quot;http://csswizardry.com/2012/04/the-single-responsibility-principle-applied-to-css/&quot;&gt;Single
Responsibility Principle&lt;/a&gt; but as
with everything overusing it won&#39;t make your live easier.
As always I appreciate feedback or improvments via &lt;a href=&quot;http://twitter.com/kevingimbel&quot;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Endless Multi-Dimensional Navigation</title>
    <link href="https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/"/>
    <updated>2014-08-22T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/08/endless-multi-dimensional-navigation/</id>
    <content type="html">&lt;p&gt;The past I decided to get my head around multi-dimensional navigations, like navigations that can have (endless) sub navigations nested inside them and so I started to try some ideas on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;. My first idea was to have a trigger element that, when clicked, triggeres the nearest Sub Navigation to activate it (e.g. giving it an &lt;code&gt;open&lt;/code&gt; class). The JavaScript for this looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    trigger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;#trigger&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    subNav &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; trigger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parentNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.sub-nav&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;trigger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// cancels reload on &amp;lt;a&gt; tags&lt;/span&gt;&lt;br /&gt;  subNav&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;open&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So with this, each time the trigger is clicked the sub navigation will get the class applied or removed
(&lt;code&gt;classList.toggle()&lt;/code&gt;). The &lt;code&gt;subNav&lt;/code&gt; class is markup related, because the trigger is inside a &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, as well as the sub
nav, so &lt;code&gt;this.parentNode&lt;/code&gt; will return the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;trigger&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;+&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;!--&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;this.parentNode&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&amp;lt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;sub-nav&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        ...&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the basic markup for navigations is now like this&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;my-nav-wrapper-class&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; Sub nav &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;xy&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;+&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;sub-nav&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Sub Nav Item&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Sub Nav Item&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Sub Nav Item&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Sub Nav Item&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Sub Nav Item&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of the most important things here is the &lt;code&gt;data-id&lt;/code&gt; attribute which groups the navigations, triggers and (endless)
sub navigations together and is used to reference each of them.&lt;/p&gt;
&lt;h3&gt;Event Bubbling&lt;/h3&gt;
&lt;p&gt;Yet before we get to the actual code it&#39;s important to understand event bubbling. If you already know what it is skip
this section and continue with &amp;quot;Finaly: Code&amp;quot; below.
Event Bubbling is the concept of how the browser handles events. Your&#39;re most likly familiar with &lt;code&gt;e.preventDefault()&lt;/code&gt;
for click events applied to &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;-tags. This function stops the normal event bubbling so the browser doesn&#39;t reload
the page - which is the default action for &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;-tags.
So in our case the behavior we make use of is event bubbling, as said before. Take a look at the graphic below and then
read on.
&lt;img src=&quot;https://i.kevingimbel.me/sc/event_flow_v1.png&quot; alt=&quot;&amp;quot;Event Bubbling for this navigation&amp;quot;&quot; /&gt;
When the even get&#39;s triggered it finds no handler and the event literally goes up the DOM until it finds a handler. Node
by node the little event walks up until finally the navigation wrapper says &amp;quot;Yes little event! I got you, I&#39;ll handle
that!&amp;quot; - and that&#39;s it. When the handler attached to the navigation handles the event it will also populate it&#39;s &lt;code&gt;el&lt;/code&gt;
variable with whatever &lt;code&gt;e.target&lt;/code&gt; currently is. &lt;code&gt;e.target&lt;/code&gt; happens to always be the &lt;strong&gt;triggering element&lt;/strong&gt;, so it is
very similar to &lt;code&gt;this&lt;/code&gt;, yet even more flexible!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Magento: Add fields to the Admin Backend</title>
    <link href="https://kevingimbel.de/blog/2014/08/magento-add-fields-to-the-admin-backend/"/>
    <updated>2014-08-27T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/08/magento-add-fields-to-the-admin-backend/</id>
    <content type="html">&lt;p&gt;Today I had a task at work that first sounded rather easy: Add a field to the Admin backend, namely
&lt;em&gt;System-&amp;gt;Config-&amp;gt;Catalog&lt;/em&gt; where the user could later insert some SKUs to control which products are shown on the home
page. The first resources I found on how to edit the Backend where all suggesting to create a Module and then create a
settings page. Not only was this rather complex it was also way too &amp;quot;over engineered&amp;quot; for a simple thing like a text
field. So I continued searching and found &lt;a href=&quot;http://prattski.com/2008/09/29/magento-add-custom-module-for-custom-admin-config-options/&quot;&gt;this
post&lt;/a&gt; about creating fields
in the backend only with XML.&lt;/p&gt;
&lt;p&gt;That was easy and fair enough I thought and so I gave it a try. First however I created a Module in
&lt;code&gt;app/code/community/Synoa&lt;/code&gt; (&lt;em&gt;community&lt;/em&gt; because this can be reused and is not directly project specific). My folder
structure is really simple since I don&#39;t need much:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;-app/code/community&lt;br /&gt; -Synoa&lt;br /&gt;  -FeaturedProducts&lt;br /&gt;   -etc&lt;br /&gt;    -config.xml&lt;br /&gt;    -system.xml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;config.xml&lt;/code&gt; is the default Module configuration. In my case the following XML.&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token prolog&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;modules&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Synoa_FeaturedProducts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;0.0.1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Synoa_FeaturedProducts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;modules&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The really important and &lt;strong&gt;amazing&lt;/strong&gt; part happens in &lt;code&gt;system.xml&lt;/code&gt;. The way of adding fields as shown below shows how
amazingly flexible Magento can be. When I tried it out and found that it worked right away I was really impressed.
Magento&#39;s Module System, where the Module Name is equal to the folder it is in, e.g. &lt;code&gt;Mage_Core_Block_Html_Link&lt;/code&gt; is in
&lt;code&gt;Mage/Core/Block/Html/Link.php&lt;/code&gt;, also applies to this XML configuration.&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;sections&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;catalog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groups&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;featured_products&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;label&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Featured Products&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;frontend_type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;text&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;frontend_type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;sort_order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;50&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;sort_order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;show_in_default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;show_in_default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;show_in_website&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;show_in_website&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;show_in_store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;show_in_store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;fields&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;product_skus&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;label&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Insert product skus here&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;frontend_type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;text&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;frontend_type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;sort_order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;50&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;sort_order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;show_in_default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;show_in_default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;show_in_website&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;show_in_website&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;show_in_store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;show_in_store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;product_skus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;fields&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;featured_products&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groups&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;catalog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;sections&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well quite a lot of stuff happens here, let&#39;s break that down.&lt;/p&gt;
&lt;h3&gt;Sections&lt;/h3&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;sections&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;catalog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;catalog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;sections&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This part defines in what menu (in the backend on the left) the new fields will be inserted. In this case it&#39;s the
Catalog Menu and there the first Sub-Menu point (which is also named Catalog).&lt;/p&gt;
&lt;h3&gt;Groups&lt;/h3&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groups&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;group_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;group_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groups&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Groups define the &amp;quot;containers&amp;quot; for settings. These are the boxes on the right part of the screen. Because describing it
is rather stupid, here&#39;s a picture of the new admin menu and it&#39;s container (the group).
![&amp;quot;Custom field in the backend.&amp;quot;](https://i.kevingimbel.me/sc/Screenshot at 13-52-42.png)&lt;/p&gt;
&lt;p&gt;Lastly inside the group the content is defined. The wrapping tag can have any valid XML name you want, in my case it is
&lt;code&gt;&amp;lt;featured_products&amp;gt;&lt;/code&gt; the &lt;code&gt;translate=&amp;quot;label&amp;quot;&lt;/code&gt; attribute tells Magento to translate the label if there is a translation
available, either in &lt;code&gt;translate.csv&lt;/code&gt; or &lt;code&gt;myCompany_MyModule.csv&lt;/code&gt; - that&#39;s up to you.&lt;/p&gt;
&lt;p&gt;Inside the container is more stuff that could need some explanation.&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;my_namespace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Featured Products&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;frontend_type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;text&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;frontend_type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;sort_order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;50&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;sort_order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;show_in_default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;show_in_default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;show_in_website&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;show_in_website&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;show_in_store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;show_in_store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;my_namespace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;label&lt;/code&gt; - The label to show at the top (headline)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;frontend_type&lt;/code&gt;- type of the field in the frontend&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort_order&lt;/code&gt; - position in the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show_in_default&lt;/code&gt; - available in default view&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show_in_website&lt;/code&gt; - available in website view&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show_in_store&lt;/code&gt; - available in default store view
The show tags determine in what store config &amp;quot;scope&amp;quot; (after setting it in the top right) the option is available.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;fields&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;product_skus&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;label&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Insert product skus here (csv, e.g 123, 144, 255)&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;frontend_type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;text&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;frontend_type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;sort_order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;50&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;sort_order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;show_in_default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;show_in_default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;show_in_website&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;show_in_website&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;show_in_store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;show_in_store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;product_skus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;fields&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;label&lt;/code&gt; - Label on the left (field description)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort_order&lt;/code&gt;- position &lt;em&gt;inside&lt;/em&gt; the list&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;m not entirely sure what the store variables do here, but I guess they configure if and where the field can be
&lt;code&gt;echo&lt;/code&gt;ed in the frontend.&lt;/p&gt;
&lt;p&gt;And that&#39;s it. Without a single line of PHP fields can be added to the backend in Magento. Retrieving the values of
those fields is also easy, as the following example shows.&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token class-name static-context&quot;&gt;Mage&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStoreConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;catalog/featured_products/product_skus&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The logic here is simply &lt;code&gt;section/groupname/fieldname&lt;/code&gt;. This fits pretty good with the previously mentioned folder
structure of Magento.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Snippet: theme-color for Android 5.0</title>
    <link href="https://kevingimbel.de/blog/2014/11/snippet-theme-color-for-android-5-0/"/>
    <updated>2014-11-21T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2014/11/snippet-theme-color-for-android-5-0/</id>
    <content type="html">&lt;p&gt;Just yesterday I got my Android 5.0 update which also features a new way multi-tasking works and Chrome interacts with
this multi-tasking. In fact, all recently opened tabs are available via the multi-tasking button (square to the down
right on Stock Android) instead of an in-app button like it used to be. This not only is very handy actually since you
can switch between apps and websites seamlessly you can also set your own status bar colors for chrome which are used on
the page and in the multi-tasking overview.&lt;/p&gt;
&lt;h3&gt;One-liner!&lt;/h3&gt;
&lt;p&gt;All it takes is a simple one-liner of HTML: a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;-tag!&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;theme-color&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#5677fc&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The content can be any valid CSS color and that&#39;s it - nothing more to do!&lt;/p&gt;
&lt;h3&gt;Results&lt;/h3&gt;
&lt;div class=&quot;gw&quot;&gt;
 &lt;div class=&quot;g one-third small-one-whole&quot;&gt;
  &lt;img &quot;https:=&quot;&quot; i.kevingimbel.me=&quot;&quot; blog=&quot;&quot; android5=&quot;&quot; nexus_kevingimbelcom.png&quot;=&quot;&quot; /&gt;
 &lt;/div&gt; 
 &lt;div class=&quot;g one-third small-one-whole&quot;&gt;
  &lt;p&gt;&lt;em&gt;left/top:&lt;/em&gt;View when the website is in-browser, the gray bar with the URL input turns to the desired color.&lt;/p&gt;
  &lt;p&gt;&lt;em&gt;right/bottom: View when clicking the multi-task button.&lt;/em&gt;&lt;/p&gt;
 &lt;/div&gt;
 &lt;div class=&quot;g one-third small-one-whole&quot;&gt;
  &lt;img &quot;https:=&quot;&quot; i.kevingimbel.me=&quot;&quot; blog=&quot;&quot; android5=&quot;&quot; nexus_multitasking.png&quot;=&quot;&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>Getting into vim - again</title>
    <link href="https://kevingimbel.de/blog/2015/01/getting-into-vim-again/"/>
    <updated>2015-01-21T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2015/01/getting-into-vim-again/</id>
    <content type="html">&lt;p&gt;It&#39;s been some time since I first got my fingers on VIM. My first impression was - as everyones I guess - pretty bad.
VIM is not that easy to understand, yet a powerful, shortcut-based, distraction free editor. I&#39;ve already written about
&lt;a href=&quot;https://kevingimbel.de/noobish-vim/&quot;&gt;turning Sublime Text into VIM mode&lt;/a&gt; and my &lt;a href=&quot;https://kevingimbel.de/vim-first-impressions/&quot;&gt;very first VIM impression&lt;/a&gt;, but
back then I just copy &amp;amp; pasted everything I found on the Internet into my &lt;code&gt;.vimrc&lt;/code&gt;. Now with the new year I thought some
new thing to learn could be fun and I got back into &lt;em&gt;really&lt;/em&gt; working with VIM.&lt;/p&gt;
&lt;h2&gt;Config first&lt;/h2&gt;
&lt;p&gt;The past week I&#39;ve done all my daily work at &lt;a href=&quot;http://synoa.de/&quot;&gt;Synoa&lt;/a&gt; in VIM. My current &lt;code&gt;.vimrc&lt;/code&gt; is divided into 4
sections which I&#39;ll explain below.&lt;/p&gt;
&lt;h3&gt;Plugins&lt;/h3&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; Enable Pathogen to manage plugins&lt;/span&gt;&lt;br /&gt;execute pathogen#&lt;span class=&quot;token function&quot;&gt;infect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ve replaced Vundle with Pathogen to load Plugins because to my (still noobish) eye it looks better and more easy to
use. Pathogen auto-loads all Plugins that are placed inside &lt;code&gt;~/.vim/bundle/&lt;/code&gt; - currently the only Plugin I&#39;m using is
Emmet, because I&#39;d never ever use an editor again that&#39;s missing Emmet. The way Emmet works in VIM is a little bit weird
because of the different modes and key mappings when you come from a Sublime Text 2/3 background. Basically, you need to
hit &lt;code&gt;[CTRL]+[C]+[,]&lt;/code&gt; after every Emmet snippet - beside that it works as expected.&lt;/p&gt;
&lt;h3&gt;Writin style and syntax&lt;/h3&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; enable syntax highlighting&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;syntax&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;on&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&quot;setting the terminal color to 256 and theme&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; to Bad Wolf, which is places in ~/.vim/colors&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;t_Co&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;256&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;colorscheme&lt;/span&gt; badwolf&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;showmode&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;showcmd&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;modeline&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;ruler&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; line number&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;number&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;tabstop&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;shiftwidth&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;expandtab&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;backspace&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;indent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;eol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;start&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;smartindent&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;formatoptions&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;&quot; wikia said I need this&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;&quot; text width&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; colorcolumn&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;&quot; adds a ruler to the right side of Vim&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;scrolloff&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;wmh&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I must admit that most of the VIM syntax and writing styles is still copy pasted from all over the Internet. In the
first block I&#39;m setting the colorshemes and basic VIM UI (show mode, show CMD, have a mode line; use a ruler). In the
second block there&#39;s settings for line numbers (always nice to have!) and tab width (2 spaces, always), smartindent (so
new lines can be auto-indented), general text width (where to place the ruler), scroll off by X lines so I never scroll
down to the end of the screen and the wmh (window min height) - this one is used so tabs in split view don&#39;t take up any
space.&lt;/p&gt;
&lt;h3&gt;Key mappings&lt;/h3&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; The &amp;lt;Enter&gt; command behind each mapping executes the&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; command directly. Otherwise the command would be written&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; to the VIM &lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;console&#39;&lt;/span&gt; thing&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; start spell checking when hitting F5&lt;/span&gt;&lt;br /&gt;map &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;F5&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;spell&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;spelllang&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;en_us &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Enter&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; switch to previous tab&lt;/span&gt;&lt;br /&gt;nmap &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;F2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;tabp&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Enter&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; switch to next tab&lt;/span&gt;&lt;br /&gt;nmap &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;F3&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;tabn&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Enter&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; hold CTRL + k (up) or j (down)&lt;/span&gt;&lt;br /&gt;map &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;J&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;W&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;W&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;_&lt;br /&gt;map &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;K&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;W&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;W&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;_&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; remove information in which line the non-active file currently is&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; auto-expand path (opening files like :tabedit %%/)&lt;/span&gt;&lt;br /&gt;cabbr &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;expr&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;%:p:h&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mostly my key mappings have stayed the same, F5 is used for spell checking (which comes very handy!), F2 and F3 are used
to navigate between open tabs. The important part here is the &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; behind each command. This way the command will
be executed immediately, otherwise it is written into the little command line at the bottom of VIM.&lt;/p&gt;
&lt;p&gt;New here is the mapping to switch between split view windows. When opening a new file with &lt;code&gt;:sp&lt;/code&gt; I can now navigate
using &lt;code&gt;[CTRL]+[C]&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; to go &amp;quot;down&amp;quot; or &lt;code&gt;k&lt;/code&gt; to go up - this is really handy.&lt;/p&gt;
&lt;p&gt;The last line has been the break-through for me in beeing productive with VIM. When working with Magento and CSS, I
often need to open many files in the same directory, yet I tend to start inside the root. Normally I&#39;d have to write all
the path to where I am, like &lt;code&gt;:tabedit skin/frontend/namespace/default/scss/&lt;/code&gt; when I&#39;m inside a Magento skin folder.
With this little helper I can type &lt;code&gt;:tabedit %%/&lt;/code&gt; and once I write the &lt;code&gt;/&lt;/code&gt; the path will expand to the current
directory.&lt;/p&gt;
&lt;h3&gt;No backups, no swap!&lt;/h3&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; No backups and no swap file&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;nobackup&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;noswapfile&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last part is still the same. Since I&#39;m using git and branches for everything I don&#39;t need any kind of backup or swap
file since I could always revert anything.&lt;/p&gt;
&lt;h2&gt;Working in VIM&lt;/h2&gt;
&lt;p&gt;With these configurations I started to work in VIM. I tried changing and adjusting the themes a bit and in the end found my
self with a dark theme (bad wolf; a Doctor Who reference!) after using Tomorrow Night (light) for almost half a year. So
far after seven days the only thing I&#39;m really missing from time to time is Sublime Texts Multi Cursor Feature and
&amp;quot;Search in Folder&amp;quot; to find stuff inside the whole project. There are plugins for the later feature and multi cursor
editing can be archive using weird, cryptic command combinations but I&#39;m not familiar yet with either of these. So far I
enjoy the destraction free enviorment I&#39;m working in and only start Sublime Text when I can&#39;t find a particular
template.&lt;/p&gt;
&lt;p&gt;Since I&#39;ve used Sublime Text in Vintage Mode for almost 6 months I&#39;m feeling comfortable enough with the basic
operations of using &lt;code&gt;y&lt;/code&gt;ank, &lt;code&gt;d&lt;/code&gt;elete or &lt;code&gt;p&lt;/code&gt;ut to move around lines and edit code, &lt;code&gt;dit&lt;/code&gt; (delete in tags) or &lt;code&gt;ei&amp;quot;&lt;/code&gt; (edit
iin &amp;quot;) are things I don&#39;t use that often because they take too much time when they don&#39;t work right from the start.&lt;/p&gt;
&lt;p&gt;Other then some hardcore-users I&#39;m also using my mouse wheel and the arrow keys to navigate inside VIM. I feel a lot
more comfortable doing it this way than I&#39;d feel using only &lt;code&gt;h, j, k, l&lt;/code&gt;. After all I liked to get into VIM and I&#39;ll see
how it can benefit to my workflow or if it&#39;ll stay in my way at the end - like all other editors I&#39;ve tried - and I&#39;ll
return to my beloved Sublime Text 3.&lt;/p&gt;
&lt;p&gt;Keep up with my advimtures (ha punny!) by subscribing to the &lt;a href=&quot;https://kevingimbel.de/atom.xml&quot;&gt;Atom Feed&lt;/a&gt; or by following me on
&lt;a href=&quot;https://twitter.com/kevingimbel&quot;&gt;Twitter&lt;/a&gt;:&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Snippet: SASS Source Maps with Gulp</title>
    <link href="https://kevingimbel.de/blog/2015/01/snippet-sass-source-maps-with-gulp/"/>
    <updated>2015-01-22T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2015/01/snippet-sass-source-maps-with-gulp/</id>
    <content type="html">&lt;p&gt;Yesterday I finally took a few moments to implement Source Maps with Gulp for one of our client projects at work. I
wanted to use the benefits of Source Maps for quite some time but never actually found the time to wrap my head around
it (aka throw in another Gulp plugin). Source Maps are used to connect your pre-compiled files, like Sass, with the
later compiled CSS - so inside the Dev Tools you can see for every line of CSS from which Sass file it comes - this is
super handy once your project get&#39;s bigger! Anyway, here&#39;s how to implement them with &lt;a href=&quot;http://gulpjs.com0/&quot;&gt;Gulp&lt;/a&gt;,
&lt;a href=&quot;https://www.npmjs.com/package/gulp-sass&quot;&gt;Gulp-Sass&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/gulp-autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First of all, you need to install  the different gulp plugins (and gulp, if you haven&#39;t).&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save-dev gulp-sass gulp-sourcemaps gulp-autoprefixer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After everything is installed we&#39;ll create the basic Gulp setup.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; gulp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      sass &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;gulp-sass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      prefix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;gulp-autoprefixer&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      maps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;gulp-sourcemaps&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        scss&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./skin/frontend/my-theme/default/scss/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        css&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./skin/frontend/my-theme/default/css/&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next the tasks will be created, I split them into 2, one for Sass and Source Maps and one for
Autoprefixer. It&#39;s important to create the Source Maps &lt;em&gt;before&lt;/em&gt; using Autoprefixer, otherwise the line numbers won&#39;t be
right. This happen because Autoprefixer adds more properties to your compiled CSS!&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scss &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;styles.scss&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; outputStyle&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;compressed&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;css &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;autoprefix&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;css &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;last 5 versions&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&gt; 1%&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ie8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;css &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First of all source maps need to be initalized, next a compressed css file from the SCSS files is created, the source
maps are written and we&#39;re all good! In a second task Autoprefixer takes the compiled, mapped CSS file and prefixes it
with whatever needs to be prefixed. The output looks like below (look at the right top of each rule set). Click on each
image to view it in full-size.&lt;/p&gt;
&lt;div class=&quot;gw&quot;&gt;
&lt;div class=&quot;g one-half small-one-whole&quot;&gt;
&lt;a href=&quot;https://i.kevingimbel.me/blog/sourcemaps/source_maps_chrome_dev_tools.png&quot; &quot;Source=&quot;&quot; Maps=&quot;&quot; inside=&quot;&quot; the=&quot;&quot; Chrome=&quot;&quot; Developer=&quot;&quot; Tools&quot;=&quot;&quot;&gt;
  &lt;img &quot;https:=&quot;&quot; i.kevingimbel.me=&quot;&quot; blog=&quot;&quot; sourcemaps=&quot;&quot; source_maps_chrome_dev_tools.png&quot;=&quot;&quot; alt=&quot;Source Maps in Chrome&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;g one-half  small-one-whole&quot;&gt;
 &lt;a href=&quot;https://i.kevingimbel.me/blog/sourcemaps/source_maps_firefox_dev_tools.png&quot; &quot;Source=&quot;&quot; Maps=&quot;&quot; inside=&quot;&quot; the=&quot;&quot; Chrome=&quot;&quot; Developer=&quot;&quot; Tools&quot;=&quot;&quot;&gt;
  &lt;img &quot;https:=&quot;&quot; i.kevingimbel.me=&quot;&quot; blog=&quot;&quot; sourcemaps=&quot;&quot; source_maps_firefox_dev_tools.png&quot;=&quot;&quot; alt=&quot;Source Maps in Chrome&quot; /&gt;
 &lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In case you don&#39;t want your source maps in production you could split everything into 3 taks and run them in the order
&lt;code&gt;[&amp;quot;sass&amp;quot;, &amp;quot;sourcemaps&amp;quot;, &amp;quot;autoprefix&amp;quot;]&lt;/code&gt; using &lt;code&gt;gulp.task()&lt;/code&gt; and then later have the following production task.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;production&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;autoprefix&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Use the following command to keep out Source Maps.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// $ gulp production&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Getting into Performance Measurement</title>
    <link href="https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/"/>
    <updated>2015-03-10T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2015/03/getting-into-performance-measurement/</id>
    <content type="html">&lt;p&gt;I&#39;ve spent the past week developing some features for our own website at work.
We&#39;re using WordPress and I almost always enjoy working with WordPress beside
Magento projects, it&#39;s way easier to keep an overview and with a good overview
of data flow and available data it&#39;s easier to measure and find performance
bottleneck. In the following post I want to examine my workflow and the way I
refactored our code base to increase the speed and overall performance of our
site.&lt;/p&gt;
&lt;h3&gt;Mesuring load times&lt;/h3&gt;
&lt;h4&gt;WebPageTest.org&lt;/h4&gt;
&lt;p&gt;With &lt;a href=&quot;http://webpagetest.org/&quot;&gt;WebPageTest.org&lt;/a&gt; it is quite easy to measure load
times, render times, asset loading times and non cached assets. WPT even shows
which assets should be cached or served via a CDN. Initially it checks for First
View  and Repeat View and outputs a table of numbers and fancy graphics. The
thing I&#39;ve been most interested in were First View and Content Breakdown. The
Content Breakdown showed that ~66% of our landing page consist of images so
optimizing these images (see below) was a natural approach to boost performance.
When testing with WebPageTest I like to select the second fastest Internet
connection and a location somewhere relevant (for this site America, for our own
somewhere in Germany).&lt;/p&gt;
&lt;p&gt;Then I watch the videos and see how the loading wents on. At first it was a
blank page and after 2.5s the page &amp;quot;suddenly&amp;quot; rendered all content at once. This
was not the desired behavior and so I started testing more.&lt;/p&gt;
&lt;h4&gt;(Chrome) Developer Tools&lt;/h4&gt;
&lt;p&gt;Using the Developer Tools I cleared the cache and measured a &amp;quot;fresh&amp;quot; load of our
site to see how content is loaded and where rendering starts. It turned out that
rendering was blocked by several JavaScript files (third party) and Google
Fonts, which where loaded from within our CSS files as well as the high amount
of non-optimized images. All these things can be seen in the Network Tab.&lt;/p&gt;
&lt;p&gt;In Chrome there are 2 vertical lines - blue and red. The blue line marks the
time at which the &lt;code&gt;DOMContentLoaded&lt;/code&gt; event is fired, that is when the DOM is
ready to be manipulated by JavaScript. The red line marks the moment where the
&lt;code&gt;load&lt;/code&gt; event fires. This event indicates that all content (CSS, JavaScript,
Images, etc.) has been loaded.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Measuring performance and finding obvious bottlenecks has become fairly easy
nowadays. With Tools like &lt;a href=&quot;http://webpagetest.org/&quot;&gt;WebPageTest.org&lt;/a&gt;, Developer
Tools or automated testing suits there are a ton of ways to analyze a
the loading behavior of a website.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With these two tools I started tracking down the various performance issues.
First of all the blocking JavaScript and a bit of unused code.&lt;/p&gt;
&lt;h3&gt;Unused Code&lt;/h3&gt;
&lt;p&gt;While checking the Network Tab in Chrome Dev Tools I&#39;ve seen that out of 16 Requests
one JavaScript Analytics Library was blocking the
rendering by almost 600-800ms. Because it was barely used I removed this one so
there was already a big improvement by removing unused or barely used code - one
should always check for unused plugins, libs and CSS - this is the most basic
&amp;quot;improvement&amp;quot; and optimization.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Regularly refactor your code base to see where unused code exists or
code can be optimized. By ueing a Pre-Processor it&#39;s easy to remove the code
from production but keep it for later by using an &lt;a href=&quot;http://sass-guidelin.es/#main-file&quot;&gt;import system&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Minify&lt;/h3&gt;
&lt;p&gt;Minifying files is always a good thing. No doubt. Use
&lt;a href=&quot;https://github.com/mishoo/UglifyJS&quot;&gt;Uglify&lt;/a&gt; for JavaScript
and your favorite pre-proccessor&#39;s compress function.&lt;/p&gt;
&lt;h3&gt;Images&lt;/h3&gt;
&lt;p&gt;Next I found that our landing page is pretty image heavy, especially with a big
banner image. To reduce the size I searched for plugins to automate the process
but couldn&#39;t find a good one so I tried out &lt;a href=&quot;http://pngquant.org/&quot;&gt;PNGQuant&lt;/a&gt; a
Command Line tool for PNG optimization. With this tool I could reduce the size
of almost any image by 50-70% which again reduced the load time by 100-200ms.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Always optimize images, either with a tool before uploading them or with a
Plugin. Not optimizing images is a waste of time (literally) and bad for users.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Fonts&lt;/h3&gt;
&lt;p&gt;As I mentioned earlier, rendering was also blocked by Google Fonts being
directly included into our Stylesheets. Out of curiosity I checked if loading it
asynchronously via the provided snippet from Google Fonts would help and indeed
it did! We saved almost 100ms simply by loading the Font files asynchronously.&lt;/p&gt;
&lt;p&gt;On the very First View this can make the content &#39;jump&#39; a bit because the
initial view loads with a fallback font (sans-serif, for example) and then once
the Font is loaded from Google&#39;s CDN it replaces the old font with the new font
on-the-fly. This may looks ugly and if you absolutely can not live with it you
must take the 100ms-slower Pill and include the fonts in your CSS where they&#39;ll
be loaded before the CSS is rendered - therefore no delay.&lt;/p&gt;
&lt;p&gt;Below is the function that&#39;ll load the fonts via a script tag that as the
&lt;code&gt;async&lt;/code&gt; attribute set.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;WebFontConfig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  google&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; families&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Open+Sans:400,300,600:latin&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; wf &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;script&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; wf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https:&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;protocol &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https&#39;&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;http&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token string&quot;&gt;&#39;://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; wf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;text/javascript&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; wf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;async &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;true&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br /&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;script&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parentNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Font rendering from within CSS can block the overall load time of the CSS
file. Splitting out the fonts from the CSS and loading them via JavaScript (if
possible) may increase the initial load time of the website.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Server-side optimizations&lt;/h3&gt;
&lt;p&gt;There&#39;s quite a lot to do when optimizing from the server side. From things like
optimizing Queries, Caching Queries to using the variety of Apache or Nginx
Modules and settings to optimize the servers workflow. While we have our site at
a specific WordPress Hoster our access to server features is mainly limited to
their admin interface and using the &lt;code&gt;.htaccess&lt;/code&gt; - which is what I did.&lt;/p&gt;
&lt;h4&gt;Expire Dates&lt;/h4&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;# caching for 1 month&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IfModule&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;mod_expires.c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; ExpiresActive On&lt;br /&gt; ExpiresByType text/css &quot;access plus 1 month&quot;&lt;br /&gt; ExpiresByType text/javascript &quot;access plus 1 month&quot;&lt;br /&gt; ExpiresByType text/html &quot;access plus 1 month&quot;&lt;br /&gt; ExpiresByType application/javascript &quot;access plus 1 month&quot;&lt;br /&gt; ExpiresByType image/gif &quot;access plus 1 month&quot;&lt;br /&gt; ExpiresByType image/jpeg &quot;access plus 1 month&quot;&lt;br /&gt; ExpiresByType image/png &quot;access plus 1 month&quot;&lt;br /&gt; ExpiresByType image/x-icon &quot;access plus 1 month&quot;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;FilesMatch&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&quot;\.(gif|jpe?g|png|ico|css|js)$&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    Header set Cache-Control &quot;public&quot;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;FilesMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;IfModule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Compression with mod_deflate&lt;/h4&gt;
&lt;p&gt;With this snippet above we tell the server to cache certain file types by 1
month (if they don&#39;t change of course). This way the server can sent back the
files from its cache instead of re-generating the files all the time. Next I
used &lt;code&gt;mod_deflate&lt;/code&gt; to compress the files before they are sent to the client.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;# Deflate Compression by FileType&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IfModule&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;mod_deflate.c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; AddOutputFilterByType DEFLATE text/plain&lt;br /&gt; AddOutputFilterByType DEFLATE text/html&lt;br /&gt; AddOutputFilterByType DEFLATE text/xml&lt;br /&gt; AddOutputFilterByType DEFLATE text/css&lt;br /&gt; AddOutputFilterByType DEFLATE text/javascript&lt;br /&gt; AddOutputFilterByType DEFLATE application/xml&lt;br /&gt; AddOutputFilterByType DEFLATE application/xhtml+xml&lt;br /&gt; AddOutputFilterByType DEFLATE application/rss+xml&lt;br /&gt; AddOutputFilterByType DEFLATE application/atom_xml&lt;br /&gt; AddOutputFilterByType DEFLATE application/javascript&lt;br /&gt; AddOutputFilterByType DEFLATE application/x-javascript&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;IfModule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all our files are cached and gzip (compressed). Additionally our Hoster has
its own cache (Varnish) which should benefit to our sites overall performance, too.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use your servers configuration to serve compressed and/or cached files instead
of re-generating the files on every request. Make sure to cache static content
like images, javascript or css.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Lazy-load JavaScript&lt;/h3&gt;
&lt;p&gt;We&#39;ve been using our own delayed load for JavaScript assets ever since I started
working at &lt;a href=&quot;http://synoa.de/&quot;&gt;Synoa&lt;/a&gt;. We use the following function to include
our minified JavaScript after the DOM is loaded, if possible.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;loadAfterDom&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; script &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;script&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  script&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;text/javascript&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  script&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;path/to/main.min.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;script&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// load the script when the DOM is constructed&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;addEventListener&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;DOMContentLoaded&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; loadAfterDom&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;attachEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;load&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; loadAfterDom&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onload &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; loadAfterDom&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This little script loads the &lt;code&gt;main.min.js&lt;/code&gt; file after the DOM is constructed so
it doesn&#39;t block the rendering of the page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lazy loading JavaScript only works when JavaScript is not needed for the
initial view (which it shouldn&#39;t). When you need JavaScript on render time to
hide elements, for example, it may be better to hide them initially and show them after the
page is loaded!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;What could be done next?&lt;/h3&gt;
&lt;p&gt;Next we could think about inlining our Critical Path CSS using a Grunt or Gulp
task, as Google PageSpeed suggests all the time. I&#39;ve yet never done this before
and need to try it before I can say if it&#39;s worth or not.&lt;/p&gt;
&lt;p&gt;In another round we could review the entire code base and replace the legacy
Compass compiler with modern, &lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;node-sass&lt;/a&gt; and
&lt;a href=&quot;https://github.com/sass/libsass&quot;&gt;Libsass&lt;/a&gt;, a C++ implementation of Sass that is
a lot faster than Ruby, to increase compile performance. Most of the vendor
prefixing is done using own mixins or compass functions (which are legacy), so
handing the prefixing job to &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt;
is another desirable improvement.&lt;/p&gt;
&lt;h3&gt;Result&lt;/h3&gt;
&lt;p&gt;At this point, our website performs at 900ms-1.2s in load time for the front page
and 700-800ms for most sub pages. Yet there is still optimization that need to
be done, especially the question on how to integrate the optimization into
everyone&#39;s workflow. While developers could use a grunt/gulp/cli task the people
who actually write content need an easy way to handle the optimization of
uploaded files. The last resort of more optimization is the server respond time
on which we don&#39;t have any influence.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>ReactJS - Hello World!</title>
    <link href="https://kevingimbel.de/blog/2015/05/react-js-hello-world/"/>
    <updated>2015-05-07T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2015/05/react-js-hello-world/</id>
    <content type="html">&lt;p&gt;This article is the first in a series about &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;ReactJS&lt;/a&gt;, a JavaScript library for building user interfaces. It is actively developed at Facebook and Instagram, while Instagram uses React to build their web app. At Facebook, however, React plays a role in the &amp;quot;background&amp;quot;, featuring administrative screens such as the Ads Managment.&lt;/p&gt;
&lt;p&gt;React itself says one very important and true thing about itself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lots of people use React as the V in MVC. Since React makes no assumptions about the rest of your technology stack, it&#39;s easy to try it out on a small feature in an existing project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Instead of frameworks such as &lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular&lt;/a&gt; or &lt;a href=&quot;http://emberjs.com/&quot;&gt;Ember&lt;/a&gt;, React only covers the visual part and state of an UI. It won&#39;t help you structure your applicationit will not do anything other than render DOM parts and control their state. At this, however, React is amazingly good!&lt;/p&gt;
&lt;h3&gt;JSX-like syntax&lt;/h3&gt;
&lt;p&gt;React uses a XML like syntax called JSX. JSX seems horrible at first, at least to me, but becomes really powerful once you&#39;re used to it. Here is an example of two &lt;code&gt;div&lt;/code&gt;s, one written in React JSX syntax and one in pure JavaScript. We assume the variable &lt;code&gt;dynamicContent&lt;/code&gt; will hold some content that is generated before.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;// React JSX DIV&lt;br /&gt;var myJSXDiv = &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lorem&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{dynamicContent}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;;&lt;br /&gt;// pure JS DIV&lt;br /&gt;var myJSDiv = &#39;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lorem&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&#39;+ dynamicContent +&#39;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Weird isn&#39;t it? Writing junks of HTML without quotes in a JavaScript file looks totally wrong at first, however React is being compiled to pure JavaScript before it will hit your servers. Therefore, it really only is a way of easy writing - when you create a few DOM Elements in React you&#39;ll soon start to love the JSX-like syntax.&lt;/p&gt;
&lt;h3&gt;Hello World!&lt;/h3&gt;
&lt;p&gt;As in every framework and language, let&#39;s start by outputting a &lt;code&gt;Hello World!&lt;/code&gt; string. To archive this we will do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new React Class or Component&lt;/li&gt;
&lt;li&gt;Invoke a &lt;code&gt;render()&lt;/code&gt; function within that Component&lt;/li&gt;
&lt;li&gt;Render the Component to the DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;React.createClass({})&lt;/h4&gt;
&lt;p&gt;Every Class is created with the &lt;code&gt;React.createClass&lt;/code&gt; function that is passed an Object and at least a &lt;code&gt;render&lt;/code&gt; function (A Class is basically a UI Component, therefor I&#39;ll call it Component from now on). The &lt;code&gt;render&lt;/code&gt; function is used to return HTML that will be rendered to the DOM later. Every render function needs a &lt;code&gt;return&lt;/code&gt; with some HTML. Below is the React Script to return a &lt;code&gt;h1&lt;/code&gt; holding the String &amp;quot;Hello World!&amp;quot;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; HelloWorld &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello World&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can invoke out new React Component by calling the &lt;code&gt;React.render()&lt;/code&gt; function. This function takes two parameters: first the Component to render and then the DOM Node where it should be rendered. The Component name in this case is the variable &lt;code&gt;HelloWorld&lt;/code&gt; that&#39;ll be passed just like a HTML element: &lt;code&gt;&amp;lt;HelloWorld /&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Renders the HelloWorld Component into the Body.&lt;/span&gt;&lt;br /&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;HelloWorld &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&#39;s a working &lt;a href=&quot;http://codepen.io/&quot;&gt;Pen&lt;/a&gt; with additional comments.&lt;/p&gt;
&lt;p data-height=&quot;268&quot; data-theme-id=&quot;647&quot; data-slug-hash=&quot;0383697b947716cd4e759e53710df10b&quot; data-default-tab=&quot;result&quot; data-user=&quot;kevingimbel&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/kevingimbel/pen/0383697b947716cd4e759e53710df10b/&quot;&gt;ReactJS Tutorial: Hello World!&lt;/a&gt; by Kevin Gimbel (&lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;@kevingimbel&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So far, we wrote our first ever React Component and rendered it into the DOM. Anyway, rendering static data is not so cool is it? Using a Framework to render junks of DOM Elements and static Markup isn&#39;t fun either. So next, we&#39;ll see how we can re-use a Component, pass data to it and embed one Component into another Component so it is repeated based on passed data - fun!&lt;/p&gt;
&lt;h3&gt;Hello {friend}!&lt;/h3&gt;
&lt;p&gt;React has its own template-engine-thingy. Instead of typing static strings you can pass data and use it in the return of the Render Function (or in any other function inside the component for that matter). All passed data is accessible via &lt;code&gt;this.props&lt;/code&gt; and passed like &lt;code&gt;&amp;lt;HelloWorld name=&amp;quot;Kevin&amp;quot; /&amp;gt;&lt;/code&gt;, which would than be accessed like &lt;code&gt;this.props.name&lt;/code&gt;. Here&#39;s an example of this in action.&lt;/p&gt;
&lt;p data-height=&quot;268&quot; data-theme-id=&quot;647&quot; data-slug-hash=&quot;e73aba2c9d044c3e94e3bf70195a57e2&quot; data-default-tab=&quot;result&quot; data-user=&quot;kevingimbel&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/kevingimbel/pen/e73aba2c9d044c3e94e3bf70195a57e2/&quot;&gt;ReactJS Tutorial: Hello World - Enhanced!&lt;/a&gt; by Kevin Gimbel (&lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;@kevingimbel&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, to re-use the &lt;code&gt;HelloWorld&lt;/code&gt; component we need to create another Component and use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot;&gt;&lt;code&gt;Array.map&lt;/code&gt;&lt;/a&gt; function to go over an Array of names.&lt;/p&gt;
&lt;p&gt;So what we do now is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We extend the &lt;code&gt;&amp;lt;HelloWorld /&amp;gt;&lt;/code&gt; component to accept a property&lt;/li&gt;
&lt;li&gt;We create a new Component that renders multiple instances of &lt;code&gt;&amp;lt;HelloWorld /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We render the new Component into the document&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This sounds complex but it is quite doable so let&#39;s start right away by extending the &lt;code&gt;HelloWorld&lt;/code&gt; component and re-naming it to &lt;code&gt;Hello&lt;/code&gt; since it will greet all kinds of people now.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// The new Hello Component&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; Hello &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this simple change we can invoke the Component like &lt;code&gt;&amp;lt;Hello name=&amp;quot;Kevin&amp;quot; /&amp;gt;&lt;/code&gt; and it will return &lt;code&gt;&amp;lt;h1&amp;gt;Hello Kevin!&amp;lt;/h1&amp;gt;&lt;/code&gt;. However, to create a List of our friends we need a new Component. This Component will be called &lt;code&gt;FriendList&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; FriendList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; allGreetings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;folks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Hello name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;allGreetings&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quite a lot going on here. Let&#39;s break it down. First, we need to get all the greetings together. This is done by assigning them to a new variable called &lt;code&gt;allGreetings&lt;/code&gt;. With Array.map() we go through the Array that&#39;ll be passed to the &lt;code&gt;FriendList&lt;/code&gt; component when it is rendered, we call this property &lt;code&gt;folks&lt;/code&gt;, so it is passed like &lt;code&gt;&amp;lt;FriendList folks={friendArray} /&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// this.props.folks.map() goes over every entry in the array&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and returns a new Hello Component.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; allGreetings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;folks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Hello name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens here is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we go through all the names in &lt;code&gt;this.props.folks&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For each name, we return a new &lt;code&gt;&amp;lt;Hello /&amp;gt;&lt;/code&gt; Component passing in the name of the person&lt;/li&gt;
&lt;li&gt;All the HTML from all the Components now is assigned to the &lt;code&gt;allGreetings&lt;/code&gt; variable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we have our HTML but we need to return it, right? Right! So the next line returns the generated HTML from the &lt;code&gt;FriendList&lt;/code&gt; Component.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// the two parentese are optional but I like them for&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// &quot;grouping&quot; the return. The div however is required.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Every return must be wrapped in an DOM Element.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;allGreetings&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So here we return a &lt;code&gt;div&lt;/code&gt; holding our generated HTML. The &lt;code&gt;div&lt;/code&gt; is required because every React Component must return a HTML Container - and the &lt;code&gt;allGreetings&lt;/code&gt; variable holds multiple containers so we need a new one. The parentese are optional but I prefer them for grouping the output. Next, we need to invoke our new Component.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Here we create an Array of all the people we want to greet. In this&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// case it&#39;s members from Team bullgit! http://bullg.it&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; allThePeople &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Luky&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Jess&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Felix&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Max&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Nika&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Gregor&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Tim&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Jan&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and then we pass it to the FriendList Component.&lt;/span&gt;&lt;br /&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;FriendList folks&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;allThePeople&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We create a normal JavaScript Array with our Friends&#39; names as strings, then pass it to the React component as the attribute &lt;code&gt;folks&lt;/code&gt;. This array will then be accessible as &lt;code&gt;this.props.folks&lt;/code&gt; from within the Component. And, as before, here is a Pen showing the output as well as some more comments on the code.&lt;/p&gt;
&lt;p data-height=&quot;268&quot; data-theme-id=&quot;647&quot; data-slug-hash=&quot;b605df3b5434999891335c5fda49d992&quot; data-default-tab=&quot;result&quot; data-user=&quot;kevingimbel&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/kevingimbel/pen/b605df3b5434999891335c5fda49d992/&quot;&gt;ReactJS Tutorial: Hello - Enhanced &amp; Repeated!&lt;/a&gt; by Kevin Gimbel (&lt;a href=&quot;http://codepen.io/kevingimbel&quot;&gt;@kevingimbel&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That&#39;s it for creating a Component and re-using it inside another Component. For the next tutorial we&#39;ll see how we can use a state to give our Components some interaction. If you&#39;ve got any questions or have found an issue, hit me up at &lt;a href=&quot;https://twitter.com/kevingimbel&quot;&gt;@kevingimbel&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; &quot;=&quot;&quot; assets.codepen.io=&quot;&quot; assets=&quot;&quot; embed=&quot;&quot; ei.js&quot;=&quot;&quot;&gt;&lt;/script&gt;
</content>
  </entry>
  
  <entry>
    <title>A Beginners Guide to Drum and Bass</title>
    <link href="https://kevingimbel.de/blog/2015/08/a-beginners-guide-to-drum-and-bass/"/>
    <updated>2015-08-13T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2015/08/a-beginners-guide-to-drum-and-bass/</id>
    <content type="html">&lt;p&gt;It&#39;s been &lt;a href=&quot;http://kevingimbel.com/mixtape-february-2014/&quot;&gt;quite a while&lt;/a&gt; since I last posted a Mixtape but luckily I just happened to create one the other day for a friend, hoping to get her into Drum and Bass. So here it is, &amp;quot;A Beginners Guide to Drum and Bass&amp;quot; with a selection of tracks from liquid to harder Drum and Bass. Enjoy!&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; ,=&quot;&quot; &quot;https:=&quot;&quot; w.soundcloud.com=&quot;&quot; player=&quot;&quot; ?url=&quot;https%3A//api.soundcloud.com/playlists/133607642&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&amp;quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;http://kevingimbel.com/tags/#mixtape&quot;&gt;See all Mixtapes&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Speed up your Jekyll workflow</title>
    <link href="https://kevingimbel.de/blog/2015/12/speed-up-your-jekyll-workflow/"/>
    <updated>2015-12-16T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2015/12/speed-up-your-jekyll-workflow/</id>
    <content type="html">&lt;p&gt;Lately I had a hard time working with my own website. Whenever I wanted to make some updates, write a post or fix a little buggy thing it only took a few minutes of &amp;quot;work&amp;quot; to get me really frustrated. Jekyll, despite my love for it, has become horribly slow. My site, which I consider rather &amp;quot;simple&amp;quot;, took 17-20 seconds to build on every change! Changing the CSS? Rebuild entire site. Changed one character in a JavaScript file? Rebuild entire site. Update one article? Rebuild entire site - this is frustrating and unnecessary! Luckily, I just found a perfect solution.&lt;/p&gt;
&lt;p&gt;I was researching how to speed up a Jekyll site and if there was any news or whatsoever from the Community when I found &lt;a href=&quot;https://github.com/jekyll/jekyll/issues/706&quot;&gt;an old issue&lt;/a&gt; on GitHub with a &lt;a href=&quot;https://github.com/jekyll/jekyll/issues/706#issuecomment-25411224&quot;&gt;comment by Parkr&lt;/a&gt; that pointed me in the right direction: The &lt;code&gt;guard-jekyll-plus&lt;/code&gt; Gem. As a person who has no idea of Ruby other that it has a rather beautiful looking syntax and &lt;code&gt;Gems&lt;/code&gt; are somewhat related to it, I went on and set up the &amp;quot;environment&amp;quot; and programs needed. These were, basically, &lt;code&gt;bundle&lt;/code&gt;, a &lt;code&gt;Gemfile&lt;/code&gt; and a &lt;code&gt;Guardfile&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# on Ubuntu
$ (sudo) apt-get install bundler
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# The Gemfile&lt;/span&gt;&lt;br /&gt;source &lt;span class=&quot;token string&quot;&gt;&#39;https://rubygems.org&#39;&lt;/span&gt;&lt;br /&gt;gem &lt;span class=&quot;token string&quot;&gt;&#39;guard-jekyll-plus&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# The Guardfile&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# Taken directly from https://github.com/imathis/guard-jekyll-plus&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;ignore &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;_site&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# NOTE: this can interfere with Guard::LiveReload&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;guard &lt;span class=&quot;token string&quot;&gt;&quot;jekyll-plus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:serve&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;br /&gt;  watch &lt;span class=&quot;token regex&quot;&gt;/.*/&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Gemfile&lt;/code&gt; - which seems to be a list of dependencies, similar to the &lt;code&gt;dependencies&lt;/code&gt; list in a &lt;code&gt;package.json&lt;/code&gt; file for Node - is probably the most basic representation of such a file. I first put in only the &lt;code&gt;gem &#39;guard-jekyll-plus&#39;&lt;/code&gt; line but then it started to throw errors and said I need to define a source - which I then did. Case closed, moving on.&lt;/p&gt;
&lt;p&gt;The Guardfile is directly taken from &lt;a href=&quot;https://github.com/imathis/guard-jekyll-plus&quot;&gt;The guard-jekyll-plus GitHub repository&lt;/a&gt;. As far as I understand it runs the watching and serving (normaly done by &lt;code&gt;jekyll --watch&lt;/code&gt;) through the &lt;a href=&quot;https://github.com/guard/guard&quot;&gt;&lt;code&gt;Guard&lt;/code&gt;&lt;/a&gt; task runner (&lt;code&gt;task runner&lt;/code&gt; might be super simplified here) - so &lt;code&gt;Guard&lt;/code&gt; and &lt;code&gt;guard-jekyll-plus&lt;/code&gt; now decide when to rebuild things and what needs to be rebuild.&lt;/p&gt;
&lt;p&gt;Once the configuration is set up you can run &lt;code&gt;$ bundle install&lt;/code&gt; to install the dependencies and then &lt;code&gt;$ guard&lt;/code&gt; to start the guard process. Guard will then run, serve up the Jekyll site on &lt;code&gt;localhost:4000&lt;/code&gt; (or whatever is specified in jekyll &lt;code&gt;_config.yml&lt;/code&gt;) and watch the files. From my previous 17-20 seconds of build time I am now &lt;strong&gt;down to 1.2 seconds&lt;/strong&gt;. ONE POINT TWO SECONDS - this is amazing! Roughly 15x faster than just with Jekyll alone.&lt;/p&gt;
&lt;p&gt;I have no idea why there is no mention of this method on the official Jekyll Website. Everyone who uses Jekyll and is frustrated with slow build times should consider looking at &lt;code&gt;Guard&lt;/code&gt; and &lt;code&gt;jekyll-guard-plus&lt;/code&gt;. I can highly recommend it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Farewell Jekyll, Hello Hugo</title>
    <link href="https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/"/>
    <updated>2016-11-16T18:04:42Z</updated>
    <id>https://kevingimbel.de/blog/2016/11/farewell-jekyll-hello-hugo/</id>
    <content type="html">&lt;p&gt;If you have visited my website in the past few weeks you might have notices a few things. First of all it looks different. Second, it is now served over HTTPS which is possible because I moved away from GitHub Pages and back to self-hosting my website. Third, and possible most important, I also moved away from Jekyll after using it for three years.&lt;/p&gt;
&lt;p&gt;This very site you read right now is build with &lt;a href=&quot;http://gohugo.io/&quot;&gt;Hugo&lt;/a&gt;, a static site generator build by &lt;a href=&quot;http://spf13.com/&quot;&gt;Steve Francia&lt;/a&gt;, &lt;a href=&quot;https://github.com/bep&quot;&gt;Bjørn Erik Pedersen&lt;/a&gt; and a lot of &lt;a href=&quot;https://github.com/spf13/hugo/graphs/contributors&quot;&gt;contributors&lt;/a&gt;. Hugo is written in &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt; a programming language created at Google I have &lt;a href=&quot;https://github.com/kevingimbel?language=go&amp;amp;tab=repositories&quot;&gt;been interested in lately&lt;/a&gt;.
For me personally Go provides a lot of new challenges and things to learn. I worked with Front-End technologies like HTML and CSS as well as scripting languages like PHP and JavaScript for the better part of the past 6-7 years; &amp;quot;professionally&amp;quot; and officially since 2014. Go is entirely different to what I am used to and I like it. I enjoy playing around with it where in the past year or so I lost a big part of my passion for programming in the languages I already know. But why move away from Jekyll? And why choose Go?&lt;/p&gt;
&lt;h3&gt;Ruby&lt;/h3&gt;
&lt;p&gt;Jekyll is written in Ruby. I have no intention of learning anything related to Ruby. It is not lazyness or fear of a challenge but instead the simple truth that Ruby does not provide me with any benefits at the moment or in my foreseeable future. I am sure it has its place - like any language has - but I don&#39;t have the time nor the interest to dive into Ruby. I tried to host Jekyll on my own and it was always a hassle to set up the environment.&lt;/p&gt;
&lt;h3&gt;Go&lt;/h3&gt;
&lt;p&gt;Hugo on the other hand &amp;quot;just works&amp;quot;. Hugo is one binary file with zero dependencies after building and can just be executed. On a server with Go installed it&#39;s as easy as running &lt;code&gt;go get -v github.com/spf13/hugo&lt;/code&gt; or if Go is not available there are pre-built binaries.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; https://github.com/spf13/hugo/releases/download/v0.17/hugo_0.17_Linux-64bit.tar.gz&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; -xzvf hugo_0.17_Linux-64bit.tar.gz&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;ln&lt;/span&gt; -s hugo_0.17_linux_amd64 hugo&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; +x hugo&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;ln&lt;/span&gt; -s &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;/hugo ~/bin&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another reason why I chose Hugo over &lt;a href=&quot;https://www.staticgen.com/&quot;&gt;any other static site generators&lt;/a&gt; is because it is under active development thanks to &lt;a href=&quot;https://github.com/bep&quot;&gt;Bjørn Erik Pedersen&lt;/a&gt;, has &lt;a href=&quot;https://gohugo.io/overview/introduction/&quot;&gt;excellent docs&lt;/a&gt; and an active community.&lt;/p&gt;
&lt;p&gt;The final reason why I decided to not just move away from GitHub Pages for my own SSL certificate but also away from Jekyll is: I want to learn Go. I can contribute to Hugo and poke around the source code if I need or want to, a thing I could not do with Ruby and Jekyll simply because I lack the skill. I&#39;m not yet any good at Go but having the interest and base to hack away in your static site generator is a big benefit after all.&lt;/p&gt;
&lt;p&gt;As of today it&#39;s not all good yet. The new design is as always a work in progress and more of an experiment. The content of my site has changed drastically because I decided to not move all pages or all content but instead only move my articles. The &lt;a href=&quot;https://kevingimbel.de/projects/&quot;&gt;Projects&lt;/a&gt; section is completley new and lists a selection of Projects I decided to showcase. As before, all source code of my website is &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.com&quot;&gt;available on GitHub.com&lt;/a&gt; so feel free to look around.&lt;/p&gt;
&lt;p&gt;Some things are still not working as I would like but I&#39;ll eventually get to them. After all, a personal website is always a work in progress.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Farewell Jekyll, it&#39;s been a pleasure for the past three years.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Gotcha: dockerignore</title>
    <link href="https://kevingimbel.de/blog/2016/12/gotcha-dockerignore/"/>
    <updated>2016-12-21T17:02:42Z</updated>
    <id>https://kevingimbel.de/blog/2016/12/gotcha-dockerignore/</id>
    <content type="html">&lt;p&gt;Today I was caught off-guard by a docker &amp;quot;bug&amp;quot; - or so I thought at first. I tried to boot up a project with &lt;code&gt;docker-compose up&lt;/code&gt; like I do since &lt;a href=&quot;https://kevingimbel.de/goodbye-ubuntu-hello-mac&quot;&gt;switching to a Mac&lt;/a&gt;. Unusual was that &lt;code&gt;docker-compose&lt;/code&gt; stopped at the build step and would not finish the boot. After some confusion and after checking the projects &lt;code&gt;docker-compose.yml&lt;/code&gt; configuration file I went to GitHub to see the newest &lt;a href=&quot;https://github.com/docker/for-mac/issues&quot;&gt;docker for mac issues&lt;/a&gt; because I was using the beta release and thought a recent update might broke a thing or two. Looking at the issues I found a similar &lt;a href=&quot;https://github.com/docker/for-mac/issues/1063&quot;&gt;issue in docker/for-mac&lt;/a&gt; and commented with my setup and output of &lt;code&gt;docker-compose --verbose up&lt;/code&gt; only to realize a good 30 minutes later my setup was the problem all along.&lt;/p&gt;
&lt;p&gt;While the configuration files were all correct, I made a mistake and did not provide a &lt;code&gt;.dockerignore&lt;/code&gt; file. Without the &lt;code&gt;.dockerignore&lt;/code&gt; two 6GB SQL dumps in the same directory which were mounted into the docker container which made the docker daemon crash / hang up. The simple solution was to create the following &lt;code&gt;.dockerignore&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# database directory on the host
.db
# all sql and gz files
*.sql
*.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Afterwards the &lt;code&gt;docker-compose&lt;/code&gt; started without any issues because it now had a build context of around 400MB instead of 13GB.&lt;/p&gt;
&lt;p&gt;Lesson learned: Always make sure your &lt;code&gt;.dockerignore&lt;/code&gt; is setup right and ignores all big files! The full file looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node_modules
.sass-cache
.db
*.sql
*.gz
.git
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Goodbye Ubuntu, Hello Mac</title>
    <link href="https://kevingimbel.de/blog/2016/12/goodbye-ubuntu-hello-mac/"/>
    <updated>2016-12-27T14:05:59Z</updated>
    <id>https://kevingimbel.de/blog/2016/12/goodbye-ubuntu-hello-mac/</id>
    <content type="html">&lt;p&gt;Christmas came earlier this year! Since my co-workers switched to MacBooks over the year I got a MacBook, too. I got my new PC last year so I was not due to a hardware change for at least another year but - to my luck - I also got a new PC so we all have the same hardware. After three years of Ubuntu and Linux/GNU it&#39;s odd to switch to MacOS. While MacOS is closer to Unix-like systems it&#39;s still closed and not as open as Ubuntu or other Linux/GNU distributions. Changing Laptops is hard enough but changing operating systems - and changing to a system one has never worked with is a different thing. For documentation and to help others, I would like to document what I noticed when switching and how I got up and running in a week.&lt;/p&gt;
&lt;h3&gt;~/dotfiles&lt;/h3&gt;
&lt;p&gt;I have a &lt;a href=&quot;https://github.com/kevingimbel/dotfiles&quot;&gt;GitHub repository&lt;/a&gt; with dotfiles. By checking out the repository and linking the files I was able to setup my terminal in a few minutes. The repository is not perfect yet and there are unused files which I should - and will - clean-up. Nevertheless without the configs I would have needed to copy the files or re-configure everything by hand.&lt;/p&gt;
&lt;h3&gt;Docker&lt;/h3&gt;
&lt;p&gt;Currently we at &lt;a href=&quot;https://synoa.de/&quot;&gt;Synoa&lt;/a&gt; move projects to &lt;a href=&quot;https://docker.com/&quot;&gt;Docker&lt;/a&gt; for local development and - in a selected way - for production, too. The basic benefits of Docker for Development show right when creating the first containers - one can replicate the production servers without a lot of hassle: operating systems and software versions can be defined on a per-project basis. One project is build on PHP 5.6, the other on 7.0 - with Docker we don&#39;t need to maintain different PHP versions on computers. It&#39;s just a small benefit but it&#39;s also a &amp;quot;easy&amp;quot; way to share projects. I am still learning Docker and Docker best practice - as I learn more I will cover it in articles.&lt;/p&gt;
&lt;h3&gt;Operating System&lt;/h3&gt;
&lt;p&gt;MacOS is really beautiful. The user interface is a joy to work with and the gestures used to switch between tabs and workspaces is astonishing - it feels productive and it&#39;s fun to use. I really enjoy just working with it simply because of the Design. The Linux base of MacOS is visible when navigation with the Terminal - it does not feel odd and most of the software I used on Ubuntu when interacting with the file system is &amp;quot;the same&amp;quot;. &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;tail&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt; - all these utilities work as expected. The only noticeable difference is &lt;code&gt;sed&lt;/code&gt;. On Ubuntu I used &lt;code&gt;sed&lt;/code&gt; a lot to clean SQL dumps, for example &lt;code&gt;sed -i &#39;s/domain\.tld/domain\.local/g&#39; mydump.sql&lt;/code&gt; - this replaces &lt;code&gt;domain.tld&lt;/code&gt; with &lt;code&gt;domain.local&lt;/code&gt; inside the SQL dump. On MacOS one must add a post-fix for a backup file when using &lt;code&gt;sed&lt;/code&gt;. The sed command becomes &lt;code&gt;sed -i &#39;.bak&#39; &#39;s/domain\.tld/domain\.local/g&#39; mydump.sql&lt;/code&gt; and a backup file &lt;code&gt;mydump.sql.bak&lt;/code&gt; is created. It&#39;s just a small difference but it caught me off-guard when I noticed bash scripts failing.&lt;/p&gt;
&lt;h3&gt;Hardware&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;A-ma-zing&lt;/strong&gt;! I expected a lot from a MacBook and I was blown away. The MacBook Pro feels good to the touch, it&#39;s well made and the Design aspect is visible in the choices of material and colors. While mine is not too high-end it still runs smootly and the battery life is unbelievable. Without a second display connected I get around 7-9 hours of battery life when writing or programming (no IDE used, just &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;) - when I have 30% battery left I can still work without running to plug it in. Even at 5%, when the Mac tells me to plug the cable in, I still have time left and can get the cable.&lt;/p&gt;
&lt;h3&gt;Software&lt;/h3&gt;
&lt;p&gt;I am currently figuring out which software I need and which software I want. I installed &lt;a href=&quot;https://docs.docker.com/engine/installation/mac/&quot;&gt;Docker for Mac&lt;/a&gt;, &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;, &lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;Chrome&lt;/a&gt; and the usual things like Google Drive and &lt;a href=&quot;https://www.keepassx.org/&quot;&gt;KeyPassX&lt;/a&gt;. I switched away from the default Terminal to &lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm 2&lt;/a&gt;, but besides I kept it vanilla and did not install unnecessary software.&lt;/p&gt;
&lt;p&gt;Did I miss a thing? &lt;a href=&quot;https://twitter.com/kevingimbel&quot;&gt;Tweet me @kevingimbel&lt;/a&gt; and tell me what I absolutely need!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2016, a short review</title>
    <link href="https://kevingimbel.de/blog/2017/01/2016-a-short-review/"/>
    <updated>2017-01-01T13:37:28Z</updated>
    <id>https://kevingimbel.de/blog/2017/01/2016-a-short-review/</id>
    <content type="html">&lt;p&gt;2016 has been an odd year in regards to world events and deaths - quite depressing actually. For me personal it has been the exact opposite. Overall, for me 2016 has been an excellent year.&lt;/p&gt;
&lt;h3&gt;January&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2016-review/january-fuerteventura.jpg&quot; alt=&quot;View from the hotel in Fuerteventura.&quot; /&gt;&lt;figcaption&gt;View from the hotel in Fuerteventura.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;January started with what we call a &amp;quot;Braincamp&amp;quot;. A Braincamp is a company trip to a remote location where we at Synoa GmbH take time outside the office and come up with ideas and projects to do for the year. For 2016 we traveled to &lt;a href=&quot;https://en.wikipedia.org/wiki/Fuerteventura&quot;&gt;Fuerteventura&lt;/a&gt; which had a wonderful warm climate compared to the cold German January. We spent a week tinkering and researching different ideas and in the end an idea stuck out: &lt;a href=&quot;https://bug.industries/&quot;&gt;Bug Industries&lt;/a&gt; - a card game for developers which we eventually took to &lt;a href=&quot;https://www.kickstarter.com/projects/timpietrusky/bug-industries-a-card-dice-game-for-us-it-nerds?ref=card&quot;&gt;Kickstarter&lt;/a&gt;. Unfortunately we did not meet our goal and as of now the project is at rest.&lt;/p&gt;
&lt;h3&gt;February and March&lt;/h3&gt;
&lt;p&gt;February and March were both occupied by work for clients and work on Bug Industries as well as dating somebody who became very special to me over the year.&lt;/p&gt;
&lt;p&gt;Researching Kickstarter campaigns, researching social media activities, forming the campaign and general design and illustrations of the game - all these things happened in February and March. Together with &lt;a href=&quot;http://herzblutundbock.de/&quot;&gt;Herzblut &amp;amp; Bock&lt;/a&gt; we brought Bug Industries to live and started the Kickstarter Campaign on March 9th 2016. In the end the project did not cut the goal and we had to cancel it. As mentioned before it&#39;s on hold at the moment.&lt;/p&gt;
&lt;h3&gt;April&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2016-review/april-happy-show.jpg&quot; alt=&quot;Toilet signs at The Happy Show&quot; /&gt;&lt;figcaption&gt;Toilet signs at The Happy Show&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;In April I saw the Rammstein Cover Band &amp;quot;Stammheim&amp;quot; with my best friend. Stammheim did an amazing performance and I&#39;m happy I attended the concert - I&#39;d see them live again by any chance I get.
Also in April I went to see &lt;a href=&quot;http://www.museumangewandtekunst.de/de/museum/ausstellungen/stefan-sagmeister-the-happy-show.html&quot;&gt;&amp;quot;The Happy Show&amp;quot;&lt;/a&gt; by Stefan Sagmeister, a Austrian designer who has inspired me for years. I&#39;m entirely in love with the work he and his team is doing. While I don&#39;t have any talent for producing designs, I do love art and design. I highly recommend seeing &amp;quot;The Happy Show&amp;quot; when you have the chance as well as buying &lt;a href=&quot;http://amzn.to/2hH78TF&quot;&gt;&amp;quot;Made you look&amp;quot;&lt;/a&gt;, a collection of works by Stefan Sagmeister.&lt;/p&gt;
&lt;h3&gt;May&lt;/h3&gt;
&lt;p&gt;Mostly filled with work and &lt;a href=&quot;https://2017.front-trends.com/&quot;&gt;Front-Trends&lt;/a&gt;, an amazing conference in Warsaw and also my first time in Warsaw. I spent my time there with my fellow &lt;a href=&quot;https://github.com/bullgit/wiki/wiki/Gitch&quot;&gt;Gitch&lt;/a&gt; &lt;a href=&quot;https://twitter.com/mkuehnel&quot;&gt;Michael&lt;/a&gt;. We had lots of fun and walked around the city to take some pictures and grab foods. Warsaw was astonishing and I would come back every time again!&lt;/p&gt;
&lt;h3&gt;June and July&lt;/h3&gt;
&lt;p&gt;June and July have been calm, beside the &lt;a href=&quot;http://www.southside.de/&quot;&gt;Southside&lt;/a&gt; festival which was canceled due to a storm. Me and the friends I was with spent the night in the car while around us the world was going down - I have never experienced such an intense thunderstorm outside my house.&lt;/p&gt;
&lt;p&gt;My highlight in these months was probably the Wedding Party of &lt;a href=&quot;https://twitter.com/timpietrusky&quot;&gt;Tim&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/FHengesch&quot;&gt;Fabienne&lt;/a&gt;. It was a wonderful evening with lots of good people and even &lt;a href=&quot;https://twitter.com/LukyVj&quot;&gt;Luky&lt;/a&gt; visited from France!&lt;/p&gt;
&lt;p&gt;I also finally got my first tattoo. A cyborg Vault-Boy from Fallout, marking the first tattoo on my left arm which I want to dedicate to video games.&lt;/p&gt;
&lt;h3&gt;August&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2016-review/august-sms.jpg&quot; alt=&quot;Entrance to Sonne Mond Sterne&quot; /&gt;&lt;figcaption&gt;Entrance to Sonne Mond Sterne&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;In August my girlfriend and I traveled to Amsterdam for a few days to have a good time and enjoy some of the art galleries in Amsterdam. We went to a Banksy exhibition and spent some time inside &lt;a href=&quot;https://www.nemosciencemuseum.nl/en/&quot;&gt;Nemo&lt;/a&gt;, a science museum for kids which can be quite funny.&lt;/p&gt;
&lt;p&gt;As every year &lt;a href=&quot;https://twitter.com/timpietrusky&quot;&gt;Tim&lt;/a&gt; and I attended &lt;a href=&quot;http://www.sonnemondsterne.de/&quot;&gt;Sonne Mond Sterne&lt;/a&gt;, an electronic music festival in Germany. To no surprise it was a blast just like the years before and I&#39;m already looking forward to 2017!&lt;/p&gt;
&lt;h3&gt;September&lt;/h3&gt;
&lt;p&gt;In September we had kind of a &lt;a href=&quot;https://twitter.com/bullgit/status/775988689570856960&quot;&gt;Bullgit Meetup&lt;/a&gt; at &lt;a href=&quot;https://viewsourceconf.org/berlin-2016/&quot;&gt;viewSource&lt;/a&gt; in Berlin. It was great seeing so many Gitches at the same time and being in Berlin is always great! I also visited &lt;a href=&quot;https://www.eyeem.com/&quot;&gt;EyeEm&lt;/a&gt;, one of my favorite Berlin start-ups/companies, and had a little chat about how they grew, how they introduced EyeEm Market and how it is to work with different time zones and large communities. When I first met the EyeEm crew in 2012 they were around 10 or 20 people. It&#39;s amazing how they crew both their company and their community over the years. Thanks to EyeEm for having me!&lt;/p&gt;
&lt;h3&gt;October&lt;/h3&gt;
&lt;p&gt;In October I saw &lt;a href=&quot;https://soundcloud.com/godisanastronaut&quot;&gt;God Is An Astronaut&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=c_QS7z_sGWg&amp;amp;app=desktop&quot;&gt;Sounds Like The End Of The World&lt;/a&gt;. Both bands have a lot of powered and their music is somewhat &amp;quot;trippy&amp;quot; - guiding you through extremes and letting you &amp;quot;float&amp;quot; while listening. For me personally it&#39;s already good on tape but astonishing when experienced live. All together it has been 3 or so hours of pure bliss, probably one of the best live concerts I have ever seen.&lt;/p&gt;
&lt;h3&gt;November&lt;/h3&gt;
&lt;p&gt;I got new glasses and also went to see &amp;quot;20 Years of Placebo&amp;quot; with my girlfriend. The concert has been an enjoyment from start to end. They probably played the best songs of the bast 20 years (which makes sense, right?) and also came back on stage 2 or 3 times after the concert ended. It was my first time seeing Placebo live and I would recommend seeing them if they are somewhere near you.&lt;/p&gt;
&lt;h3&gt;December&lt;/h3&gt;
&lt;p&gt;Cold days and lots of cozy evenings. I started re-watching Star Trek: The Original Series and I am again madly in love. Given the times when it originally aired on TV and how futuristic it is I dare to say Star Trek is &lt;em&gt;the most amazing Sci-Fi show ever&lt;/em&gt;. There you have it.&lt;/p&gt;
&lt;p&gt;I also had a great 3 days of Christmas with my girlfriend and the rest of my family. Though I am not religious I like to celebrate Christmas. While I liked it for the presents when I was younger I now like it for the come-together with the family and the foods. It&#39;s simply a nice end-of-the-year thing.&lt;/p&gt;
&lt;h3&gt;All the rest&lt;/h3&gt;
&lt;p&gt;Personal and work-wise 2016 was a success. I had a lot of fun and accomplished some things both private and at work. Sadly, I did not write any blog posts or work on any of my private projects. I had a hard time focusing on development beside work and I felt bad for not doing anything - after some time I ended up in a circle of wanting-to-do-things and feeling depressed for not doing them. For 2017 I want to plan and focus better on private projects, for the most on &lt;a href=&quot;https://github.com/kevingimbel/LinedUp&quot;&gt;LinedUp&lt;/a&gt; which I would like to &amp;quot;finish&amp;quot;.&lt;/p&gt;
&lt;p&gt;What I did in my spare time is Go development. On the search for a new programming language I got a bit into Go and wish to Go Deeper (pun intended!) - I enjoy Go and its strict typed nature is entirely new to me. Let&#39;s see how this goes for 2017!&lt;/p&gt;
&lt;p&gt;If you made it until here, I wish you a happy 2017! 🎆🎉🍾&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2017, week one</title>
    <link href="https://kevingimbel.de/blog/2017/01/2017-week-one/"/>
    <updated>2017-01-08T17:02:48Z</updated>
    <id>https://kevingimbel.de/blog/2017/01/2017-week-one/</id>
    <content type="html">&lt;p&gt;German &lt;a href=&quot;http://uarrr.org/&quot;&gt;blogger&lt;/a&gt;, &lt;a href=&quot;http://marcel.io/&quot;&gt;designer&lt;/a&gt;, and &lt;a href=&quot;https://www.youtube.com/rrradiovisiontv/&quot;&gt;YouTuber&lt;/a&gt; Marcel Wichmann started a &lt;a href=&quot;http://uarrr.org/2017/01/08/rrruckblick-kalenderwoche-152-2017/&quot;&gt;weekly-review blog series&lt;/a&gt; which I find quite interesting! Reviewing in short what happened in each week of the year is a nice and &amp;quot;easy&amp;quot; way to recap everything that happened - and it also helps writing this years big review post at the end of the year. I am not sure if I&#39;ll keep it up for each week but I will try. So, here&#39;s week one.&lt;/p&gt;
&lt;h3&gt;New Year&#39;s resolution&lt;/h3&gt;
&lt;p&gt;I am not sure where this tradition comes from, but in Germany (and most western countries as far as I know), it&#39;s a thing to set goals for the new year. It&#39;s basically like a To-Do List for the coming year with things one wants to change.&lt;/p&gt;
&lt;p&gt;My New Year&#39;s resolution are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read more books - 12 is my minimum&lt;/li&gt;
&lt;li&gt;Loose weight again&lt;/li&gt;
&lt;li&gt;Eat more healthy and cook more healthy&lt;/li&gt;
&lt;li&gt;Write more blog posts&lt;/li&gt;
&lt;li&gt;Program on a regular basis in my free time&lt;/li&gt;
&lt;li&gt;Go out more often&lt;/li&gt;
&lt;li&gt;Stop smoking cigarettes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far I started reading again before going to bed. I&#39;m reading &lt;a href=&quot;http://amzn.to/2i3bi8A&quot;&gt;&amp;quot;The Humans&amp;quot;&lt;/a&gt; by Matt Haig now, which my girlfriend recommended. So far I like it a lot and I&#39;ll write a review once I am finished - which happens to fulfills another point.&lt;/p&gt;
&lt;p&gt;Since I work from home I can cook every day. This week so far I cooked fresh vegetables every day, mostly with rice or noodles. I also cooked vegetable stock from leftovers which I can now use for next weeks cooking. 😊&lt;/p&gt;
&lt;p&gt;To start the year I wrote a review of last year. It&#39;s probably not too interesting for most people but I like to look back at year-in-review posts and I will now write them every year.&lt;/p&gt;
&lt;p&gt;As for smoking - well. I try to switch to electronic cigarettes first and then lower the nicotine. It&#39;s not going too well at the moment but I continue to try it.&lt;/p&gt;
&lt;h3&gt;Geschlechterkampf&lt;/h3&gt;
&lt;p&gt;On saturday I went to the &lt;a href=&quot;http://www.staedelmuseum.de/de/ausstellungen/geschlechterkampf&quot;&gt;Geschlechterkampf&lt;/a&gt; exhibition at the Städel Museum, my favorite museum in Frankfurt by the way. Overall the exhibition was good and I enjoyed the art from various artists. In particular &lt;a href=&quot;https://en.wikipedia.org/wiki/John_Collier_(painter)&quot;&gt;John Collier&lt;/a&gt; impressed me and I greatly enjoyed the works exhibited. His painting &lt;a href=&quot;https://en.wikipedia.org/wiki/File:Clytemnestra_by_John_Collier,_1882.jpg&quot;&gt;Clytemnestra&lt;/a&gt; looks astonishing in full size. Another artists I did not know before is &lt;a href=&quot;https://en.wikipedia.org/wiki/Jeanne_Mammen&quot;&gt;Jeanne Mammen&lt;/a&gt;, an artist from Berlin, Germany. A small room was dedicated to her watercolor paintings.I liked the simplicity in her art; Every image seemed to tell a story.&lt;/p&gt;
&lt;p&gt;If you&#39;re around Frankfurt make sure to see the exhibition. If you&#39;re not, you can see some artworks and read background information in the Städel &lt;a href=&quot;http://geschlechterkampf.staedelmuseum.de/en/&quot;&gt;digital editorial online&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;recore&lt;/h3&gt;
&lt;p&gt;I started playing &lt;a href=&quot;http://amzn.to/2irOziJ&quot;&gt;recore&lt;/a&gt;, an XBox One exclusive game in which you awake on Far Eden, an desert-like planet. Accompanied by your robot companion Mack you start exploring this &amp;quot;dead&amp;quot; planet just to realize there are corrupted robots running around. The story seems to resolve around finding out what happened to the robots who should build the planets surface, facilities, and living spaces for the humans.&lt;/p&gt;
&lt;h3&gt;Star Trek&lt;/h3&gt;
&lt;p&gt;I started re-watching Star Trek beginning with &lt;a href=&quot;https://en.wikipedia.org/wiki/Star_Trek:_The_Original_Series&quot;&gt;The Original Series&lt;/a&gt;. It&#39;s inspiring to see the future these screenwriters have imagined. You might not know but a lot of todays technology such as MP3, Smartphones, and Voice Control were originally inspired by Star Trek. There is a documentary about it, and I think the one I saw some years ago is &lt;a href=&quot;https://www.youtube.com/watch?v=ZjlF_iSo1Og&quot;&gt;this one with William Shatner&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Well that&#39;s it for this week. 👍&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Writing NodeJS cli tools</title>
    <link href="https://kevingimbel.de/blog/2017/01/writing-node-js-cli-tools/"/>
    <updated>2017-01-09T17:02:48Z</updated>
    <id>https://kevingimbel.de/blog/2017/01/writing-node-js-cli-tools/</id>
    <content type="html">&lt;p&gt;Over 2015 and 2016 I got more and more interested in automating my daily workflows with scripts. For this purpose I learned Bash Scripting (or Shell Scripting) and started writing my first scripts to automate repeating tasks, &lt;a href=&quot;https://github.com/kevingimbel/vhost&quot;&gt;creating apache vhosts&lt;/a&gt; files for example. Recently I started exploring how to implement command line tools in NodeJS and this post should give an overview.&lt;/p&gt;
&lt;h3&gt;Shebang&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;If you already know what a Shebang is skip to &lt;a href=&quot;https://kevingimbel.de/writing-nodejs-cli-tools/#writing-a-tiny-node-cli-script&quot;&gt;the next section&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Shell Scripts always start with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix)&quot;&gt;Shebang&lt;/a&gt; on the first line. This line is used to indicate which program is used to execute the following script. For Bash scripts the Shebang is &lt;code&gt;#!/bin/bash&lt;/code&gt;. What the OS or program loader does when executing the script is the following. Consider this sample script named &lt;code&gt;hello.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
echo &amp;quot;Hello World!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When it is executed from the command line (cli) with &lt;code&gt;./hello.sh&lt;/code&gt; the operating system executes the script (&lt;code&gt;echo &amp;quot;Hello World!&amp;quot;&lt;/code&gt;) with &lt;code&gt;/bin/bash&lt;/code&gt;. Equally, you could run &lt;code&gt;/bin/bash ./hello.sh&lt;/code&gt;. When programming a bash script you can also set it to exit on every error, either with &lt;code&gt;set -e&lt;/code&gt; or with a shebang similar to &lt;code&gt;#!/bin/bash -e&lt;/code&gt;. The screenshot below demonstrates the difference when running a invalid shell script &lt;code&gt;bad.sh&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2017/01/writing-node-js-cli-tools/Executing%20a%20invalid%20bash%20script%20without%20shebang%20and%20with%20shebang%20and%20-e%20flag&quot; alt=&quot;/images/posts/2017/node-cli/shell-shebang-example.png&quot; /&gt;&lt;figcaption&gt;/images/posts/2017/node-cli/shell-shebang-example.png&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;As you can see without the &lt;code&gt;#!/bin/bash -e&lt;/code&gt; shebang the script will execute even after an error occurred - this might not be intended behavior. Anyway, the topic of this post is node and the Shebang in node is essential. NodeJS Scripts are JavaScript and cannot be run - like shell scripts - without an Shebang to tell the system to invoke them with node. The NodeJS Shebang looks a bit different and specifies the &amp;quot;environment&amp;quot; or &lt;code&gt;env&lt;/code&gt; with &lt;code&gt;/usr/bin/env&lt;/code&gt;. The Shebang then reads &lt;code&gt;#!/usr/bin/env node&lt;/code&gt;. Without the Shebang NodeJS scripts will fail immediately after being invoked as seen in the following screenshot.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2017/01/writing-node-js-cli-tools/Node%20Script%20executed%20with%20and%20without%20shebang&quot; alt=&quot;/images/posts/2017/node-cli/node-without-and-with-shebang.png&quot; /&gt;&lt;figcaption&gt;/images/posts/2017/node-cli/node-without-and-with-shebang.png&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;While it is not necessarily needed for scripts written in in Shell/Bash the Shebang cannot be omitted from NodeJS scripts intended to be run as command line program.&lt;/p&gt;
&lt;p&gt;Well, that has been a fun excursion into the world of shell scripting. Back to node!&lt;/p&gt;
&lt;h3&gt;Writing a tiny node cli script&lt;/h3&gt;
&lt;p&gt;Since we now know how to use a Shebang and how to invoke out Node scripts from the command line we may write a script. Let&#39;s keep it simple. We will greet the person executing the script.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;#&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;usr&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;bin&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;env node&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello, &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s save the script and run it with &lt;code&gt;$ node hello.js&lt;/code&gt; from the command line.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2017/01/writing-node-js-cli-tools/Running%20the%20hello.js%20script&quot; alt=&quot;/images/posts/2017/node-cli/node-running-hello-js.png&quot; /&gt;&lt;figcaption&gt;/images/posts/2017/node-cli/node-running-hello-js.png&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Now that&#39;s interesting: The script greets the currently logged-in user! That&#39;s the case because we make use of the &lt;code&gt;process&lt;/code&gt; variable which holds information about the current environment - the &lt;code&gt;env&lt;/code&gt; object for example holds your environment variables. Add a new function to &lt;code&gt;hello.js&lt;/code&gt; to see the output.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;printEnv&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;printEnv&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will see the &lt;code&gt;USER&lt;/code&gt; variable is part of the environment object and holds the name of the logged-in user. This way node scripts can access terminal variables and use them. Run &lt;code&gt;export _test=123&lt;/code&gt; and then &lt;code&gt;node hello.js&lt;/code&gt; - &lt;code&gt;_test&lt;/code&gt; is now part of the environment. By using the Environment we can make a script execute different tasks depending on the environment, as seen in the next snippet.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;production&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;writeLogFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;writeLogFile&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Not implemented&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;This is a test!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have a log function which either runs the &lt;code&gt;writeLogFile&lt;/code&gt; function when in production mode or logs to the console if we are in any other mode (development for example.)&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2017/01/writing-node-js-cli-tools/Making%20use%20of%20the%20environment%20in%20a%20node%20cli%20script&quot; alt=&quot;/images/posts/2017/node-cli/node-using-process-environment.png&quot; /&gt;&lt;figcaption&gt;/images/posts/2017/node-cli/node-using-process-environment.png&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;As you can see in the screenshot depending on the &lt;code&gt;NODE_ENV&lt;/code&gt; variable a different function is executed. The environment can be set inline (&lt;code&gt;$ export NODE_ENV=production&lt;/code&gt;) for the duration of the shell session or it can be set permanent, e.g. by adding it to the shell runtime file (&lt;code&gt;~/.zshrc&lt;/code&gt; or &lt;code&gt;~/.bashrc&lt;/code&gt;). You may also noticed the &lt;code&gt;process.exit(1)&lt;/code&gt; inside the &lt;code&gt;writeLogFile&lt;/code&gt; function. The &lt;code&gt;exit&lt;/code&gt; function enables us to use exit codes to indicate if our script ended successful or not to other processes. If a script exits with &lt;code&gt;0&lt;/code&gt; it was successful, everything else is considered an error. To see how a script exits you can run &lt;code&gt;echo $?&lt;/code&gt; inside a terminal.&lt;/p&gt;
&lt;p&gt;You can read more about exit codes in &lt;a href=&quot;http://www.tldp.org/LDP/abs/html/exit-status.html&quot;&gt;the resources of TLDP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So far we learned that Node CLI scripts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;need a shebang, &lt;code&gt;#!/usr/bin/env node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;are written in regular JavaScript&lt;/li&gt;
&lt;li&gt;can access the environment&lt;/li&gt;
&lt;li&gt;can exit using &lt;code&gt;process.exit(exit_code)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;can utilize lots of Node packages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that&#39;s it for today. All the example scripts are &lt;a href=&quot;https://github.com/kevingimbel/blog-node-cli-tools-data&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Bash script: ws</title>
    <link href="https://kevingimbel.de/blog/2017/01/bash-script-ws/"/>
    <updated>2017-01-12T18:22:48Z</updated>
    <id>https://kevingimbel.de/blog/2017/01/bash-script-ws/</id>
    <content type="html">&lt;p&gt;For the past year or so I had a little function in my &lt;code&gt;.bash_profile&lt;/code&gt; file which made my interaction with the terminal roughly 9001% better - yeah, over 9000! This little function is called &lt;code&gt;ws&lt;/code&gt; and makes switching between projects inside my workspace a lot easier. Both my private and work projects are inside the &lt;code&gt;~/Development&lt;/code&gt; directory. If I want to get to a project I would normally navigate like &lt;code&gt;cd ~/Development/private/github/kevingimbel/kevingimbel.com&lt;/code&gt; - even with tab completion I am too lazy to type this every time I want to work on my website, so I wrote a script for it!&lt;/p&gt;
&lt;h3&gt;The script: &lt;code&gt;ws&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The script is actually a shell function and it looks like this.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-name function&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/Development&quot;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;# $1 is the target directory&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;target_dir&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;# We start searching from the workspace dir&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$workspace&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;# -maxdepth is the max directories to go &quot;down&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;# head -n1 gives back the first result&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;workspace_path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; -maxdepth &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; -type d -name &lt;span class=&quot;token string&quot;&gt;&quot;*&lt;span class=&quot;token variable&quot;&gt;$target_dir&lt;/span&gt;*&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; -n1&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;  -z &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$workspace_path&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Directory &#39;&lt;span class=&quot;token variable&quot;&gt;$target_dir&lt;/span&gt;&#39; not found. Changing to &lt;span class=&quot;token variable&quot;&gt;$workspace&lt;/span&gt;&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$workspace_path&lt;/span&gt;&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function is placed &lt;a href=&quot;https://github.com/kevingimbel/dotfiles/blob/997590a65c134326ca051e1e28a78f947673831d/.zshrc#L14-L28&quot;&gt;inside my ~/.bash_profile&lt;/a&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt; so the function is available on every terminal start. It might look odd if your not too farmiliar with shell scripts but it is really rather simple and basic - let&#39;s explore it line by line.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;function ws()&lt;/code&gt; we declare the function name. In shell scripts a function name has parentheses after it tho it does not take arguments this way (If you know why this is, &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.com/issues&quot;&gt;open an issue and explain it please&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/kevingimbel&quot;&gt;tweet me&lt;/a&gt;!). The next lines declare a local variable, &lt;code&gt;workspace&lt;/code&gt; and then &lt;code&gt;target_dir=$1&lt;/code&gt; were I assign whatever is passed to the function as being the target directory the user is trying to find. Then, I execute &lt;code&gt;cd $workspace&lt;/code&gt; to go to the workspace directory and start a search with &lt;code&gt;workspace_path=$(find -maxdepth 3 -type d -name &amp;quot;*$target_dir*&amp;quot; | head -n1)&lt;/code&gt; - now that might look weird. What happens here is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We declare a variable, &lt;code&gt;workspace_path&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We execute a function with &lt;code&gt;$()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We use &lt;code&gt;find . -maxdepth 3 -type d -name &amp;quot;*$target_dor*&amp;quot;&lt;/code&gt; to search for a &lt;code&gt;d&lt;/code&gt;irectory with a name similar to &lt;code&gt;$target_dir&lt;/code&gt; (the variable from earlier)&lt;/li&gt;
&lt;li&gt;We then pipe (&lt;code&gt;|&lt;/code&gt;) the output from find to &lt;code&gt;head&lt;/code&gt; and read in the first line &lt;code&gt;-n1&lt;/code&gt; - this is the first match&lt;/li&gt;
&lt;li&gt;The return value from &lt;code&gt;$(find ... | head -n1)&lt;/code&gt; is then available in the &lt;code&gt;$workspace_path&lt;/code&gt; variable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;$workspace_path&lt;/code&gt; now holds whatever directory was found - or nothing. This is why we check if it is empty (&lt;code&gt;-z &amp;quot;$workspace_path&amp;quot;&lt;/code&gt;) in the &lt;code&gt;if&lt;/code&gt; block.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;  -z &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$workspace_path&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Directory &#39;&lt;span class=&quot;token variable&quot;&gt;$target_dir&lt;/span&gt;&#39; not found. Changing to &lt;span class=&quot;token variable&quot;&gt;$workspace&lt;/span&gt;&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$workspace_path&lt;/span&gt;&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This reads: If &lt;code&gt;$workspace_path&lt;/code&gt; is empty, then &lt;code&gt;echo&lt;/code&gt; the directory was not found and notify the user we changed to &lt;code&gt;$workspace&lt;/code&gt; with the &lt;code&gt;cd $workspace&lt;/code&gt; earlier. Else, &lt;code&gt;cd&lt;/code&gt; into the found directory. And that&#39;s it! Some examples can be seen in the screenshot below.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2017/01/bash-script-ws/Using%20the%20ws%20function%20to%20navigate%20through%20my%20workspace&quot; alt=&quot;/images/posts/2017/bash-ws/bash-ws-function-in-use.png&quot; /&gt;&lt;figcaption&gt;/images/posts/2017/bash-ws/bash-ws-function-in-use.png&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;I am sure the &lt;code&gt;ws&lt;/code&gt; function can be improved more but it has served my needs well so far. One optimisation might be to use the second argument, &lt;code&gt;$2&lt;/code&gt;, as parameter for &lt;code&gt;-maxdepth&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2017, week two</title>
    <link href="https://kevingimbel.de/blog/2017/01/2017-week-two/"/>
    <updated>2017-01-15T16:05:13Z</updated>
    <id>https://kevingimbel.de/blog/2017/01/2017-week-two/</id>
    <content type="html">&lt;p&gt;This week I spent a lot of time with Amazon Web Services, or AWS, and made myself familiar with the backend and the way server / instance management works on AWS. While doing so I also learned that AWS instances are by default not accessible from the internet - they have no open ports and each instance needs a &amp;quot;Security Group&amp;quot; which defines ways to access the instance. They also do not have Shell access by default. When you&#39;ve never worked with AWS the pure amount of options is overwhelming. I felt like endlessly reading through documentations until I had everything setup correctly. It was quite a task and I&#39;m sure the next time I need to setup an AWS instance it will go smoother. I might cover what I&#39;ve learned in a blog post once I am &amp;quot;done&amp;quot;.&lt;/p&gt;
&lt;p&gt;I played a bit of recore and Dragon Age: Inquisition but I am not in the mood to play too much video games at the moment. After spending hundreds of hours in The Elder Scrolls: Online last year I feel it&#39;s good to have my controller rest for a while. I did spent time watching Star Trek tho. I am almost finished with The Original Series and in fact it&#39;s the first time ever I watched it episode by episode.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.giphy.com/l2R03nrt5LDkpc6VG.gif&quot; alt=&quot;&amp;quot;Spock jamming in space&amp;quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m looking forward to continuing with The Next Generation once I&#39;m finished with The Original Series. You can probably tell I really like Star Trek. 🖖 I am also looking forward to &lt;a href=&quot;https://en.wikipedia.org/wiki/Star_Trek:_Discovery&quot;&gt;Star Trek: Discovery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wrote two articles, &lt;a href=&quot;https://kevingimbel.com/bash-script-ws/&quot;&gt;&amp;quot;Bash script: ws&amp;quot;&lt;/a&gt; and &lt;a href=&quot;https://kevingimbel.com/writing-nodejs-cli-tools/&quot;&gt;&amp;quot;Writing NodeJS cli tools&amp;quot;&lt;/a&gt; which both focus on the command line and command line tools - one time in shell script and one time in NodeJS. I plan to write more articles about both since it&#39;s a topic I am interested in.
I also &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.com/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue%20is%3Aclosed%20created%3A2017-01-08..2017-01-15%20&quot;&gt;fixed an issue&lt;/a&gt; I introduced due to bad CSS scoping. Always check your scope!&lt;/p&gt;
&lt;p&gt;Next week I will be in Munich, Germany to attend a Elastic course about Elasticsearch and relevant products. I&#39;m exited and I&#39;m looking forward to the 2-day course.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other things:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I pre-ordered the &lt;a href=&quot;http://amzn.to/2izPQqn&quot;&gt;Nintendo Switch&lt;/a&gt; and &lt;a href=&quot;http://amzn.to/2jygmPp&quot;&gt;The Legend of Zelda: Breath of the Wild&lt;/a&gt; and I&#39;m exited!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Yo no hablo español, soy aprendendio español!&lt;/em&gt; I started learning Spanish again. 🎉&lt;/li&gt;
&lt;li&gt;I cooked vegan curry and accidentally made so much I could eat it all week. I&#39;m now taking a Curry break.&lt;/li&gt;
&lt;li&gt;I learned &lt;a href=&quot;https://help.github.com/articles/searching-issues/&quot;&gt;GitHub has great advanced search options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The xx released their third Studio Album called &amp;quot;I see you&amp;quot;. It&#39;s fantastic. (Listen: &lt;a href=&quot;https://play.google.com/music/listen?u=0#/album//The+xx/I+See+You&quot;&gt;Google Play Music&lt;/a&gt; / &lt;a href=&quot;https://open.spotify.com/album/2PXy9USZAoTSdtrxfkPBnl&quot;&gt;Spotify&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&#39;s it for week two. 👋&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Deploy a static site with git</title>
    <link href="https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/"/>
    <updated>2017-01-17T20:28:38Z</updated>
    <id>https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/</id>
    <content type="html">&lt;p&gt;If you follow my blog you might recall that I switched from Jekyll hosted on GitHub to &lt;a href=&quot;https://kevingimbel.de/farewell-jekyll-hello-hugo/&quot;&gt;Hugo hosted on Uberspace&lt;/a&gt;. Beside the fact I had to create a custom Hugo theme for myself and learn how to run a Hugo blog/website I also had to think about how I am going to deploy my website. Hugo is a static site generator and when executed (&lt;code&gt;$ hugo&lt;/code&gt;) it compiles the site from Markdown and HTML templates into a &lt;code&gt;public&lt;/code&gt; directory with lots of folders and HTML files. I could have fiddled with GitHub pages and created a &lt;code&gt;docs&lt;/code&gt; directory with the live site inside but then I could have stayed with Jekyll in the first place. What made me move to Hugo beside the speed advantages was that I wanted to self-host my website again and use &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let&#39;s Encrypt&lt;/a&gt; to create SSL certificates and use HTTPS.&lt;/p&gt;
&lt;h3&gt;So, what is a &amp;quot;static site&amp;quot;?&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;If you already know the answer, &lt;a href=&quot;https://kevingimbel.de/blog/2017/01/deploy-a-static-site-with-git/#deploying-a-static-site&quot;&gt;skip to the next section&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As the name suggest a static site is - well - &lt;em&gt;static&lt;/em&gt;. There&#39;s no fancy Backend to login and no Database required to fetch content. All the content comes from &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.com/tree/8cc66cd61774e28628848bcfde58d93b8ba3cae1/content/post&quot;&gt;a bunch of markdown files&lt;/a&gt;. These files are then compiled into a lot of HTML files based on &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.com/tree/8cc66cd61774e28628848bcfde58d93b8ba3cae1/themes/kevingimbel/layouts&quot;&gt;templates&lt;/a&gt; which in turn a template engine to get content into place. The template for my &lt;a href=&quot;https://kevingimbel.de/about/&quot;&gt;/about/&lt;/a&gt; page looks like this.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;page wrap&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-labeldyby&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-describedby&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;desc&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;header&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;page-header&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;page-body&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;desc&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These 10 lines of code make up the default for single pages without a custom template. The words in curly brackets (e.g. &lt;code&gt;) are variables filled by Hugo when the template is compiled. &lt;/code&gt; defines the &lt;code&gt;main&lt;/code&gt; block used inside the &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.com/blob/8cc66cd61774e28628848bcfde58d93b8ba3cae1/themes/kevingimbel/layouts/_default/baseof.html#L36-L38&quot;&gt;&lt;code&gt;baseof.html&lt;/code&gt; template&lt;/a&gt;. All these templates make up the final site. So, despite being &amp;quot;static&amp;quot; when finished a static site is not so static! It can be flexible and you can use template logic like conditions (&lt;code&gt;if/else&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;), loops (&lt;code&gt;range&lt;/code&gt;), and with Hugo even custom &lt;a href=&quot;http://gohugo.io/extras/shortcodes/&quot;&gt;shortcodes inside your markdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the end of the day we get a static site. This site is compiled from our source files and consists of folders (for URLs) and files (lots of &lt;code&gt;index.html&lt;/code&gt; files!) so our server (apache, nginx, a node app) can deliver the content to the client. You might know that by default apache will serve any files such as &lt;code&gt;index.html&lt;/code&gt; or &lt;code&gt;index.htm&lt;/code&gt; when a route is requested unless you use a dynamic system such as PHP, Ruby, or NodeJS to serve your files. When you load this article at https://kevingimbel.com/deploy-a-static-site-with-git/ you request a folder, &lt;code&gt;deploy-a-static-site-with-git&lt;/code&gt;, located inside the web root directory of my server and the &lt;code&gt;index.html&lt;/code&gt; file inside this folder gets served to you by Apache. This is the basics how static websites work - they&#39;re simply HTML files and folders!&lt;/p&gt;
&lt;h3&gt;Deploying a static site&lt;/h3&gt;
&lt;p&gt;So far we learned  that static sites are &amp;quot;just&amp;quot; folders and HTML files when generated. The only dependency they have to make them work is a Web Server. This can be apache, nginx, IIS, a simple nodeJS app, or even &lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt;. The most basic deployment for our website would be to upload the content of the generated folder (&lt;code&gt;public&lt;/code&gt;) to our server using FTP. You might remember that this was the standard for having a website in the 90s were all websites were coded in Frames or tables. My first &amp;quot;real website&amp;quot; around 2008 was deployed that way. It was a mess.&lt;/p&gt;
&lt;p&gt;What I did might be over-engineering in some way. I have all my source code in git so I set up a git repository on my server and push to this repository whenever I want to publish a new blog post, fix an issue, or change some templates/CSS. What&#39;s important about the repository is that it needs to be a &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server&quot;&gt;bare repository&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Setting up the git repository&lt;/h4&gt;
&lt;p&gt;The repository can be in any directory on your server which your user (the one you login with ssh) has access to. It should not be your web server root, that is &lt;code&gt;/var/www/&lt;/code&gt; or &lt;code&gt;/var/www/html/&lt;/code&gt; depending on your system since the files inside the bare repo could be exposed to the public this way. I created a directory outside the web server root in my users &lt;code&gt;home&lt;/code&gt; directory, namely &lt;code&gt;$HOME/repository/kevingimbel.com&lt;/code&gt;. The steps to setup the bare repository are as follows.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;ssh&lt;/span&gt; youruser@yourserver&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; -p &lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/repository/kevingimbel.com&lt;br /&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/repository/kevingimbel.com&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone --bare https://github.com/kevingimbel/kevingimbel.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These commands create the &lt;code&gt;repository&lt;/code&gt; directory with a sub-directory &lt;code&gt;kevingimbel.com&lt;/code&gt; inside. Inside this new directory I clone the git repository from GitHub with the &lt;a href=&quot;https://git-scm.com/docs/git#git---bare&quot;&gt;&lt;code&gt;--bare&lt;/code&gt;&lt;/a&gt; flag set. This will not checkout the source code but instead setup a git repository which we can push to or pull from - just like we would do from GitHub. What we need to build the static site is &lt;code&gt;hugo&lt;/code&gt; as executable on the server -and the source code of the site. &amp;quot;Wait!&amp;quot; I hear you say, &amp;quot;Didn&#39;t you just say there &lt;em&gt;is no source code?!&lt;/em&gt;&amp;quot; - that&#39;s right. The bare repository holds no source code but it can &lt;em&gt;be pushed to&lt;/em&gt;! When we push our code to this remote we can use a &lt;a href=&quot;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&quot;&gt;git hook&lt;/a&gt; to execute a set of scripts when a push is received. To do so, we use the &lt;code&gt;post-receive&lt;/code&gt; hook. There are examples for each hook inside your newly created directory, e.g. &lt;code&gt;$HOME/repository/kevingimbel.com/hooks&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;The post-receive hook&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;post-receive&lt;/code&gt; hook is executed after the git repository receives a new push. There are also &lt;code&gt;pre-&lt;/code&gt; hooks which are executed before certain actions take place. You can use &lt;code&gt;pre-commit&lt;/code&gt; for example to run a set of tests before you are able to write a commit message. I did this in for my example &lt;a href=&quot;https://github.com/kevingimbel/nodesh/blob/master/scripts/pre-commit&quot;&gt;node cli script nodesh&lt;/a&gt; to run &lt;a href=&quot;https://mochajs.org/&quot;&gt;mocha&lt;/a&gt; before I am able to commit. If a test fails and mocha exits with a non 0 code the commit is aborted. To build our static site after we push to the repository we will use the &lt;code&gt;post-receive&lt;/code&gt; hook.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;post-receive&lt;/code&gt; hook I use can be found &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.com/blob/master/scripts/post-receive&quot;&gt;on GitHub&lt;/a&gt;. The &lt;code&gt;post-receive&lt;/code&gt; hook is a bash script which has access to a lot of built-in functions as well as all your users functions when a &lt;code&gt;source ~/.bash_profile&lt;/code&gt; line is added to the top.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh

source ~/.bash_profile

repository_path=$HOME/repositories/kevingimbel.com
project_path=$HOME/subdomains/html
hugo_file_path=$HOME/hugosrc
css_path=$hugo_file_path/themes/kevingimbel/static/css
css_file=$css_path/style.css
base_theme_file=$hugo_file_path/themes/kevingimbel/layouts/_default/baseof.html
while read oldrev newrev refname
do
    # Get the name of the current branch
    branch=$(git rev-parse --symbolic --abbrev-ref $refname)

    # Checkout master branch
    if [ &amp;quot;$branch&amp;quot; = &amp;quot;master&amp;quot; ]; then
      git --work-tree=$hugo_file_path --git-dir=$repository_path checkout -f master

      # Get checksum of file
      file_shasum=$(shasum $css_file | awk -F&#39; &#39; &#39;{ print $1 }&#39;)

      # declare name of new CSS file
      new_css_file_name=&amp;quot;style.$file_shasum.css&amp;quot;

      # move style.css to the new CSS name (rename)
      mv $css_file $css_path/$new_css_file_name

      # replace name in template before hugo is build
      sed -i &amp;quot;s/style\.css/${new_css_file_name}/g&amp;quot; $base_theme_file

      hugo -b=&amp;quot;https://kevingimbel.com&amp;quot; -d=&amp;quot;$project_path&amp;quot; -s=&amp;quot;$hugo_file_path&amp;quot;
    fi
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There happens quite a lot in my &lt;code&gt;post-receive&lt;/code&gt; but the most import parts are the  &lt;code&gt;git checkout&lt;/code&gt; with the &lt;a href=&quot;https://git-scm.com/docs/git#git---work-treeltpathgt&quot;&gt;&lt;code&gt;--work-tree&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://git-scm.com/docs/git#git---git-dirltpathgt&quot;&gt;&lt;code&gt;--git-dir&lt;/code&gt;&lt;/a&gt; to tell git were the git repository is (&lt;code&gt;--git-dir&lt;/code&gt;) and were the files should be checked-out to (&lt;code&gt;--work-tree&lt;/code&gt;). I checkout the files to &lt;code&gt;$HOME/hugosrc&lt;/code&gt;where the source code of my website is placed just like on GitHub. I then &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.com/blob/master/scripts/post-receive#L33-L42&quot;&gt;do some magic&lt;/a&gt; to re-write my &lt;code&gt;style.css&lt;/code&gt; file to a hashed-file. This is used to force browsers to re-load the CSS when the file has changed. After the style.css re-write is done and the css path inside the  &lt;code&gt;baseof.html&lt;/code&gt; template is changed I build the site with &lt;code&gt;hugo&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;hugo -b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://kevingimbel.com&quot;&lt;/span&gt; -d&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$project_path&lt;/span&gt;&quot;&lt;/span&gt; -s&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$hugo_file_path&lt;/span&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-b&lt;/code&gt; is the base url, &lt;code&gt;-d&lt;/code&gt; is the destination and &lt;code&gt;-s&lt;/code&gt; is the source. This way the static site is generated into my document root folder ($home/subdomains/html) with the new source files checked-out by git into the &lt;code&gt;$HOME/hugosrc&lt;/code&gt; directory. Hugo generates the site and logs all output to the terminal - which is nice to have. In case of a build error hugo stops and does not overwrite the existing, working site. This is also nice to have.&lt;/p&gt;
&lt;p&gt;What&#39;s important is that the &lt;code&gt;post-receive&lt;/code&gt; hook is executable, so you have to run &lt;code&gt;$ chmod +x post-receive&lt;/code&gt; to set the &lt;code&gt;x&lt;/code&gt; (or e&lt;code&gt;x&lt;/code&gt;ecute) permission on the file.&lt;/p&gt;
&lt;h4&gt;Pushing to the new repository&lt;/h4&gt;
&lt;p&gt;To push your code to the new repository you need to add it as a &lt;a href=&quot;https://git-scm.com/docs/git-remote&quot;&gt;remote&lt;/a&gt; to your local git repository. To do so, use &lt;code&gt;git remote add&lt;/code&gt; filling in the remote name and remote url parameters.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# git remote add $name $url&lt;/span&gt;&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; production ssh://YOUR_USER@YOUR_SERVER:/home/YOUR_USER/repository/gitrepo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Afterwards you are able to push your code with &lt;code&gt;git push production master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And that&#39;s it! This way I deploy and build my static site on my server using git. I am sure the script could be refactored and optimized more if I would dive deeper into git and git hooks - and I might do. At the moment it satisfies my needs and I am happy with it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2017, week three</title>
    <link href="https://kevingimbel.de/blog/2017/01/2017-week-three/"/>
    <updated>2017-01-22T10:44:43Z</updated>
    <id>https://kevingimbel.de/blog/2017/01/2017-week-three/</id>
    <content type="html">&lt;p&gt;Another week another short review! The third week of 2017 had a lot of travel because I attended an &lt;a href=&quot;https://elastic.co/&quot;&gt;Elasticsearch&lt;/a&gt; training course in Munich to learn more about Elasticsearch hands-on. The two day course was exiting and I enjoyed my time, learning quite a lot about the different features of Elasticsearch and Kibana. Part of the course material is a 500 page PDF file which is a copy of the presentation held during the two days - I am glad I got it because it&#39;s a great reference to look at.&lt;/p&gt;
&lt;h3&gt;Munich&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/week-three/snow-covered-bicycle-munich.jpg&quot; alt=&quot;Snow covered bicycle in Munich.&quot; /&gt;&lt;figcaption&gt;Snow covered bicycle in Munich.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Munich was cold with -7°C to -10°C and there was a lot of snow - for a few days it was nice but I&#39;m happy to be back in the middle of Germany without snow. I stayed at &lt;a href=&quot;https://www.airbnb.com/rooms/197005&quot;&gt;an Airbnb&lt;/a&gt; because all hotels around the city were booked due to a big conference in town. If you want to visit Munich check out the above room - it&#39;s great!&lt;/p&gt;
&lt;p&gt;During my trip to and from Munich I also had to work at a Starbucks and on the train. Both places are not perfect for working if you&#39;re used to a second monitor and having space around you. Starbucks was also really loud which can get annoying - good thing there&#39;s music! What helped me tremendously was the MacBook battery life. I can get an average of 8-10 hours of battery life which is simply astonishing.&lt;/p&gt;
&lt;h3&gt;Open source&lt;/h3&gt;
&lt;p&gt;I also helped &lt;a href=&quot;https://github.com/spf13/hugo/issues/2946&quot;&gt;track down a bug&lt;/a&gt; with Gulp and hugo, and then decided to tweet what I have been doing for the past two month: &lt;a href=&quot;https://twitter.com/_kevinatari/status/821773139617218562&quot;&gt;Following an open source project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Following an open source project is quite interesting. I read a lot of the hugo issue reports and look at the Pull Requests submitted. This helps me see how to handle pull requests and open source and in my opinion &lt;a href=&quot;https://github.com/spf13/hugo&quot;&gt;the hugo project&lt;/a&gt; is a good example.&lt;/p&gt;
&lt;h3&gt;Star Trek&lt;/h3&gt;
&lt;p&gt;I finished The Original Series and now started to watch The Next Generation. It&#39;s the first time I watch everything in the correct order and I&#39;m exited!&lt;/p&gt;
&lt;p&gt;I also programmed a bit and build a text to 1337speak converter &lt;a href=&quot;https://github.com/kevingimbel/leetscript&quot;&gt;node module&lt;/a&gt; and a &lt;a href=&quot;https://github.com/kevingimbel/leetscript-cli&quot;&gt;cli tool&lt;/a&gt; which uses the first module. I&#39;m not yet sure why you would need this type of one-way converter but it was an interesting task to build a node module, publish it, and then use it in a script - I&#39;ll try and wrap it up in a post.&lt;/p&gt;
&lt;p&gt;I also wrote a blog post about &lt;a href=&quot;https://kevingimbel.de/deploy-a-static-site-with-git/&quot;&gt;deploying a site with git&lt;/a&gt; - which is what I am doing with my website at the moment.&lt;/p&gt;
&lt;h3&gt;Not On Tour&lt;/h3&gt;
&lt;p&gt;On Friday I saw &lt;a href=&quot;https://notontour.bandcamp.com/&quot;&gt;Not On Tour&lt;/a&gt; live with my girlfriend. Not On Tour is a Punk / Hardcore Punk Band from Tel Aviv and I loved every bit of the concerts. The concert was in a small venue with around 50-100 people and they sounded a bit harder live then I expected - and a lot more powerful. I would recommend seeing them live whenever you get a chance. &lt;a href=&quot;https://www.instagram.com/p/BPhmT5rgJvw/?taken-by=kevingimbel&quot;&gt;Here&#39;s a little Instagram video&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Links&lt;/h3&gt;
&lt;p&gt;Here are some interesting things from this week:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HTD-FJVY9rE&quot;&gt;All Fallout Intros, 1997-2015&lt;/a&gt; - seeing all the intros to one of my favorite game series is great.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.theverge.com/2017/1/19/14258474/trump-inauguration-science-politics-climate-change-vaccines&quot;&gt;Yes, science is political&lt;/a&gt; - The Verge on why science is political and how science and politics play together. A sad read in the upcome of &amp;quot;Trumps America&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/basecs/bits-bytes-building-with-binary-13cb4289aafa#.3n5g6mfdr&quot;&gt;Bits, Bytes, Building With Binary&lt;/a&gt; by &lt;a href=&quot;https://medium.com/@vaidehijoshi&quot;&gt;Vaidehi Joshi&lt;/a&gt; - a post about bits and bytes and how they work. Vaidehi started a series called &lt;a href=&quot;https://medium.com/basecs&quot;&gt;basecs&lt;/a&gt; which aims to explain how computers actually work. I highly recommend reading it!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kunststube.net/encoding/&quot;&gt;What Every Programmer Absolutely, Positively Needs To Know About Encodings And Character Sets To Work With Text&lt;/a&gt; by David Zentgraf - an interesting read about handling encoding and how encoding works.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2017, week four</title>
    <link href="https://kevingimbel.de/blog/2017/01/2017-week-four/"/>
    <updated>2017-01-29T11:44:43Z</updated>
    <id>https://kevingimbel.de/blog/2017/01/2017-week-four/</id>
    <content type="html">&lt;p&gt;It&#39;s the last week of the first month already - weird how fast time seems to tick! This week has been rather stressful and loaded with work which is why I did not write any posts or did any programming in my free time. Looking back at the week there&#39;s not much to say so this will be a quick read with some reading recommendations at the end.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;dep&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The Go language has released a alpha version of &lt;a href=&quot;https://github.com/golang/dep&quot;&gt;&lt;code&gt;dep&lt;/code&gt;&lt;/a&gt; - their dependency management tool. Up until now there was no native suport for dependency management in Go. Go provides an &lt;code&gt;import&lt;/code&gt; functionality to load packages. The &lt;code&gt;import&lt;/code&gt; mechanism is similar to the NodeJS &lt;code&gt;require&lt;/code&gt; - with the big difference that it used to store all packages inside the &lt;code&gt;$GOPATH&lt;/code&gt; - a directory on the system where all packages from all go code is stored. With the new &lt;code&gt;dep&lt;/code&gt; dependency manager dependencies will be stored inside a &lt;code&gt;vendor&lt;/code&gt; directory inside the package directory - similar to &lt;code&gt;node_modules&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I started playing around with the alpha release and will write a article about it once I gathered enough information.&lt;/p&gt;
&lt;h3&gt;Crypt of the Necrodancer&lt;/h3&gt;
&lt;p&gt;My best friend showed me &lt;a href=&quot;http://necrodancer.com/&quot;&gt;Crypt of the NecroDancer&lt;/a&gt;, a rhythmic, rouge-like, dungeon crawler where you dance your way deep into a dungeon. It&#39;s beautiful. Weird, and beautiful. You have to stay in the rhythm to move around and attack enemies. The more you stay in rhythm the better your score gets. Typical for rouge-like games when you die you need to start over. I only played for an hour or so but look forward to continue it. It&#39;s more casual which is what I need - or want - to play at the moment. I bought it for PlayStation 4 but its also available on PS Vita, Mac, PC, and iOS.&lt;/p&gt;
&lt;h3&gt;Antilopen Gang&lt;/h3&gt;
&lt;p&gt;I bought tickets for &lt;a href=&quot;http://www.schlachthof-wiesbaden.de/programmdetails/items/antilopen-gang-anarchie-alltag.html&quot;&gt;Antilopen Gang&lt;/a&gt;. Antilopen Gang is german Hip Hop - and Punk, at least on their latest album &lt;a href=&quot;https://play.google.com/music/m/Bl6aukayea54w6hm757vx2npv3m?t=Anarchie_und_Alltag__Bonusalbum_Atombombe_auf_Deutschland_-_Antilopen_Gang&quot;&gt;&amp;quot;Anarchie und Alltag&amp;quot;&lt;/a&gt;. I am looking forward to the concert!&lt;/p&gt;
&lt;h3&gt;Things to read&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://code.facebook.com/posts/557147474482256/this-browser-tweak-saved-60-of-requests-to-facebook&quot;&gt;&amp;quot;This browser tweak saved 60% of requests to Facebook&amp;quot;&lt;/a&gt; - how Facebook worked with browser vendors to tweak the browser cache, effectively saving 60% of requests to Servers.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.theverge.com/2017/1/26/14398934/tim-scully-lsd-chemistry-drugs-counterculture-psychedelics&quot;&gt;&amp;quot;Here’s how underground chemist Tim Scully planned to save the world with LSD&amp;quot;&lt;/a&gt; the Story of Tim Scully who produced LSD in the 60s in underground labs. It&#39;s an interesting read into the world of psychedelics and LSD production - which appears to be really hard.&lt;/p&gt;
&lt;p&gt;I made a &lt;a href=&quot;https://twitter.com/i/moments/825722790259126273&quot;&gt;Twitter Moment&lt;/a&gt; with some tweets I found interesting. Most tweets are political and represents feedback to Trumps shit show. It&#39;s horrible how much he fucked up in just one week - stay anti, USA! 🏴&lt;/p&gt;
&lt;p&gt;That&#39;s it for week four. Next week I will help my girlfriend move to her new flat and hopefully finally get to my tattoo artist so we can arrange a session to finish up my tattoo - which is long overdue.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2017, week five</title>
    <link href="https://kevingimbel.de/blog/2017/02/2017-week-five/"/>
    <updated>2017-02-08T07:51:13Z</updated>
    <id>https://kevingimbel.de/blog/2017/02/2017-week-five/</id>
    <content type="html">&lt;p&gt;Another week passed, another personal review. This week I finally got a appointment with my tattoo artist to finish up my tattoo. I&#39;m only 6 months late to do so because I kept saying &amp;quot;I&#39;ll call next week&amp;quot;, &amp;quot;I&#39;ll do it when I&#39;m back from Amsterdam&amp;quot;, &amp;quot;I&#39;ll do it after Christmas&amp;quot; - and so on. I am really bad with managing time and work-life balance. If you have any tips on how you manage the things you have to do, hit me up &lt;a href=&quot;https://twitter.com/kevingimbel&quot;&gt;on twitter @kevingimbel&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Go 💻&lt;/h3&gt;
&lt;p&gt;You might know I am learning Go at the moment. I build a new thingy, &lt;code&gt;Colog&lt;/code&gt;, which is a log helper that supports a basic configuration and produced colorful terminal logs. It&#39;s still in its early phase and there&#39;s a lot more I want to implement - I just don&#39;t know how because I am not yet fluent in Go. The project is open-sourced on GitHub at &lt;a href=&quot;https://github.com/kevingimbel/colog&quot;&gt;kevingimbel/colog&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Moving 📦&lt;/h3&gt;
&lt;p&gt;I spent my Saturday helping my girlfriend move to her new flat which was exhausting. Nonetheless I enjoyed it somehow, moving is hard work and it&#39;s a good feeling to sit in a filled flat after moving all the stuff around all day. I like it. Don&#39;t ask me to help you move, tho. &amp;lt;3&lt;/p&gt;
&lt;p&gt;On Thursday and Friday I spent all my work time with Amazon Web Services (AWS) and Elasticsearch. My Elasticsearch cluster is now running and I try to get log files into it with &lt;a href=&quot;https://www.elastic.co/products/logstash&quot;&gt;Logstash&lt;/a&gt; and &lt;a href=&quot;https://www.elastic.co/products/beats&quot;&gt;Beats&lt;/a&gt;. The last problem to solve is that the parsing of log files appears to be really hard. Logstash has a &amp;quot;language&amp;quot; for parsing files called &lt;a href=&quot;https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html#_grok_basics&quot;&gt;&lt;code&gt;grok&lt;/code&gt;&lt;/a&gt; which basically is a variable-to-regex system. It&#39;s rather complicated. At the moment I do not understand it and I do not get it to properly parse my log files. I guess that&#39;s a thing for the next week - getting Logstash up and running.&lt;/p&gt;
&lt;h3&gt;Politics and stuff 🏴&lt;/h3&gt;
&lt;p&gt;The current situation around the globe troubles me a lot. It&#39;s draining me out and I have to stop consuming news and (twitter) feeds from time to time. The issue with Trump going mental in America and the slow but steady rise of facist parties across Europe is too depressing to constantly follow it. I got a pay rise in January and I decided to support independent journalism and Antifa and left-wing movements with it instead if putting all aside. First on the list are Corrective and Streetcoverage. I need to do more research on who I want to support and how I can support them. I also made &lt;a href=&quot;https://twitter.com/i/moments/825810866377469953&quot;&gt;a Twitter Moment&lt;/a&gt; with some of the tweets I liked this week. Hint: It&#39;s political.&lt;/p&gt;
&lt;p&gt;Related to current events I also started playing Skyrim again, this time on the XBox One with Mods. It&#39;s a great escape for me because I love the world and lore of Skyrim and for a few hours I can forget everything that troubles me.&lt;/p&gt;
&lt;p&gt;That&#39;s it for week five. See you next week! 🙋&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2017, week seven</title>
    <link href="https://kevingimbel.de/blog/2017/02/2017-week-seven/"/>
    <updated>2017-02-18T13:03:26Z</updated>
    <id>https://kevingimbel.de/blog/2017/02/2017-week-seven/</id>
    <content type="html">&lt;p&gt;In week six nothing happened so it was skipped. Quite nice, actually. In the second half of week six and through week seven I prepared a workshop which I gave on Friday at the &lt;a href=&quot;https://www.meetup.com/de-DE/Frankfurt-Developers/events/237066551/&quot;&gt;Coding Night&lt;/a&gt;. This Coding Night was a special one: The topic was &amp;quot;CodingNight feat. CodeDoor feat. Refugees&amp;quot; which was a collaboration between &lt;a href=&quot;https://www.meetup.com/de-DE/Frankfurt-Developers/&quot;&gt;CodingNight&lt;/a&gt; and &lt;a href=&quot;http://codedoor.org/&quot;&gt;CodeDoor&lt;/a&gt;. CodeDoor is a project which teaches Refugees coding skills, how to build projects and how to get a Job in the programming field. I jumped at the chance to get a spot and share my knowledge so I prepared a Workshop on how to build your own Website with Jekyll and GitHub. Sadly due to problems with the different operating systems we could not finish the workshop and in the end &amp;quot;only&amp;quot; installed Git at every device. I would like to continue my workshop and finish it over time. Maybe at the next Coding Night which I should join more often!&lt;/p&gt;
&lt;p&gt;If you want you can take a look at the &lt;a href=&quot;https://docs.google.com/presentation/d/1F6Xi-zF0YjaQ7q85Ot6jtrrMVD0njcBijXOqNDsM57Y/edit?usp=sharing&quot;&gt;Presentation&lt;/a&gt; or the &lt;a href=&quot;https://lab.kevingimbel.me/workshop/2017/coding-night-x-code-door/&quot;&gt;Workshop Material I wrote&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;sum41&lt;/h3&gt;
&lt;p&gt;I saw sum41 live for the first time ever. When I was younger I liked their music a lot but never had the chance to see them. So this Thursday my girlfriend, a friend, and I went to my favorite concert venue, &lt;a href=&quot;https://schlachthof-wiesbaden.de/&quot;&gt;Schlachthof Wiesbaden&lt;/a&gt;. I did not expect too much from the concert and was surprised how good they actually are. They played a variety of old and new songs and I can recommend going to a concert near you if it isn&#39;t sold out already.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/week-seven/sum41-schlachthof-wiesbaden.jpg&quot; alt=&quot;A bad mobile photograph from the concert.&quot; /&gt;&lt;figcaption&gt;A bad mobile photograph from the concert.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Surprisingly for a punk concert there was a hell of a light show throughout the concert.&lt;/p&gt;
&lt;p&gt;And that&#39;s it. See you next week (or not). 👋&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2017, week 8 and 9</title>
    <link href="https://kevingimbel.de/blog/2017/03/2017-week-8-and-9/"/>
    <updated>2017-03-05T18:43:16Z</updated>
    <id>https://kevingimbel.de/blog/2017/03/2017-week-8-and-9/</id>
    <content type="html">&lt;p&gt;It turns out that a lot of my time is actually spent working or playing games - so there&#39;s not too much to tell and weekly updates become hard-ish to write. I am going to go with bi-weekly or even monthly updates from now on. So this post is week eight and week nine - week nine being the week the &lt;a href=&quot;http://amzn.to/2lLRcN1&quot;&gt;Nintendo Switch&lt;/a&gt; and &lt;a href=&quot;http://amzn.to/2msN60T&quot;&gt;The Legend Of Zelda: Breath of the Wild&lt;/a&gt; were released.&lt;/p&gt;
&lt;h2&gt;Antilopen Gang&lt;/h2&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/week-eight-nine/antilopen-gang-schlachthof-wiesbaden.jpg&quot; alt=&quot;Antilopen Gang live at Schlachthof Wiesbaden&quot; /&gt;&lt;figcaption&gt;Antilopen Gang live at Schlachthof Wiesbaden&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;I had the pleasure to see German Hip-Hop/Rap band &lt;a href=&quot;https://en.wikipedia.org/wiki/Antilopen_Gang&quot;&gt;Antilopen Gang&lt;/a&gt; live for the first time and I was simply blown away. I expected a rather chill concert but got one and a half hours of full blown Hip-Hop and Punk. The Punk elements are &amp;quot;new&amp;quot; within their music and I love it. I can&#39;t wait for the next time I will be able to see them live. 5/7 would recommend. 👍&lt;/p&gt;
&lt;h2&gt;Nintendo Switch&lt;/h2&gt;
&lt;p&gt;As I mentioned I pre-ordered the &lt;a href=&quot;http://amzn.to/2lLRcN1&quot;&gt;Nintendo Switch&lt;/a&gt; and I am in love with it. As expected the Switch is a solid and beautifully made device. It might be a &lt;em&gt;bit&lt;/em&gt; to big for in-hand playing but I got used to it after a few hours. I got Breath of the Wild, the newest title in the &lt;em&gt;The Legend Of Zelda&lt;/em&gt; series with the switch and have been playing it four roughly 10 hours.&lt;/p&gt;
&lt;h2&gt;The Legend Of Zelda: Breath Of The Wild&lt;/h2&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/week-eight-nine/link-standing-around.jpg&quot; alt=&quot;Link standing around in Kakariko Village&quot; /&gt;&lt;figcaption&gt;Link standing around in Kakariko Village&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;I am madly in love. The last time I fell so quickly for a Zelda game was when I first played Majora’s Mask (still my favorite in the series) which I could not let go for a minute. Of course the first things I did was running around and finding out how things work and what the game has to offer, collection everything I found like apples, monster parts, and weapons. Story-wise I found the first Shrines, which are tiny trials (=&lt;em&gt;puzzles&lt;/em&gt;) one needs to solve to gain a Spirit Orb. Apparently, there are no heart containers to collect like in previous games. Spirit Orbs can be traded at shrines to the gods. If Link has enough they offer to trade 4 Spirit Orbs for either a Heart Container or a Stamina vessel, increasing either the number of Hearts or the Stamina available.&lt;/p&gt;
&lt;p&gt;New in Breath Of The Wild is food cooking. Food can be cooked by finding a cooking pot. To cook food you need to open the menu (&lt;em&gt;+&lt;/em&gt;), and then select the ingredient and select &amp;quot;Hold&amp;quot; - up to five ingredients can be put into a pot for cooking. If the ingredients are combined correctly a elexir or dish is the result, as shown below.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/week-eight-nine/breath-of-the-wild-cooking-food.jpg&quot; alt=&quot;Cooking Food&quot; /&gt;&lt;figcaption&gt;Cooking Food&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The cooked food restores more health and - based on ingredients - grands additional effects like increased armor, speed, or stealth. I like this system and it&#39;s fun to experiment with different ingredients.&lt;/p&gt;
&lt;p&gt;That&#39;s it for week 8 and 9. See you next week. Or the week after. 👋&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using the Terminal: The Prompt</title>
    <link href="https://kevingimbel.de/blog/2017/03/using-the-terminal-the-prompt/"/>
    <updated>2017-03-29T17:34:37Z</updated>
    <id>https://kevingimbel.de/blog/2017/03/using-the-terminal-the-prompt/</id>
    <content type="html">&lt;p&gt;The Terminal (or &lt;em&gt;bash&lt;/em&gt;, &lt;em&gt;shell&lt;/em&gt;, &lt;em&gt;console&lt;/em&gt;) is an incredibly powerful program available on (almost) all operating systems such as Mac OS, Windows, or Linux Distributions like Ubuntu, Mint, Fedora, CentOS, ... - you get the picture. Using the terminal in an efficient way to navigate the computer or writing your own programs and snippets to enhance your workflows is incredibly powerful. I already &lt;a href=&quot;https://kevingimbel.de/bash-script-ws/&quot;&gt;wrote about one custom script named &lt;code&gt;ws&lt;/code&gt;&lt;/a&gt; which enhances my daily workflows. This article marks the first of many to come about using and configuring your terminal. This tutorial is written for MacOS and Linux, though most of it will work on Windows 10 if you use Bash.&lt;/p&gt;
&lt;p&gt;To get started with this tutorial open up your terminal. If you don&#39;t know how to open a terminal your first mission is to find out how! (&lt;em&gt;Hint: Google is your friend!&lt;/em&gt;). Once the terminal is open we can start with some basic operations.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; On newer Windows versions you should use Bash if available! This tutorial will probably not work with older Windows Verisons (XP, 7, maybe even 8) and the Windows Terminal (e.g. CMD).&lt;/p&gt;
&lt;p&gt;In this tutorial we will customize the Prompt. To do so, we will use VIM, a command-line Editor available in most systems (including servers) - VIM is powerful but horribly unfamiliar at first. If you prefer to use a different editor do so, but I highly recomment to learn the basics of VIM - it&#39;ll help you once you start interacting with systems that do not have a graphical user interface (e.g. Servers, Containers).&lt;/p&gt;
&lt;h2&gt;Preface: VIM&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Below I explain some basics for using VIM, which is used throughout this tutorial to edit files. If you know how to use VIM, &lt;a href=&quot;https://kevingimbel.de/blog/2017/03/using-the-terminal-the-prompt/#the-prompt&quot;&gt;skip to the next section&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.vim.org/&quot;&gt;VIM&lt;/a&gt; is am incredibly powerful text editor available from the command line. It&#39;s a bit weird to get used to at first but once you know your way around you&#39;ll become quite productive with it. It&#39;s easier to edit config files with VIM compared to opening them in a Editor like Atom or Sublime Text. VIM can be used by executing the &lt;code&gt;vim&lt;/code&gt; command from a terminal which shows the default vim startup screen as seen below.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/terminal/prompt/vim-empty-file.png&quot; alt=&quot;An empty file opened in VIM&quot; /&gt;&lt;figcaption&gt;An empty file opened in VIM&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;To start writing text we need to enter Input Mode. This is done by typing an &lt;code&gt;i&lt;/code&gt;. Afterwards, we can write. VIM has three different modes: Input, Visual and Normal. To leave a mode and return to normal, you need to press &lt;code&gt;ESC&lt;/code&gt;. Visual Mode can be used to select multiple lines or copy/paste things around. Insert Mode is mainly used for writing text and Normal Mode is used for navigation, e.g to move to the Top of a file (&lt;code&gt;gg&lt;/code&gt;) or bottom of a file (&lt;code&gt;SHIFT+G&lt;/code&gt;). VIM works a lot with shortcuts which is why we can edit text files so fast with it. Consider the following example HTML tag.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;some-class-name another-class-name yet more classes&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To remove all classes and add a new class name you would move your mouse to the line, select everything between &lt;code&gt;&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;&lt;/code&gt;, and then enter the new class name. In VIM, you can enter Normal Mode, place the cursor inside the element and press &lt;code&gt;ci&amp;quot;&lt;/code&gt; (&lt;em&gt;change in &amp;quot;&lt;/em&gt;). The entrie text will be removed and VIM enters Insert Mode inside the &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;. To change a word, you write &lt;code&gt;cw&lt;/code&gt;. To write text inside the tag, &lt;code&gt;cit&lt;/code&gt; (change in tag) and the cursor is placed inside the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. Additional to the default movement and replacing there are plugins to make this even faster or smarter, like &lt;a href=&quot;https://github.com/tpope/vim-surround&quot;&gt;surround.vim&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, VIM is quite an editor. Get used to it, you&#39;ll thank me later! What we need to know for basic file editing and this tutorial is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; is pressed to enter Insert Mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ESC&lt;/code&gt; is pressed to exit a mode, e.g. Insert or Visual&lt;/li&gt;
&lt;li&gt;all commands starting with &lt;code&gt;:&lt;/code&gt; are executed by pressing the &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; key, e.g. &lt;code&gt;:wq&amp;lt;Enter&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt; is pressed to enter a command (literally type a &lt;code&gt;:&lt;/code&gt;, e.g. with &lt;code&gt;SHIFT+.&lt;/code&gt; or wherever it is on your keyboard)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:w&lt;/code&gt; means &lt;code&gt;write&lt;/code&gt;. To write a file, press &lt;code&gt;SHIFT+.&lt;/code&gt;, then &lt;code&gt;w&lt;/code&gt;, then &lt;code&gt;Enter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To quit the editor, write &lt;code&gt;:q&lt;/code&gt;, then &lt;code&gt;Enter&lt;/code&gt;. To force quit without saving, type &lt;code&gt;:q!&lt;/code&gt;, then &lt;code&gt;Enter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Moving the cursor is done with UP, DOWN, RIGHT, and LEFT Arrow Keys or &lt;code&gt;h,j,k,l&lt;/code&gt; in Normal Mode or Visual Mode
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt; = left&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; = down&lt;/li&gt;
&lt;li&gt;&lt;code&gt;k&lt;/code&gt; = up&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; = right&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lots of VIM Tips can be found in the &lt;a href=&quot;http://vim.wikia.com/wiki/Vim_Tips_Wiki&quot;&gt;VIM Wikia&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The Prompt&lt;/h2&gt;
&lt;p&gt;One your terminal is open you should see a Dollar Sign (&lt;code&gt;$&lt;/code&gt;) or similar symbol, like shown below.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;~ $&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the Prompt. The Prompt shows the current directory (&lt;code&gt;~&lt;/code&gt;) and most of the time has a fixed sign, e.g. &lt;code&gt;$&lt;/code&gt;. Other prompts might use symbols like &lt;code&gt;# &lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; &lt;code&gt;bash-3.2$&lt;/code&gt; or &lt;code&gt;kevin@ubuntu: $&lt;/code&gt;. The prompt is configurable and comes with different defaults depending on the operating system. So, each line below is how a prompt may look.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;kevin@MacBook-Pro: ~ $&lt;br /&gt;~/Development &lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;&lt;br /&gt;/usr/share/docs %&lt;br /&gt;root@ubuntu: / $&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Prompt can be changed by updating the &lt;code&gt;PS1&lt;/code&gt; environment variable. Environment variables are available to the entire system and can be used to configure programs or create shortcuts. The &lt;code&gt;PS1&lt;/code&gt; is defined inside the &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.zshrc&lt;/code&gt;, or other shell runtime file. If you are not sure which shell your are using, run &lt;code&gt;echo $SHELL&lt;/code&gt; which gives back a string like &lt;code&gt;/bin/zsh&lt;/code&gt; or &lt;code&gt;/bin/bash&lt;/code&gt;. To change the PS1, open the config file (either &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt;) inside an editor like &lt;code&gt;vim&lt;/code&gt; - from the command line.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim $HOME/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the files is not empty, go to the bottom (&lt;code&gt;SHIFT+G&lt;/code&gt; in vim) and enter input mode (press &lt;code&gt;i&lt;/code&gt;). Write the following, then save the file and quit:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PS1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MY CUSTOM PROMPT &quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; To write a file in VIM, press &lt;code&gt;:&lt;/code&gt; and then type &lt;code&gt;w&lt;/code&gt; and press enter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now we need to reload the configuration file (&lt;code&gt;.bashrc&lt;/code&gt;) by typing &lt;code&gt;source ~/.bashrc&lt;/code&gt; into the terminal and hitting enter. The prompt now looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;MY CUSTOM PROMPT&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Congrats, your first custom prompt! That&#39;s not a useful prompt, however, because it will always show &lt;code&gt;MY CUSTOM PROMPT&lt;/code&gt;. A prompt that shows the current directory would be more useful. As it happens, we can use variables inside the Prompt and there are pre-defined variables which hold informations like the current directory, the current logged-in user, the hostname, and man more! Let&#39;s start with the working directory - the directory on the file system we are currently in. The working directory is stored inside the &lt;code&gt;\W&lt;/code&gt; variable and we can use it like so&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim ~/.bashrc
export PS1=&amp;quot;\W $&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save the fie (&lt;code&gt;:wq&lt;/code&gt;) and reload the configuration with &lt;code&gt;source ~/.bashrc&lt;/code&gt;. The prompt now looks like shown below.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/terminal/prompt/prompt-simple-working-directory.png&quot; alt=&quot;A simple prompt showing the Working Directory&quot; /&gt;&lt;figcaption&gt;A simple prompt showing the Working Directory&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The first part before the &lt;code&gt;$&lt;/code&gt; will be different for you, depending on where on your computer you currently are. To find out where you are, type &lt;code&gt;pwd&lt;/code&gt; which shows the current path. You will see that &lt;code&gt;pwd&lt;/code&gt; shows a lot more than what we see in the prompt! That is because the variable &lt;code&gt;\W&lt;/code&gt; holds only the current directory without a full path. To get the full path, we need to use &lt;code&gt;\w&lt;/code&gt;. Change your &lt;code&gt;.bashrc&lt;/code&gt; file so the &lt;code&gt;PS1&lt;/code&gt; uses the &lt;code&gt;\w&lt;/code&gt; variable, reload the configuration (&lt;code&gt;source ~/.bashrc&lt;/code&gt;) and see what happens. Your prompt should look similar to the one below.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/terminal/prompt/prompt-long-working-directory.png&quot; alt=&quot;Using \\w, we get the full path from the HOME directory&quot; /&gt;&lt;figcaption&gt;Using \w, we get the full path from the HOME directory&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The full directory path can be helpful but it can also get really long. I like to have a line break in my &lt;code&gt;PS1&lt;/code&gt; so that I can enter text below the directory listing. To have a line break add a &lt;code&gt;\n&lt;/code&gt; character before &lt;code&gt;$&lt;/code&gt; - the &lt;code&gt;$&lt;/code&gt;-symbol will then move to the next line as shown below.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/terminal/prompt/prompt-with-new-line.png&quot; alt=&quot;A terminal prompt with a new line&quot; /&gt;&lt;figcaption&gt;A terminal prompt with a new line&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Looking good! The last thing we need - or I want - is to have some color in my prompt so that it&#39;s easier to recognize the path or see the hostname - to add color we can either use escape characters like &lt;code&gt;\[\033[34m\]&lt;/code&gt; or - what I prefer - &lt;code&gt;tput&lt;/code&gt;. You can &lt;a href=&quot;http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html&quot;&gt;read more on escape characters&lt;/a&gt; if you wish. I will focus on &lt;a href=&quot;https://linux.die.net/man/1/tput&quot;&gt;&lt;code&gt;tput&lt;/code&gt;&lt;/a&gt;. I like to define my color variables first and then use them later. To define a variable in shell scripting write &lt;code&gt;variableName=&amp;quot;value&amp;quot;&lt;/code&gt;. If you need to execute a program to get your variable value, you have to surround it with &lt;code&gt;$()&lt;/code&gt;. For example to read the content of the file &lt;code&gt;test.txt&lt;/code&gt; into the variable &lt;code&gt;content&lt;/code&gt;, you&#39;d write &lt;code&gt;content=&amp;quot;$(cat test.txt)&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Define and use colors in &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# predefine variables&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;ps1_green&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;tput setaf &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;ps1_yellow&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;tput setaf &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;ps1_reset&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;tput sgr0&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\e&quot;&gt;\e&lt;/span&gt;[m&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PS1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$ps1_green&lt;/span&gt;\w&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$ps1_yellow&lt;/span&gt;\&lt;span class=&quot;token variable&quot;&gt;$$&lt;/span&gt;ps1_reset &quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: A great reference for this technique is &lt;a href=&quot;http://linux.101hacks.com/ps1-examples/prompt-color-using-tput/&quot;&gt;this handy list&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In my testing I needed to use &lt;code&gt;\e[m&lt;/code&gt; to properly reset the new lines. Otherwise commands would sometimes become cluttered when navigating back with &lt;code&gt;arrow up&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So that&#39;s it for the first part of customizing and using the terminal. Below are some of the &lt;code&gt;tput&lt;/code&gt; colors from &lt;a href=&quot;http://linux.101hacks.com/ps1-examples/prompt-color-using-tput/&quot;&gt;linux.101hacks.com&lt;/a&gt; - mostly as a reference for myself. 😁&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tput bold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Turn on &lt;strong&gt;bold&lt;/strong&gt; text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tput smul&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Begin underline mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tput rmul&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Exit underline mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tput sgr0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reset code, turns off all attributes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tput setaf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Set forground color using &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI escape&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tput setab&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Set background color using &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI escape&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And here are the 8 color codes you can combine with &lt;code&gt;tput setaf&lt;/code&gt; and &lt;code&gt;tput setab&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Color&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Black&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Red&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Yellow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Magenta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;6&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Cyan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;7&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;White&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
  </entry>
  
  <entry>
    <title>2017, week 10, 11, 12, 13</title>
    <link href="https://kevingimbel.de/blog/2017/04/2017-week-10-11-12-13/"/>
    <updated>2017-04-02T12:34:13Z</updated>
    <id>https://kevingimbel.de/blog/2017/04/2017-week-10-11-12-13/</id>
    <content type="html">&lt;p&gt;Time sure does fly sometimes! I just realized the last &amp;quot;weekly&amp;quot; review post was from the beginning of march, namely &lt;a href=&quot;https://kevingimbel.de/2017-week-8-and-9/&quot;&gt;week 8 and 9&lt;/a&gt;, so one month ago. In the meantime I played a lot of &lt;a href=&quot;http://amzn.to/2msN60T&quot;&gt;The Legend Of Zelda: Breath Of The Wild&lt;/a&gt;, worked on a Go thing, and went to a concert.&lt;/p&gt;
&lt;h2&gt;Breath Of The Wild&lt;/h2&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/weeks-march/link-death-mountain.jpg&quot; alt=&quot;Link looking onto Death Mountain&quot; /&gt;&lt;figcaption&gt;Link looking onto Death Mountain&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;I am absolutely in love with Breath Of The Wild. It&#39;s such a well made, high-quality game and I can hardly but the &lt;a href=&quot;http://amzn.to/2lLRcN1&quot;&gt;Nintendo Switch&lt;/a&gt; down. Running around and exploring the open areas, climbing mountains, finding &lt;a href=&quot;http://zelda.wikia.com/wiki/Korok&quot;&gt;Korok&lt;/a&gt; hidden everywhere around - it&#39;s just fun! I enjoy running around with no aim for hours and finding new things.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/weeks-march/finding-a-korok.jpg&quot; alt=&quot;Korok are hidden everywhere around Hyrule&quot; /&gt;&lt;figcaption&gt;Korok are hidden everywhere around Hyrule&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Beside spending hours climbing up mountains to find all my little Korok friends I also conquered three of the four &lt;a href=&quot;http://zelda.wikia.com/wiki/Divine_Beast&quot;&gt;Divine Beasts&lt;/a&gt;. The last one missing is &lt;a href=&quot;http://zelda.wikia.com/wiki/Vah_Naboris&quot;&gt;Vah Naboris&lt;/a&gt;, a gigantic camel. I think until &lt;a href=&quot;http://amzn.to/2nNCGZA&quot;&gt;Elder Scrolls Online: Morrowind&lt;/a&gt; is released I will spent all my time running through Hyrule. I cannot recommend Breath Of The Wild enough - it&#39;s fantastic!&lt;/p&gt;
&lt;h2&gt;TheLink.club&lt;/h2&gt;
&lt;p&gt;Some time ago I bought the domain &lt;a href=&quot;http://thelink.club/&quot;&gt;thelink.club&lt;/a&gt; - it&#39;s currently empty but I am working on something more or less actively. It&#39;s a HTTP based API for saving and sharing links in a collaborative way. The basic idea is that I&#39;ll write browser extensions for Chrome, Firefox, Safari, and maybe IE from which you can sent links to an API endpoint. Links are then saved inside MongoDB and can be queried or read out over HTTP. This way the LinkClub lists can be output into a variety of systems using techniques like Ajax.&lt;/p&gt;
&lt;p&gt;It&#39;s a great way to get into Go / Microservice programming with Go and I already learned quite a lot about using the http package in Go. I enjoy working with Go; It&#39;s challenging and new to me. Coming from languages like JavaScript and PHP I enjoy the strictness and the good compiler - and compiler errors - while developing. I might write down a bit of what I learned along the way as a new Go user and what was challenging coming from JavaScript or PHP.&lt;/p&gt;
&lt;h2&gt;Völkerball&lt;/h2&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/weeks-march/volkerball-fog-show.jpg&quot; alt=&quot;What looks like a burning person is actually just fog. 😐&quot; /&gt;&lt;figcaption&gt;What looks like a burning person is actually just fog. 😐&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://www.voelkerball.eu/&quot;&gt;Völkerball&lt;/a&gt; is a Rammstein Cover band and I had the pleasure to see them live. They not only have a full stage setup similar to older shows by Rammstein, they also have a lead singer with a voice similar to Till Lindemann which makes the entire experience of seeing them a lot better. The concert was around 2-2.5h of an amazing live performance with costume changes and a &amp;quot;choreography&amp;quot; similar to what Rammstein performs on stage - minus the fire show. For &amp;quot;Mein Teil&amp;quot; they even had the kettle. If you&#39;re into Rammstein and get the chance to see Völkerball live do it! It&#39;s well worth it.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/weeks-march/volkerball-mein-teil.jpg&quot; alt=&quot;Costume during performance of “Mein Teil”&quot; /&gt;&lt;figcaption&gt;Costume during performance of “Mein Teil”&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Alright, that&#39;s it. See you next month or week or whatever. 👋&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CSS Custom Properties and a new look</title>
    <link href="https://kevingimbel.de/blog/2017/11/css-custom-properties-and-a-new-look/"/>
    <updated>2017-11-26T09:56:13Z</updated>
    <id>https://kevingimbel.de/blog/2017/11/css-custom-properties-and-a-new-look/</id>
    <content type="html">&lt;p&gt;You may have noticed that some things changed on this website. I completly re-wrote the Front-End and created a new theme with a focus on accessibility and well-structured content. On the web, Accessibility is enabled by default; All you need is a good HTML structure and your website is almost ready to go! A second important part of accessibility is color and contrast as well as font sizing. I decided to let users choose their own color scheme, font-size, and dark or light mode - all done with CSS Custom Properties (&lt;abbr title=&quot;Also known as&quot;&gt;aka&lt;/abbr&gt; CSS variables).&lt;/p&gt;
&lt;p&gt;CSS variables are a &lt;a href=&quot;https://www.w3.org/TR/css-variables-1/&quot; title=&quot;Read the CSS variable specs&quot;&gt;native CSS feature&lt;/a&gt; which enables us as developers to re-use colors, font-sizes, and other properties throught our stylesheets. You may think &lt;em&gt;&amp;quot;But wait! Sass, Less, and Stylus had variables for years!&amp;quot;&lt;/em&gt; and you&#39;re right - the pre processors, which generate a CSS file, have had variables for years. What they did not have, however, is the abbility to modify and change these variables on the fly after the CSS had been generated. With CSS Custom Properties and some JavaScript we can modify the variables at runtime and the browser will re-render all pieces of the page which are using the variable - and that&#39;s exactly what I am doing with the settings on this website to change the accent colors and font sizing.&lt;/p&gt;
&lt;p&gt;Below I will explain step by step how CSS variables look, work, and how we can use them to alter the look of a website - even persistent without any backend code!&lt;/p&gt;
&lt;h2&gt;CSS variables&lt;/h2&gt;
&lt;h3&gt;Browser Support&lt;/h3&gt;
&lt;p&gt;Let&#39;s jump directly into browser support, which is looking pretty good in my opinion!&lt;/p&gt;
&lt;p class=&quot;ciu_embed&quot; data-feature=&quot;css-variables&quot; data-periods=&quot;future_1,current,past_1&quot; data-accessible-colours=&quot;true&quot;&gt;
      &lt;picture&gt;
        &lt;source type=&quot;image/webp&quot; srcset=&quot;https://caniuse.bitsofco.de/image/css-variables.webp&quot; /&gt;
        &lt;source type=&quot;image/png&quot; srcset=&quot;https://caniuse.bitsofco.de/image/css-variables.png&quot; /&gt;
        &lt;img src=&quot;https://caniuse.bitsofco.de/image/css-variables.jpg&quot; alt=&quot;Data on support for the css-variables feature across the major browsers from caniuse.com&quot; /&gt;
      &lt;/picture&gt;
    &lt;/p&gt;
&lt;p&gt;&lt;code&gt;77.90%&lt;/code&gt; (as of November 26. 2017) is not perfect but certainly good enough for me and my private website. I&#39;d probably not rely on CSS Custom Properties in client projects yet tho.&lt;/p&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;p&gt;A CSS variable is a word preceded by two dashes (&lt;code&gt;--&lt;/code&gt;), which looks like the following examples.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;--color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #ddd&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--base-font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 12px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--breakpoint-large&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1200px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like any CSS property they &amp;quot;cascade down&amp;quot;. A variable defined at the top of the document on the &lt;code&gt;:root&lt;/code&gt; or &lt;code&gt;html&lt;/code&gt; selector will be defined everywhere in the document. To use a CSS variable we need to get it somehow. It&#39;s not enough to reference it, for example this does not work.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;// Does not work!&lt;br /&gt;.my-selector&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; --color&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With CSS variables we need to retrieve the value by calling a &lt;code&gt;var&lt;/code&gt; function. This function also takes a fallback parameter in case the variable is not set.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;// This does work&lt;br /&gt;.my-selector&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--color&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #333&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.my-selector&lt;/code&gt; will have a color value equal to whatever is stored inside the &lt;code&gt;--color&lt;/code&gt; variable or &lt;code&gt;#333&lt;/code&gt; if it is not set.&lt;/p&gt;
&lt;p&gt;A variable can later be changed to be &amp;quot;locally scoped&amp;quot;. For this example we define a custom property named &lt;code&gt;--color&lt;/code&gt; and set its value to &lt;code&gt;red&lt;/code&gt;. We say all h1 elements should use the &lt;code&gt;--color&lt;/code&gt; variable for their font-color. Then we create a CSS class named &lt;code&gt;local-scope&lt;/code&gt; and inside we change the &lt;code&gt;--color&lt;/code&gt; to &lt;code&gt;blue&lt;/code&gt;. A &lt;code&gt;h1&lt;/code&gt; element inside the &lt;code&gt;local-scope&lt;/code&gt; will use the re-defined color value.&lt;/p&gt;
&lt;p data-height=&quot;350&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;78d261a36ecded2b75d5260cb7056fce&quot; data-default-tab=&quot;result&quot; data-user=&quot;Captain Anonymous&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Variables - Cascading &amp; local scope&quot; data-preview=&quot;true&quot; data-editable=&quot;false&quot; class=&quot;codepen&quot; style=&quot;height: 350px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/Captain%20Anonymous/pen/78d261a36ecded2b75d5260cb7056fce/&quot;&gt;CSS Variables - Cascading &amp; local scope&lt;/a&gt; on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We do not need to change the &lt;code&gt;h1&lt;/code&gt; selector because &lt;code&gt;h1&lt;/code&gt; will always have a font-color equal to &lt;code&gt;--color&lt;/code&gt; - we only need to change the variable inside the local scope. The third &lt;code&gt;h1&lt;/code&gt; element is outside the local scope and so it takes the  original &lt;code&gt;--color&lt;/code&gt; value (red).&lt;/p&gt;
&lt;p&gt;This type of inheritance is a powerful tool CSS has given us (&amp;quot;us&amp;quot; being developers). At runtime, when the website is loaded and all CSS is parsed and the website has been painted to the screen, we can still change these properties on-the-fly with JavaScript and the browser will simply re-render the parts that need changing. Of course, you can already change CSS on the go with JavaScript. You could select for example a bunch of elements by class name and then change their color to be &lt;code&gt;blue&lt;/code&gt; instead of red. With CSS Custom Properties you don&#39;t need to do this! All we need to do is change the variable at a higher level, for example on the &lt;code&gt;body&lt;/code&gt; element as the following example illustrates.&lt;/p&gt;
&lt;p data-height=&quot;350&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;5245628703a6a223215cf5a30cf8294d&quot; data-default-tab=&quot;result&quot; data-user=&quot;Captain Anonymous&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Variables - Changing with JS&quot; data-preview=&quot;true&quot; data-editable=&quot;false&quot; class=&quot;codepen&quot; style=&quot;height: 350px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/Captain%20Anonymous/pen/5245628703a6a223215cf5a30cf8294d/&quot;&gt;CSS Variables - Changing with JS&lt;/a&gt; on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Click on the &lt;code&gt;Change color&lt;/code&gt; button above and all the non-scoped &lt;code&gt;h1&lt;/code&gt; elements will turn green. All we need for this to work is set an inline style on the &lt;code&gt;body&lt;/code&gt; element.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;--color: green;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use this technique to change the secondary and primary colors of my website from the settings menu. &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.com/blob/9f11b96f428f01b1ae14f8673c2e4f48e8ee3b21/themes/next/static/js/a11y.settings.js#L83-L84&quot; title=&quot;View source code on GitHub.com&quot;&gt;These two lines&lt;/a&gt; set the CSS variables &lt;code&gt;--color-accent-primary&lt;/code&gt; and &lt;code&gt;--color-accent-secondary&lt;/code&gt; which by default are dark blue and yellow.&lt;/p&gt;
&lt;h3&gt;Recap&lt;/h3&gt;
&lt;p&gt;So let&#39;s recap this real quick:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSS variables (also called CSS Custom Properties) are a native CSS feature&lt;/li&gt;
&lt;li&gt;They cascade &amp;quot;down&amp;quot; in the CSS, just like any other property (&lt;code&gt;font-size&lt;/code&gt;, &lt;code&gt;color&lt;/code&gt;, etc.)&lt;/li&gt;
&lt;li&gt;They can be locally scoped, that is changed for a certain element and it&#39;s children&lt;/li&gt;
&lt;li&gt;They can be changed with JavaScript at runtime and the browser will re-render every element which uses them&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point it becomes clear why they are an advantage over pre-processor variables. We have more control of changing them and they present us with a powerful new way to implement multiple layouts for our websites.&lt;/p&gt;
&lt;h2&gt;Implementing persistent settings&lt;/h2&gt;
&lt;p&gt;As I mentioned before for my website (this very blog you read right now), the Settings are persistent. If you change the font size or colors and navigate to a new page you&#39;ll still have your custom styles - not my default styles. I do not use any backend software like PHP, Go, or Ruby; Instead this website is a static website, which means all HTML pages are rendered before and then deployed to &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;. So there is no backend which can save your settings and then send them back to your browser once you navigate to a new site.&lt;/p&gt;
&lt;p&gt;The saving part is done on the client side, inside your browser. A browser feature called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&quot;&gt;Local Storage&lt;/a&gt;. Local Storage is a text-based, key-value storage which developers can use to store (small) text based values inside the browser. This allows us to have some sort of persitent storage on the client side without the need for a backend. For my use case (storing settings) this is perfect.&lt;/p&gt;
&lt;p&gt;When you open the settings menu and click &amp;quot;Save&amp;quot; I grab all the values with JavaScript (&lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.com/blob/9f11b96f428f01b1ae14f8673c2e4f48e8ee3b21/themes/next/static/js/a11y.settings.js#L123-L138&quot;&gt;See the code on GitHub&lt;/a&gt;)&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;settingsForm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;submit&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FormData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;settingsForm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; cssRule &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; fd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    lsSettings&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cssRule&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cssRule&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;setStylesAndCreateForgroundColors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lsSettings&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;populateSettingsFromArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lsSettings&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a11y_settings&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lsSettings&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;page-settings--open&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;tabindex&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s quite a lot going on. The important bit for now is &lt;code&gt;localStorage.setItem(&#39;a11y_settings&#39;, JSON.stringify(lsSettings));&lt;/code&gt;. This line sets a new item in the local storage named &lt;code&gt;a11y_settings&lt;/code&gt;, scoped to my website (kevingimbel.com). This JSON object holds all relevant information for your custom settings and looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;--body-invert&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;--color-accent-primary&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#3e934b&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;--color-accent-secondary&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#70cfff&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key of the JSON object is always the CSS variable name, the value is the CSS variable value. With these settings we get the following result.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2017/css-custom-properties/kevingimbel_com-with-custom-settings.png&quot; alt=&quot;The look of kevingimbel.com with the above settings&quot; /&gt;&lt;figcaption&gt;The look of kevingimbel.com with the above settings&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Because we use inline styles to change the CSS variables the HTML element will have the following styles.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token style-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token style language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;--body-invert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;--color-accent-primary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#3e934b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;--color-accent-secondary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#70cfff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the JSON is saved to local storage, I load in on page load and apply it immediately - which happens to be really fast so it seems the styles are not even applyed again! The piece of JavaScript to load the custom styles is placed above all other content, at the beginning of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. To not impact performance too much I minified it and it looks like this.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a11y_settings&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a11y_settings&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; o &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;--body-invert&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dark-mode&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a11y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;a11y&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;o&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unminified the code reads as follows&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a11y_settings&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; styles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a11y_settings&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rule &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; styles&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rule&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;rule&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Check if we &quot;dark mode&quot; is enabled (more below!)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rule&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;--body-invert&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; styles&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;rule&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dark-mode&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// if a11y is defined, save the rules in the object&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a11y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      a11y&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;styles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styles&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens here is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We check if there are custom setting (&lt;code&gt;if( localStorage.getItem(&amp;quot;a11y_settings&amp;quot;) )&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Then we read it in, it&#39;s a JSON string so we need to parse it&lt;/li&gt;
&lt;li&gt;Next we loop through all properties of the JSON, which are key-value pairs like &lt;code&gt;{ &amp;quot;--color&amp;quot;: &amp;quot;#ddd&amp;quot; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Each key-value pair is set as inline style on the documentElement (the &lt;code&gt;html&lt;/code&gt; element)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the &lt;code&gt;--body-invert&lt;/code&gt; value we take an extra step and set a CSS class on the body. This is used for the dark mode which requires the extra class to work properly. The dark-mode is a CSS filter. What I do is invert the body with a CSS Filter so the default light theme becomes a dark theme. The CodePen below shows this in action. By adding the &lt;code&gt;dark-mode&lt;/code&gt; class to the second block we invert all colors, which results in the block being dark.&lt;/p&gt;
&lt;p data-height=&quot;350&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;604946ab15c48299b1f7b54b7a758cfb&quot; data-default-tab=&quot;result&quot; data-user=&quot;Captain Anonymous&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Unknown Pen&quot; data-preview=&quot;true&quot; data-editable=&quot;false&quot; class=&quot;codepen&quot; style=&quot;height: 350px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/Captain%20Anonymous/pen/604946ab15c48299b1f7b54b7a758cfb/&quot;&gt;Unknown Pen&lt;/a&gt; on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That&#39;s exactly what happens when you click &amp;quot;Dark mode&amp;quot; in the settings menu above. So why do we need the class &lt;code&gt;dark-mode&lt;/code&gt;? Because with &lt;code&gt;filter: invert(100%)&lt;/code&gt; everything is inverted including images and videos - which we do not want. These elements should not be inverted so we need to apply a &lt;code&gt;filter: invert(100%)&lt;/code&gt; to them when dark mode is active, which is done with the following CSS snipped.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;body.dark-mode img,&lt;br /&gt;body.dark-mode video,&lt;br /&gt;body.dark-mode iframe&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;invert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This basically means we apply the filter two times, which results in resetting it. The images get inverted from the first rule, then inverted again to normal color.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;// Invert everything&lt;br /&gt;body.dark-mode&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;invert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;// Invert img, video, and iframe again, resulting in resetting the original invert.&lt;br /&gt;body.dark-mode img,&lt;br /&gt;body.dark-mode video,&lt;br /&gt;body.dark-mode iframe&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;invert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&#39;s it for CSS variables and the redesign. You get to choose how my blog looks, what font-size to use and if a dark or light theme is best for you. I might add more options to the settings in the future, but for now I&#39;m happy with the result.&lt;/p&gt;
&lt;p&gt;Got any feedback? Want to tell me how much the news design sucks? Love it? Hit me up on &lt;a href=&quot;https://twitter.com/_kevinatari&quot; title=&quot;Find me on twitter&quot;&gt;Twitter @kevingimbel&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>TIL: Bash select</title>
    <link href="https://kevingimbel.de/blog/2018/04/til-bash-select/"/>
    <updated>2018-04-18T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2018/04/til-bash-select/</id>
    <content type="html">&lt;p&gt;I was recently researching different bash prompts and stumbled upon an &lt;a href=&quot;https://unix.stackexchange.com/a/193660/136550&quot; title=&quot;StackExchange answer for question &#39;In which situations are PS2, PS3, PS4 used as the prompt?&#39;&quot;&gt;StackExchange answer&lt;/a&gt; which explains the different prompt types (&lt;code&gt;PS1&lt;/code&gt;, &lt;code&gt;PS2&lt;/code&gt;, &lt;code&gt;PS3&lt;/code&gt;, and &lt;code&gt;PS4&lt;/code&gt;). The answer explains how the PS3 prompt is used for commands like &lt;code&gt;select&lt;/code&gt;. I did not know about select before, so that&#39;s the real &lt;abbr title=&quot;Today I learned&quot;&gt;TIL&lt;/abbr&gt; here!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[...] PS3 is shown when the select command is waiting for input [...]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the &lt;code&gt;PS3&lt;/code&gt; prompt is shown when a bash program is waiting for user input, and it turns out that the &lt;code&gt;select&lt;/code&gt; bash command is used for creating a &amp;quot;choice&amp;quot; &lt;abbr title=&quot;User Interface&quot;&gt;UI&lt;/abbr&gt; in bash. So what does that mean and how does it work?&lt;/p&gt;
&lt;h2&gt;Asking interactive questions in Bash&lt;/h2&gt;
&lt;p&gt;Let&#39;s assume we have a shell script called &lt;code&gt;make-project&lt;/code&gt; which bootstraps some project stuff, for example configuration files. We could provide the user with an option to choose a format from a list of available configuration formats like &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can handle these options via shell arguments like &lt;code&gt;make-project -format xml&lt;/code&gt;, but we could also ask questions interactively using &lt;code&gt;select&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The script looks like this.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# Default format&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;xml&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# Ask a question&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Which configuration format do you prefer?&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# Create the &quot;UI&quot; with a choice option&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; xml json&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$f&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;# Break to end the select after something was selected&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token builtin class-name&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Format: &lt;span class=&quot;token variable&quot;&gt;$format&lt;/span&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;select&lt;/code&gt; function takes a variable name (&lt;code&gt;f&lt;/code&gt; above) and a list of possible values (&lt;code&gt;xml json&lt;/code&gt;) which is seperated by spaces.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;myvariable&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; value1 value2 value3&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;# $myvariable will be value1, value2, or value3&lt;/span&gt;&lt;br /&gt;  selectedValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$myvariable&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token builtin class-name&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When our little &lt;code&gt;make-project&lt;/code&gt; script is run it would looks like this (in Bash 4.4 on Mac OS):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./make-project.sh
Which configuration format do you prefer?
1) xml
2) json
#? _
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last line, &lt;code&gt;#?&lt;/code&gt;, is the &lt;code&gt;PS3&lt;/code&gt; prompt and &lt;code&gt;_&lt;/code&gt; is the cursor position. The user can now enter a number (1 for &lt;code&gt;xml&lt;/code&gt; or 2 for &lt;code&gt;json&lt;/code&gt;) and the selection would be captured and assigned to the &lt;code&gt;format&lt;/code&gt; variable in our script. If we add &lt;code&gt;export PS3=&amp;quot;Your answer: &amp;quot;&lt;/code&gt; to the script it will replace the default PS3 prompt for your script as shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./make-project.sh
Which configuration format do you prefer?
1) xml
2) json
Your answer: _
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;select&lt;/code&gt; is a clean and simple way to create a interactive UI! I tried the code with the &lt;code&gt;zsh&lt;/code&gt; and &lt;code&gt;fish&lt;/code&gt; shell and it looks the same.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Mastodon Embed Shortcode for hugo</title>
    <link href="https://kevingimbel.de/blog/2018/09/mastodon-embed-shortcode-for-hugo/"/>
    <updated>2018-09-12T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2018/09/mastodon-embed-shortcode-for-hugo/</id>
    <content type="html">&lt;div class=&quot;note warn&quot;&gt;&lt;p&gt;This website &lt;strong&gt;no longer uses Hugo&lt;/strong&gt;. The Mastodon embed doesn&#39;t work as of January 2021 and I&#39;m not sure if I&#39;ll implement it again for 11ty, the new static site generator used for this website.&lt;/p&gt;
&lt;p&gt;For this reason, the embed examples in this post do not work.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You may know that &lt;a href=&quot;https://github.com/kevingimbel/hugo-shortcodes&quot;&gt;I made some shortcodes for Hugo&lt;/a&gt;, the static site generator I am using to create this website. So far I made a shortcode for &lt;a href=&quot;https://caniuse.com/&quot;&gt;caniuse.com&lt;/a&gt; and &lt;a href=&quot;https://codepen.io/&quot;&gt;codepen.io&lt;/a&gt; which allow to embed CodePen and &amp;quot;Can I Use&amp;quot; embeds easily with Hugos build-in Shortcode system.&lt;/p&gt;
&lt;p&gt;Today I made another one which allows embeds from Mastodon, the decentralized Twitter-like social network. An example embed is shown below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mastodon.social/@kevingimbel/100700713283716694&quot;&gt;https://mastodon.social/@kevingimbel/100700713283716694&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Source Code can be found &lt;a href=&quot;https://github.com/kevingimbel/hugo-shortcodes/tree/master/mastodon&quot;&gt;on GitHub.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The shortcode is fairly simple and requires only one attribute: The link to a single toot, e.g. &lt;a href=&quot;https://mastodon.social/@kevingimbel/100700713283716694&quot;&gt;https://mastodon.social/@kevingimbel/100700713283716694&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ mastodon &amp;quot;https://mastodon.social/@kevingimbel/100700713283716694&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additional parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# All parameters
{{ mastodon &amp;quot;https://mastodon.social/@kevingimbel/100700713283716694&amp;quot; &amp;quot;1000&amp;quot; &amp;quot;500&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below is a short description for each parameter&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The link to the status&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;width&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The width of the iframe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;height&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The height of the iframe&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://mastodon.social/@rootsworks/100666238685414786&quot;&gt;https://mastodon.social/@rootsworks/100666238685414786&lt;/a&gt;
&lt;a href=&quot;https://mastodon.social/@prashere/539624&quot;&gt;https://mastodon.social/@prashere/539624&lt;/a&gt;
&lt;a href=&quot;https://octodon.social/@spacekookie/100680807257148198&quot;&gt;https://octodon.social/@spacekookie/100680807257148198&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Safe calc usage in CSS</title>
    <link href="https://kevingimbel.de/blog/2020/01/safe-calc-usage-in-css/"/>
    <updated>2020-01-01T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/01/safe-calc-usage-in-css/</id>
    <content type="html">&lt;p&gt;&lt;code&gt;calc&lt;/code&gt; is a great CSS function to calculate values, e.g. margins or widths. What makes it especially great is that it can combine different values, for example &lt;code&gt;calc(100% - 4rem - 1px)&lt;/code&gt; is valid and works in modern browsers - in simpler words: Calc works with different units like &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;px&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;The problem with calc is that if it doesn&#39;t work you may get a unexpected result. Take the following code for example:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.author&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 4rem 2rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;100% + 4rem + 2px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -2rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code calculates the width of the element by taking into account the paddings and borders, then offsets the element to the left (&lt;code&gt;margin-left: -2rem&lt;/code&gt;) so it appears to be full-width. If calc does not work, the element will just be moved to the left and appears off-center - it looks wrong and unexpected.&lt;/p&gt;
&lt;p&gt;A more robust version is to also calculate the offset. This version is shown below:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.author&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 4rem 2rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;100% + 4rem + 2px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0rem - 2rem - 1px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If calc does not work, both the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;margin-left&lt;/code&gt; are ignored and the box appears just as any other content would, without any offset to the left. The interesting part is the second &lt;code&gt;calc&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.offset-example&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0rem - 2rem - 1px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using &lt;code&gt;0rem - 2rem&lt;/code&gt; we can create a &lt;code&gt;-2rem&lt;/code&gt; offset to the left. The &lt;code&gt;1px&lt;/code&gt; is the border around the parent element which appears on both sides, so we add that to our calculation to stay within the border - otherwise it would look wrong again.&lt;/p&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;Due to changes during development, the changes described here are not available on my website.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hugo: compare dates to flag old content</title>
    <link href="https://kevingimbel.de/blog/2020/01/hugo-compare-dates-to-flag-old-content/"/>
    <updated>2020-01-02T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/01/hugo-compare-dates-to-flag-old-content/</id>
    <content type="html">&lt;p&gt;With the recent redesign of my website I also wanted to add a note to old articles. The IT world is changing fast and information can quickly be outdated, so I decided to add an automatically generated note to every post that is older than 4 years. Using the Hugo &lt;a href=&quot;https://gohugo.io/functions/math/&quot;&gt;Math&lt;/a&gt; function and &lt;a href=&quot;https://gohugo.io/variables/page/#page-variables&quot;&gt;Date&lt;/a&gt; values it can be accomplished in automated-enough fashion.&lt;/p&gt;
&lt;h3&gt;Partial&lt;/h3&gt;
&lt;p&gt;First I created a new partial named &lt;code&gt;single-header.html&lt;/code&gt; and added it to all my &lt;code&gt;single.html&lt;/code&gt; templates. The file contains the following code which I will explain step by step.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;age-note&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;ATTENTION!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;This article is over 4 years old, it may be outdated!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The magic all happens in the first 2 lines. First the &amp;quot;now&amp;quot; time is retrieved, this is the build time - not the current time when the page is loaded in the browser. Then we calculate the different using the Hugo built-in  &lt;code&gt;sub&lt;/code&gt; function, giving the two dates in year format (&lt;code&gt;2020&lt;/code&gt;, &lt;code&gt;2015&lt;/code&gt;, ...) as arguments.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$article_age&lt;/span&gt; :&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sub &lt;span class=&quot;token variable&quot;&gt;$now&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;int &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;.Date.Format &lt;span class=&quot;token string&quot;&gt;&quot;2006&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# For an aricle written in 2013 the code looks like&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# $article_age = sub 2020 2013&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After filling in all variables and doing the subtraction, the &lt;code&gt;$article_age&lt;/code&gt; variable contains an integer, like &lt;code&gt;7&lt;/code&gt; or &lt;code&gt;3&lt;/code&gt;. The next line of code checks if the number &lt;code&gt;$article_age&lt;/code&gt; is greater than 4, which means the article is older than 4 years. If this is true, the note is displayed.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;br /&gt;    $article_age is greater than 4&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because we are doing a &lt;code&gt;gt&lt;/code&gt; (greater than) comparison only articles that are older than 4 years (5 and more) will be flagged.&lt;/p&gt;
&lt;h2&gt;See it in action&lt;/h2&gt;
&lt;p&gt;A live example can be seen on my page, for example in the &lt;a href=&quot;https://kevingimbel.de/blog/2013/08/hello-world/&quot;&gt;oldest post &amp;quot;Hello world&amp;quot;&lt;/a&gt; or in any post from &lt;a href=&quot;http://localhost:1313/blog/#2015&quot;&gt;2015 and before&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hugo: ignore _index.md in list templates</title>
    <link href="https://kevingimbel.de/blog/2020/01/hugo-ignore-index-md-in-list-templates/"/>
    <updated>2020-01-03T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/01/hugo-ignore-index-md-in-list-templates/</id>
    <content type="html">&lt;p&gt;While creating my new website I also added more sections, namely a &lt;a href=&quot;https://kevingimbel.de/blog/&quot;&gt;blog&lt;/a&gt;, &lt;a href=&quot;https://kevingimbel.de/photography/&quot;&gt;photography&lt;/a&gt;, and &lt;a href=&quot;https://kevingimbel.de/art/&quot;&gt;art&lt;/a&gt; section. All of these use list templates and render &amp;quot;article&amp;quot;-like content previews. I wanted to add some content to these lists and Hugo has a special file named &lt;code&gt;_index.md&lt;/code&gt; for that. This file can be used to create index pages for lists.&lt;/p&gt;
&lt;p&gt;When I did that I somehow also included the index files in the post listings which was not what I wanted, so I added a if statement to my &lt;code&gt;article-preview.html&lt;/code&gt; template that is used to render article previews.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;article article--in-list&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-labelledby&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;article-heading-&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    [...]&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;`` checks if the file name is not &lt;code&gt;_index.md&lt;/code&gt; - this will ignore all &lt;code&gt;_index.md&lt;/code&gt; files from being rendered with the &lt;code&gt;article-preview.html&lt;/code&gt; template.&lt;/p&gt;
&lt;p&gt;It does the job but feels wrong and hacky, so if you know a better solution, please let me know on &lt;a href=&quot;https://github.com/kevingimbel/kevingimbel.de&quot; title=&quot;Report issue on GitHub&quot;&gt;GitHub&lt;/a&gt; or &lt;a href=&quot;https://bullgit.party/@kevin&quot; title=&quot;Contact me on Mastodon&quot;&gt;Mastodon&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hugo aliases and redirects</title>
    <link href="https://kevingimbel.de/blog/2020/01/hugo-aliases-and-redirects/"/>
    <updated>2020-01-06T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/01/hugo-aliases-and-redirects/</id>
    <content type="html">&lt;p&gt;With the recent redesign and re-structuring of my website I decided to include year and month in URLs. I previously only used the post title as URL key, so a post with title &lt;code&gt;Hello world&lt;/code&gt; would be available at &lt;code&gt;kevingimbel.de/hello-world&lt;/code&gt;. With the new format this includes the section, year, and month, so for example &lt;code&gt;kevingimbel.de/blog/2020/01/hello-world&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To prevent all old URLs from failing with a 404 I added aliases to all old posts. &lt;a href=&quot;https://gohugo.io/content-management/urls/#aliases&quot;&gt;The documentation on aliases&lt;/a&gt; is pretty short and they&#39;re a straight-forward, powerful tool to make content available under multiple URL paths. Just add an alias list to the front-matter of the post.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;My awesome post&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;aliases&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; /my&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;awesome&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;post/&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; /2020&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;1/&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above would make the post available at &lt;code&gt;kevingimbel.de/2020-1/&lt;/code&gt;, &lt;code&gt;kevingimbel.de/my-awesome-post/&lt;/code&gt;, and &lt;code&gt;kevingimbel.de/blog/2020/01/my-awesome-post&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hugo creates a HTML page for each alias with the following content&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;https://example.com/posts/my-intended-url&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;canonical&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://example.com/posts/my-intended-url&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;robots&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;noindex&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;content-type&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/html; charset=utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;refresh&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0; url=https://example.com/posts/my-intended-url&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The line &lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0; url=https://example.com/posts/my-intended-url&amp;quot;/&amp;gt;&lt;/code&gt; refreshes the page after 0 seconds (immediately) and redirects to the new page at &lt;code&gt;https://example.com/posts/my-intended-url&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With this little bit of extra work all old URLs should work and just redirect to the new pages.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using Archetypes in Hugo</title>
    <link href="https://kevingimbel.de/blog/2020/01/using-archetypes-in-hugo/"/>
    <updated>2020-01-07T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/01/using-archetypes-in-hugo/</id>
    <content type="html">&lt;p&gt;For the longest time I completely ignored &lt;a href=&quot;https://gohugo.io/content-management/archetypes/&quot; title=&quot;Read hugo archetype documentation&quot;&gt;archetypes in hugo&lt;/a&gt;. I&#39;d always copy over the front-matter from the last blog post I wrote and then fill in the things I needed - leading to some mistakes (e.g. using &lt;code&gt;category&lt;/code&gt; instead of &lt;code&gt;categories&lt;/code&gt;) over time.&lt;/p&gt;
&lt;p&gt;Archetypes are easy to use, for example to create this post I ran the following command&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ hugo new blog/2020-01-07-using-archetypes-in-hugo.md&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This copied over the archetype file from &lt;code&gt;archetypes/blog.md&lt;/code&gt; and automatically filled in the post tile, date, last modified date, and the defaults for categories, tags, type, and whatever else I have in the template file. Since Hugo 0.49 archetypes can consist of an entire directory structure that will be created. This is helpful for my &lt;a href=&quot;https://kevingimbel.de/photography/&quot;&gt;photography&lt;/a&gt; section where a post consists of an &lt;code&gt;index.md&lt;/code&gt; file and some images that are automatically loaded. The structure looks like this.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;archetypes&lt;br /&gt;├── blog.md&lt;br /&gt;└── photography&lt;br /&gt;    └── index.md&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this type of post the &lt;code&gt;--kind&lt;/code&gt; flag must be added to the command as shown below.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ hugo new photography/my-photo-post&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will create a directory named &lt;code&gt;my-photo-post&lt;/code&gt; in &lt;code&gt;content/photography/my-photo-post&lt;/code&gt;. Neat!&lt;/p&gt;
&lt;h2&gt;Hugo template magic&lt;/h2&gt;
&lt;p&gt;As if this wasn&#39;t good enough, we can use the full set of Hugo template functions and script even more!&lt;/p&gt;
&lt;p&gt;The archetype for new blog posts I use looks like this.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blog&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; coding&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;lastmod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the first line the post &lt;code&gt;title&lt;/code&gt; is set which is taken from the file name. I use filenames like &lt;code&gt;2020-01-02-a-post.md&lt;/code&gt; on my blog which include the full date and then the post tile and the &lt;code&gt;.md&lt;/code&gt; file extension for markdown. The &lt;code&gt;.md&lt;/code&gt; is automatically stripped away which leaves a string like &lt;code&gt;2020-01-02-a-post&lt;/code&gt;. The first replace (&lt;code&gt;replace .Name &amp;quot;-&amp;quot;, &amp;quot; &amp;quot;&lt;/code&gt;) turns this into &lt;code&gt;2020 01 02 a post&lt;/code&gt;, the next replace (&lt;code&gt;replace (replace .Name &amp;quot;-&amp;quot;, &amp;quot; &amp;quot;) (now.Format &amp;quot;2006 01 02 &amp;quot;) &amp;quot;&amp;quot;&lt;/code&gt;) takes this string and strips the date, see the detailed steps below.&lt;/p&gt;
&lt;p&gt;We assume that &lt;code&gt;.Name&lt;/code&gt; equals &amp;quot;2020-01-02-a-post&amp;quot;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;replace (replace .Name &amp;quot;-&amp;quot;, &amp;quot; &amp;quot;) (now.Format &amp;quot;2006 01 02 &amp;quot;) &amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace &amp;quot;2020 01 02 a post&amp;quot; (now.Format &amp;quot;2006 01 02 &amp;quot;) &amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace &amp;quot;2020 01 02 a post&amp;quot;, &amp;quot;2020 01 02&amp;quot;, &amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;a post&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So after the whole code is executed, we have the plain title. This title is then passed to the function named &lt;code&gt;title&lt;/code&gt; which is doing capitalization, leaving us with a nicely formatted title.&lt;/p&gt;
&lt;p&gt;As shown above, I also set the &lt;code&gt;date&lt;/code&gt; and &lt;code&gt;lastmod&lt;/code&gt; times using Hugo template functions.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;lastmod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both dates will be set to the same as this (new) article hasn&#39;t been modified yet. &lt;code&gt;lastmod&lt;/code&gt; does only change when I update an article later on.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Auto SSL With apache2</title>
    <link href="https://kevingimbel.de/blog/2020/01/auto-ssl-with-apache2/"/>
    <updated>2020-01-08T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/01/auto-ssl-with-apache2/</id>
    <content type="html">&lt;p&gt;Apache 2.4.30 and later supports an experimental module called &lt;code&gt;mod_md&lt;/code&gt; which allows automatic SSL certificate management with Let&#39;s Encrypt as standard provider. This greatly simplifies the management of SSL certificates. Instead of setting up &lt;a href=&quot;https://certbot.eff.org/&quot;&gt;certbot&lt;/a&gt; and cronjobs to automatically renew certs server administrators now only need to add a few lines to their virtual host files.&lt;/p&gt;
&lt;p&gt;This guide assumes the operating system is &lt;em&gt;Ubuntu&lt;/em&gt;! If you use a different distro some commands may be different.&lt;/p&gt;
&lt;h2&gt;Installing a new apache version&lt;/h2&gt;
&lt;p&gt;Since &lt;code&gt;mod_md&lt;/code&gt; is only available with Apache 2.4.30+ we need a fairly new apache version. Sadly, the newest on Ubuntu 18.04. is 2.4.29, so we need to add a new ppa to install from first. &lt;a href=&quot;https://launchpad.net/~ondrej/+archive/ubuntu/apache2&quot;&gt;ondrej/apache2&lt;/a&gt; seems to be what most people use and recommend, so we&#39;ll add this.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; add-apt-repository ppa:ondrej/apache2&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, apache can be updated&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;apt&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; apache2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check the apache version&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ apache2 -v&lt;br /&gt;Server version: Apache/2.4.41 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;Server built:   &lt;span class=&quot;token number&quot;&gt;2019&lt;/span&gt;-08-21T20:43:21&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Enabling mod_md&lt;/h2&gt;
&lt;p&gt;First &lt;code&gt;mod_md&lt;/code&gt; must be enabled. This can be done with &lt;code&gt;a2enmod&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; a2enmod md&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, Apache must be reload with &lt;code&gt;systemctl&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ systemctl reload apache2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the virtual host can be updated as shown in the minimal example below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ServerAdmin mailto:some-valid@email.com
MDCertificateAgreement accepted
MDomain test.kevingimbel.de

&amp;lt;VirtualHost *:80&amp;gt;
        ServerName test.kevingimbel.de
        [...]
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:443&amp;gt;
        ServerName test.kevingimbel.de
        [...]
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following values are required for &lt;code&gt;mod_md&lt;/code&gt; to work properly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ServerAdmin&lt;/code&gt; with valid e-mail address&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServerName&lt;/code&gt; in VirtualHost&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MDomain&lt;/code&gt; with valid domain name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MDCertificateAgreement accepted&lt;/code&gt; to accept the ACME terms of service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After making the changes, the server must be reloaded again.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ systemctl reload apache2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the values in place the server will contact Let&#39;s Encrypt and retrieve a certificate, wire it up in the backend, and serve the website over https. The &lt;a href=&quot;https://httpd.apache.org/docs/trunk/mod/mod_md.html&quot; title=&quot;Read the Apache Documentation on mod_md&quot;&gt;mod_md documentation&lt;/a&gt; contains more configuration options as well as information on how to use a different Certificate Authority.&lt;/p&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;h3&gt;Update 13.01.2020&lt;/h3&gt;
&lt;p&gt;Slight grammatical adjustments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Replaced double &amp;quot;supports&amp;quot; in first sentence with &amp;quot;allows&amp;quot; and &amp;quot;setup&amp;quot; with &amp;quot;management&amp;quot;&lt;/li&gt;
&lt;li&gt;Replaced &amp;quot;setups&amp;quot; with &amp;quot;setup and renewal&amp;quot; in sub headline&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Two Factor Auth, Password managers, and cloud sync</title>
    <link href="https://kevingimbel.de/blog/2020/01/two-factor-auth-password-managers-and-cloud-sync/"/>
    <updated>2020-01-25T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/01/two-factor-auth-password-managers-and-cloud-sync/</id>
    <content type="html">&lt;p&gt;For years I have not given much thought to passwords, security, or how to manage my passwords efficiently and securely. I usually would either save them in the browser or just re-use passwords (which of course is the worst). Around 7-8ish years ago I began to use password managers and password generators, and when &lt;abbr title=&quot;Two Factor Authentication, a method of authentication where two parts are needed: A Password and a generated token&quot;&gt;2FA&lt;/abbr&gt; became a more common thing I was enabling that on all services I could.&lt;/p&gt;
&lt;p&gt;2FA (Two Factor Authentication) is a method of authentication where two parts are needed: A Password and a generated token, this token can be hardware based (e.g. a tiny usb key that generates a token) or they can be time-based which is the most common usage I&#39;d say. I used Google Authenticator for this for years and all was good - until I had to factory-reset my phone and lost my Google Authenticator app with all its 2FA settings.&lt;/p&gt;
&lt;h2&gt;Why I lost all my 2FA tokens and settings&lt;/h2&gt;
&lt;p&gt;I falsely assumed that &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&quot;&gt;Google Authenticator&lt;/a&gt; would somehow save the Time-based Tokens with my Google Account but that is not the case - they only exist on the device itself. Looking back that is probably the right choice, but I somehow missed it and only realized after receiving my replacement Pixel phone and setting it up again.&lt;/p&gt;
&lt;p&gt;&amp;quot;Alright&amp;quot;, I thought, &amp;quot;this is bad but I can just redo the setup and I&#39;m good to go.&amp;quot; - Well, no. Since 2FA is a security feature you&#39;ll need to have a token ready when you want to deactivate it, which is needed in most cases to setup a new 2FA device. For this exact scenario you usually get a bunch of pre-created tokens, usually labeled as &amp;quot;Recovery codes&amp;quot; or &amp;quot;Recovery tokens&amp;quot;.&lt;/p&gt;
&lt;h2&gt;Recovery codes&lt;/h2&gt;
&lt;p&gt;I had almost none saved. &amp;quot;Past me&amp;quot; was a idiot and didn&#39;t save the recovery codes properly or saved them on some old, long gone computer. I was left without recovery codes, without a working 2FA device, and with no way of resetting 2FA without codes. I checked my computer to find services I was still logged-in to and reset the 2FA settings - or recreated them - where ever it was possible without supplying a code.&lt;/p&gt;
&lt;p&gt;I lost all access to my Discord account and had to create a new one because there is no way of resetting 2FA.&lt;/p&gt;
&lt;p&gt;I could recover all really important stuff tho, like GitHub. I saved my recovery codes this time and made sure they are stored in a secure place - a good offline place would be a USB drive, a print-out in a safe; A good online place might be a special password manager database.&lt;/p&gt;
&lt;h2&gt;Password manager&lt;/h2&gt;
&lt;p&gt;Around 2012/2013 i started using a Password Manager called KeyPassX. I meanwhile switched to &lt;a href=&quot;https://keepassxc.org/&quot;&gt;KeyPassXC&lt;/a&gt; which is a community driven fork because the original KeyPassX does no longer receive updates. KeyPassXC has a great MacOS App and works well with multiple databases, so I can split my passwords across multiple databases, e.g. one for work and some for private usage.&lt;/p&gt;
&lt;p&gt;It supports auto-fill with browser plugins and works completely offline. There is no syncing to a third-party cloud, no auto backups in the cloud, no anything; By default it is all on your local computer in an encrypted database file protected by password or key.&lt;/p&gt;
&lt;p&gt;On my phone I have used &lt;a href=&quot;https://play.google.com/store/apps/details?id=keepass2android.keepass2android&amp;amp;hl=en_US&quot;&gt;Keepass2Android&lt;/a&gt; for some years now and it works like a charm. Keepass2Android can read, save, and merge the database in case it is changed on my computer and then synced to the phone or vice versa.&lt;/p&gt;
&lt;h2&gt;2FA Tokens&lt;/h2&gt;
&lt;p&gt;For 2FA tokens I now use &lt;a href=&quot;https://github.com/andOTP/andOTP&quot;&gt;andOTP&lt;/a&gt;, an open source 2FA token generator app for Android which supports encrypted backups.&lt;/p&gt;
&lt;h2&gt;Sync and cloud storage&lt;/h2&gt;
&lt;p&gt;As a cloud storage solution I am using Nextcloud. Nextcloud is open source, as are all their official extensions, see &lt;a href=&quot;https://github.com/nextcloud&quot; title=&quot;View open source code by Nextcloud on GitHub&quot;&gt;github.com/nextcloud&lt;/a&gt;. Another benefit for me is that Nextcloud is developed and maintained by a Germany-based company, which is a nice added bonus and always good to see, since a lot of software comes out of the Silicon Valley filter bubble. I&#39;m increasingly looking to find software and services that do not rely on USA-based infrastructure, money, companies, or services. While laws such as &lt;abbr title=&quot;General Data Protection Law&quot;&gt;GDPR&lt;/abbr&gt; protect European citizens even if the companies themselves are not within the EU, I feel better when the companies I do business with are closer to me, geographically and law-&lt;em&gt;ly&lt;/em&gt; . Especially when it comes to storing my files.&lt;/p&gt;
&lt;p&gt;Anyhow, Nextcloud is the sync and &amp;quot;backup&amp;quot; solution in my stack. It syncs the database files between my computer and my phone so that I can always access all passwords whenever I need them. On my computer and phone the databases are protected by passwords, all communication to Nextcloud is done over a encrypted connection (HTTPS), too.&lt;/p&gt;
&lt;p&gt;I&#39;ve been using this solution for a bit over two years now and I am very happy with it. Before switching to Nextcloud I used Google Drive to sync my KeyPassX database files, but I am growing increasingly distrustful of Google, so I am trying to pull as much as I can away from its services. Nextcloud works just as good if not better than the Google Drive or Dropbox sync solutions.&lt;/p&gt;
&lt;p&gt;Thank you for coming to my TED Talk, see ya.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>No Tracking</title>
    <link href="https://kevingimbel.de/blog/2020/01/no-tracking/"/>
    <updated>2020-01-29T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/01/no-tracking/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I don&#39;t track you.&lt;/strong&gt; That&#39;s a promise and a statement, this website works without Tracking.&lt;/p&gt;
&lt;p&gt;Inspired by &lt;a href=&quot;https://laurakalbag.com/i-dont-track-you/&quot;&gt;Laura Kalbag&lt;/a&gt;, who was inspired by &lt;a href=&quot;https://thefox.is/&quot;&gt;the footer text on Karolina Szczur’s website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;The reason I do not use tracking is an idealistic one. I no longer want to collect data for Google, and I do not want to support trackable users across websites.&lt;/p&gt;
&lt;p&gt;Data sharing on the web is absolutely crazy, as this example of USAToday shows - &lt;abbr title=&quot;General Data Protection Law&quot;&gt;GDPR&lt;/abbr&gt; is saving us Europeans again tho.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mastodon.sdf.org/@tomasino/103536972269541464&quot;&gt;https://mastodon.sdf.org/@tomasino/103536972269541464&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I do not wish to be part of this, so this website uses no tracking codes. No ads, no &lt;abbr title=&quot;Content Delivery Network, a central storage for assets such as JavaScript libraries&quot;&gt;CDN&lt;/abbr&gt;. For Embeds I have copied the JavaScript and inlined it so that it does not do any requests to third-party websites when possible.&lt;/p&gt;
&lt;h2&gt;What can YOU do?&lt;/h2&gt;
&lt;h3&gt;Firefox + Addons&lt;/h3&gt;
&lt;p&gt;I recommend &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/&quot;&gt;Mozilla Firefox&lt;/a&gt; as a more privacy-focused browser, with the following extensions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/privacy-badger17/&quot;&gt;Privacy Badger&lt;/a&gt; by EFF&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/ublock-origin&quot;&gt;uBlock Origin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Privacy Badger blocks tracking tools and uBlock Origin blocks a whole lot of stuff, including ads (see &lt;a href=&quot;https://github.com/gorhill/uBlock&quot;&gt;github.com/gorhill/uBlock&lt;/a&gt; for more information). I&#39;m no longer using the web without these two. Both addons are also available for Firefox on Android.&lt;/p&gt;
&lt;h3&gt;Remove Analytics from your website&lt;/h3&gt;
&lt;p&gt;If you do not need it, remove Analytics from your website. If you need it, use a privacy-focused alternative to Google Analytics such as &lt;a href=&quot;https://matomo.org/&quot;&gt;Matomo&lt;/a&gt; (previously known as Piwik).&lt;/p&gt;
&lt;p&gt;By not using tracking software - and not relying on hundreds (or tens) of external libraries and tools you can make the web better for everyone.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Random Theme</title>
    <link href="https://kevingimbel.de/blog/2020/03/random-theme/"/>
    <updated>2020-03-24T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/03/random-theme/</id>
    <content type="html">&lt;p&gt;I&#39;ve decided to add some randomness to this website! You may noticed that the two main colors change on every page reload - there&#39;s a fixed number of &amp;quot;themes&amp;quot; available and they change at random.&lt;/p&gt;
&lt;p&gt;To accomplish this I used the following JavaScript.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;window&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; theme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kgde_theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;colorMain&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; colorSecondary&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;colors&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;--color-main:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;colorMain&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;--color-secondary:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;colorSecondary&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// [dark-color, light-color]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Color combinations taken from https://botsin.space/@accessibleColors&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; themes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#123D3C&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#90F072&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#403D58&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#dea584&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#400E3B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#DCC78A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#17098D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#EADD1C&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#233B07&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#FFDD6D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;colorMain&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; colorSecondary&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; themes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; themes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;--color-main:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;colorMain&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;--color-secondary:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;colorSecondary&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;DOMContentLoaded&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; schema_btn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#btn_schema&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; theme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kgde_theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        schema_btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Use random color theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        schema_btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Keep current color theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    schema_btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;display &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;block&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    schema_btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kgde_theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kgde_theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;colors&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;colorMain&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; colorSecondary&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quite a lot isn&#39;t it? Let&#39;s break that down.&lt;/p&gt;
&lt;h3&gt;Random array elements&lt;/h3&gt;
&lt;p&gt;The theme logic is all in this JavaScript snippet. By using nested array and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;destructing assignment&lt;/a&gt; we can get a theme consisting of a primary and secondary color. These color combinations are hand-picked from the &lt;a href=&quot;https://botsin.space/@accessibleColors&quot;&gt;@accessibleColors&lt;/a&gt; bot.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; themes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#123D3C&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#90F072&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#403D58&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#dea584&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#400E3B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#DCC78A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#17098D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#EADD1C&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#233B07&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#FFDD6D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;colorMain&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; colorSecondary&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; themes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; themes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Having the values I then store them in a &lt;code&gt;localStorage&lt;/code&gt; entry if the user clicks on &amp;quot;Keep this color theme&amp;quot;. To do this, we first need to get the button element and the local storage item like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; schema_btn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#btn_schema&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; theme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kgde_theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can decide what text should be inside the button...&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    schema_btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Use random color theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    schema_btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Keep current color theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;... and set the button to &lt;code&gt;display: block&lt;/code&gt; - by default it is hidden with &lt;code&gt;display: none&lt;/code&gt; so that people without JavaScript enabled don&#39;t see a useless button (they also don&#39;t see random themes!).&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;schema_btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;display &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;block&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally, we assign a &lt;code&gt;click&lt;/code&gt; event listener and check if the &lt;code&gt;theme&lt;/code&gt; is set, which means the button click resets the current theme and reloads the site, or if the theme is not set and the current schema should be safed.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;schema_btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kgde_theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kgde_theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;colors&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;colorMain&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; colorSecondary&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#39;t like the current colors just refresh until you find the one you like. 😁&lt;/p&gt;
&lt;p&gt;If this is a horrible addition to my website and you want a permanent off button - please &lt;a href=&quot;https://bullgit.party/@kevin&quot; title=&quot;Contact me on Mastodon&quot;&gt;let me know&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Terrasave</title>
    <link href="https://kevingimbel.de/blog/2020/04/terrasave/"/>
    <updated>2020-04-24T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/04/terrasave/</id>
    <content type="html">&lt;p&gt;I just released a tiny tool function I&#39;ve been using for some time called &lt;a href=&quot;https://github.com/kevingimbel/terrasave&quot; title=&quot;View terrasave source code on GitHub&quot;&gt;terrasave&lt;/a&gt;. It&#39;s a Bash / Fish function that prevents you from running &lt;code&gt;terraform&lt;/code&gt; without the &lt;code&gt;-target&lt;/code&gt; option.&lt;/p&gt;
&lt;h2&gt;Why does this exist?&lt;/h2&gt;
&lt;p&gt;In terraform it is incredibly easy to destroy things with &lt;code&gt;terraform apply&lt;/code&gt;. If you run apply terraform shows a huge output and sometimes you may overlook a thing being &amp;quot;replaced&amp;quot; instead of updated. Once upon a time I destroyed a MongoDB Atlas Cluster this way and lost all its data, because the &amp;quot;must be replaced&amp;quot; was hidden in a lot of terraform output and I simply didn&#39;t see it. I only realized when terraform logged &amp;quot;Still destroying cluster...&amp;quot; to the console.&lt;/p&gt;
&lt;p&gt;Some terraform resources, like Amazon ECS Services, are not idempotent, so they change on every apply. This cluttered my terminal with stuff I could ignore on every change as well as unnecessary updates to the infra (ECS Services being replaced despite no changes were made).&lt;/p&gt;
&lt;p&gt;To prevent this, I forced myself to only use terraform with the -target switch, and this tiny script helps me accomplish that.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;After &lt;a href=&quot;https://github.com/kevingimbel/terrasave#installation&quot; title=&quot;View installation instructions on GitHub.com&quot;&gt;installing the tool&lt;/a&gt; you can just work as you&#39;d normally do: &lt;code&gt;terrasave&lt;/code&gt; acts as a shell alias for &lt;code&gt;terraform&lt;/code&gt; so whenever you run &lt;code&gt;terraform&lt;/code&gt; in a terminal, the call goes &amp;quot;through&amp;quot; the &lt;code&gt;terrasave&lt;/code&gt; function. If the function detects &lt;code&gt;apply&lt;/code&gt; but not &lt;code&gt;-target&lt;/code&gt; it outputs an error and exits.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ terraform apply&lt;br /&gt;Please run &lt;span class=&quot;token string&quot;&gt;&quot;terraform apply&quot;&lt;/span&gt; with -target option&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you &lt;strong&gt;must&lt;/strong&gt; run terraform without a target you can do so by specifying an environment variable:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token assign-left variable&quot;&gt;TERRAFORM_SAVE_DISABLE_I_KNOW_WHAT_I_DO&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; terraform apply&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can get the source code and installation instructions on &lt;a href=&quot;https://github.com/kevingimbel/terrasave&quot;&gt;github.com/kevingimbel/terrasave&lt;/a&gt;. Hopefully this little tool will save your infra. :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Night on Earth</title>
    <link href="https://kevingimbel.de/blog/2020/04/night-on-earth/"/>
    <updated>2020-04-27T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/04/night-on-earth/</id>
    <content type="html">&lt;p&gt;Last weekend I finished &amp;quot;&lt;a href=&quot;https://www.netflix.com/de-en/title/80218938&quot; title=&quot;View Night On Earth on Netflix.com&quot;&gt;Night on Earth&lt;/a&gt;&amp;quot; a Netflix documentation about animal life during the night, filmed with super light sensitive cameras making the darkest night look like early evening; It&#39;s an interesting look into the night and quite entertaining and educating.&lt;/p&gt;
&lt;p&gt;You can find the documentation &lt;a href=&quot;https://www.netflix.com/de-en/title/80218938&quot; title=&quot;View Night On Earth on Netflix.com&quot;&gt;here on Netflix&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;★★★★☆&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>DIY Iced Tea</title>
    <link href="https://kevingimbel.de/blog/2020/04/diy-iced-tea/"/>
    <updated>2020-04-29T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/04/diy-iced-tea/</id>
    <content type="html">&lt;p&gt;A few days ago I made my own Iced Tea and I thought I&#39;d share this quick &#39;n easy recipe on the blog.&lt;/p&gt;
&lt;h3&gt;Ingredients for 1 liter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Half a lemon&lt;/li&gt;
&lt;li&gt;A  bit of Agave syrup (1-2 table spoon)&lt;/li&gt;
&lt;li&gt;300ml fresh brewed black tea (I used a cheap Earl Grey)&lt;/li&gt;
&lt;li&gt;700ml water (I used with gas, can also be without!)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Steps&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Boil water and make black tea, let it sit for longer, we need it to be strong (~10-15min)&lt;/li&gt;
&lt;li&gt;Cut lemon and squeeze out juice&lt;/li&gt;
&lt;li&gt;Mix lemon and Black Tea, e.g. directly into a bottle&lt;/li&gt;
&lt;li&gt;Fill-up with water&lt;/li&gt;
&lt;li&gt;Add Agave syrup&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2020/diy-iced-tea/icedtea.jpg&quot; alt=&quot;A bottle of self made iced tea&quot; /&gt;&lt;figcaption&gt;A bottle of self made iced tea&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;I left mine in the fridge to let it cool off until the next day. As a bottle I used an old Club Mate Bottle, I usually keep a few of them around for DIY drinks. Hope you enjoy! 🍵🥶&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Docker Apache Proxy Setup</title>
    <link href="https://kevingimbel.de/blog/2020/05/docker-apache-proxy-setup/"/>
    <updated>2020-05-05T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/05/docker-apache-proxy-setup/</id>
    <content type="html">&lt;p&gt;In this post I&#39;d like to detail how I am managing docker containers behind an apache2 proxy on a Ubuntu 18.04. server. I&#39;m using one Apache server to route traffic from multiple sub-domains to docker containers all running with docker-compose. This setup is &lt;em&gt;not&lt;/em&gt; automated and the containers do not need to interact with each other; It&#39;s just how I run software for my private usage.&lt;/p&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Let&#39;s start with an overview image, because this can be quite confusing.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/images/posts/2020/docker-apache-proxy/apache-docker-server-diagram.svg&quot; alt=&quot;A diagram showing how traffic comes through Apache and is routed to different docker containers exposing services on different TCP ports&quot; /&gt;&lt;figcaption&gt;A diagram showing how traffic comes through Apache and is routed to different docker containers exposing services on different TCP ports&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The diagram shows how traffic comes from the public internet and hits Apache. This happens for example when you type https://kevingimbel.de into your browser and hit enter. Apache then decides which service running should respond to the request, in most scenarios this will be some PHP code (like WordPress). When we want to use NodeJS or run software from docker we usually do not bind to port 80 (HTTP) or 443 (HTTPS) directly. Instead we need to proxy the request.&lt;/p&gt;
&lt;p&gt;In order to make our services accessible without knowing the ports of each container we&#39;ll setup a virtual host in Apache.&lt;/p&gt;
&lt;p&gt;The goal is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access each service through a nice domain (like &lt;code&gt;app1.kevingimbel.de&lt;/code&gt; instead of &lt;code&gt;kevingimbel.de:8081&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Have SSL for every service&lt;/li&gt;
&lt;li&gt;Get new certificates automatically&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Starting services with docker-compose&lt;/h2&gt;
&lt;p&gt;We&#39;ll start with the docker service. As an example I&#39;m using one of my projects, &lt;a href=&quot;https://github.com/kevingimbel/fakedata_server&quot;&gt;&lt;code&gt;fakedata_server&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The docker compose file looks like this&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;fakedata_server&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kevingimbel/fakedata_server&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;latest&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; 8085&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8000&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; unless&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;stopped&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can place this in some directory, I&#39;m usually using &lt;code&gt;$HOME/app-name&lt;/code&gt;, so for example &lt;code&gt;/home/myuser/fakedata-server/docker-compose.yml&lt;/code&gt;. Then we can run &lt;code&gt;docker-compose up -d&lt;/code&gt;. The service will now run and restart forever until it is stopped.&lt;/p&gt;
&lt;p&gt;If we use &lt;code&gt;curl&lt;/code&gt; we can reach the service.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -vL localhost:8085&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -vL localhost:8085&lt;br /&gt;* Rebuilt URL to: localhost:8085/&lt;br /&gt;*   Trying &lt;span class=&quot;token number&quot;&gt;127.0&lt;/span&gt;.0.1&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;br /&gt;* TCP_NODELAY &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt;&lt;br /&gt;* Connected to localhost &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;127.0&lt;/span&gt;.0.1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; port &lt;span class=&quot;token number&quot;&gt;8085&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#0)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; GET / HTTP/1.1&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Host: localhost:8085&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; User-Agent: curl/7.58.0&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Accept: */*&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; HTTP/1.1 &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt; OK&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; Content-Type: text/plain&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;utf-8&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; Server: Rocket&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; Content-Length: &lt;span class=&quot;token number&quot;&gt;515&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; Date: Tue, 05 May &lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt; 09:35:45 GMT&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Welcome to the fakedata_generator example implementation as a web server&lt;br /&gt;&lt;br /&gt;Available routes:&lt;br /&gt;&lt;br /&gt;    /gen/email&lt;br /&gt;    /gen/username&lt;br /&gt;    /gen/domain&lt;br /&gt;    /gen/http_method&lt;br /&gt;    /gen/ipv4&lt;br /&gt;    /gen/enum_r/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    /gen/corpora/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Inputs:&lt;br /&gt;&lt;br /&gt;/gen/enum_r/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;Specify input as comma-seperated strings, e.g.&lt;br /&gt;/gen/enum_r/hello,world,this,is,a,tes&lt;br /&gt;/gen/enum/horse,cat,dog&lt;br /&gt;/gen/enum/active,inactive,unknown&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;/gen/corpora/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;Specify a corpora dataset, e.g.&lt;br /&gt;/gen/corpora/horse&lt;br /&gt;/gen/corpora/cat&lt;br /&gt;/gen/corpora/fabric&lt;br /&gt;&lt;br /&gt;* Connection &lt;span class=&quot;token comment&quot;&gt;#0 to host localhost left intact&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; localhost:8085/gen/email&lt;br /&gt;benefritz@make.org&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The service is working. Yay! Off to the next topic!&lt;/p&gt;
&lt;h2&gt;Proxying with apache2&lt;/h2&gt;
&lt;p&gt;Now that we have a service running we want to make it accessible with a nice clean URL. We&#39;ll use &lt;code&gt;fs.bullgit.science&lt;/code&gt; for this purpose, because that&#39;s where the service is actually running: &lt;a href=&quot;https://fs.bullgit.science/&quot;&gt;https://fs.bullgit.science&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First we need to create some apache files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Host in &lt;code&gt;/etc/apache2/sites-available/fakedata-server.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generic Domain config in &lt;code&gt;/etc/apache2/sites-available/domains.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Virtual Host&lt;/h3&gt;
&lt;p&gt;The virtual host only contains proxy commands and redirects. We want to redirect all HTTP traffic to HTTPS and all HTTPS traffic should be proxied to the port out service is running on (&lt;code&gt;8085&lt;/code&gt; in the example above).&lt;/p&gt;
&lt;p&gt;The first part of the config is the redirect. Important here is the &lt;strong&gt;ServerName&lt;/strong&gt;! This tells apache for which sub-domain this virtual host should be routed to!&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;VirtualHost&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;*:&lt;/span&gt;80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	ServerName fs.bullgit.science&lt;br /&gt;	Redirect permanent / https://fs.bullgit.science/&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;VirtualHost&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next part is the SSL/HTTPS handler. After the redirect this handler will do the proxying.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ServerName&lt;/code&gt; tells apache which virtual host to use (if we have multiple)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SSLEngine On&lt;/code&gt; turns on SSL encryption&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is all that is needed in the virtual host for the auto-ssl feature! The rest of the config will be handled in the &lt;code&gt;domains.conf&lt;/code&gt; as described below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ProxyPreserveHost On&lt;/code&gt; passes on the &lt;code&gt;Host&lt;/code&gt; header from the request (see &lt;a href=&quot;https://httpd.apache.org/docs/current/mod/mod_proxy.html#proxypreservehost&quot;&gt;documentation&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ProxyPass / http://127.0.0.1:8085/&lt;/code&gt; - this tells apache to sent the traffic to port 8085 on localhost (&lt;code&gt;127.0.0.1&lt;/code&gt; is always the IP of the local server)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ProxyPassReverse / http://127.0.0.1:8085/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last two lines just give some extra logs, it&#39;s always good to have them in case something doesn&#39;t work or if a tool like &lt;a href=&quot;https://fail2ban.org/&quot;&gt;fail2ban&lt;/a&gt; should be used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ErrorLog ${APACHE_LOG_DIR}/fs.bullgit.science-error.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CustomLog ${APACHE_LOG_DIR}/fs.bullgit.science-access.log combined&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;VirtualHost&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;*:&lt;/span&gt;443&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	ServerName fs.bullgit.science&lt;br /&gt;&lt;br /&gt;	SSLEngine On&lt;br /&gt;&lt;br /&gt;	ProxyPreserveHost On&lt;br /&gt;&lt;br /&gt;	ProxyPass / http://127.0.0.1:8085/&lt;br /&gt;	ProxyPassReverse / http://127.0.0.1:8085/&lt;br /&gt;&lt;br /&gt;	ErrorLog ${APACHE_LOG_DIR}/fs.bullgit.science-error.log&lt;br /&gt;	CustomLog ${APACHE_LOG_DIR}/fs.bullgit.science-access.log combined&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;VirtualHost&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can view the full apache2 configuration below.&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;Click to view file /etc/apache2/sites-available/fakedata-server.conf&lt;/summary&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;VirtualHost *:80&amp;gt;
	ServerName fs.bullgit.science
	Redirect permanent / https://fs.bullgit.science/
&amp;lt;/VirtualHost&amp;gt;
&lt;p&gt;&amp;lt;VirtualHost *:443&amp;gt;
ServerName fs.bullgit.science&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SSLEngine On

ProxyPreserveHost On

ProxyPass / http://127.0.0.1:8085/
ProxyPassReverse / http://127.0.0.1:8085/

ErrorLog ${APACHE_LOG_DIR}/fs.bullgit.science-error.log
CustomLog ${APACHE_LOG_DIR}/fs.bullgit.science-access.log combined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;/VirtualHost&amp;gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;The &lt;code&gt;domains.conf&lt;/code&gt; is our SSL config. We will add all sub-domains we want to have covered by our SSL certificate to this configuration. The details on how to enable mod_md for automatic SSL certs with apache2 are written below, the config file looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;ServerAdmin mailto:yourname@yourserver.com&lt;br /&gt;MDCertificateAgreement accepted&lt;br /&gt;MDomain bullgit.science fs.bullgit.science service-b.bullgit.science&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;VirtualHost&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;_default_:&lt;/span&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	DocumentRoot &quot;/var/www/html/&quot;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;VirtualHost&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above config will generate a SSL certificate valid for the domains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bullgit.science&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.bullgit.science&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service-b.bullgit.science&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;ve written about &lt;a href=&quot;https://kevingimbel.de/blog/2020/01/auto-ssl-with-apache2/&quot; title=&quot;Read more about managing SSL certificates with Apache2&quot;&gt;Auto-SSL with Apache2&lt;/a&gt; in the past and I&#39;m using this feature for my docker containers, too. This way I can have free SSL certificates without the need to manage anything manually.&lt;/p&gt;
&lt;p&gt;The Server must run Apache 2.4.30 or newer in order to use the Auto-SSL feature. Instructions on how to upgrade can be found &lt;a href=&quot;https://kevingimbel.de/blog/2020/01/auto-ssl-with-apache2/&quot; title=&quot;Read more about managing SSL certificates with Apache2&quot;&gt;in my article on Apache2 and Auto-SSL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once everything is setup we need to enable the configs.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; a2ensite fakedata-server.conf domains.conf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then restart the apache2 server.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl restart apache2&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt;It appears that apache needs to be &lt;em&gt;restarted&lt;/em&gt; not just &lt;em&gt;reloaded&lt;/em&gt; when a new subdomain is added to the certificate!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now you should be able to access the docker container on a subdomain. For example, &lt;a href=&quot;https://fs.bullgit.science/&quot;&gt;fs.bullgit.science&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Unreal Engine 5 Demo</title>
    <link href="https://kevingimbel.de/blog/2020/05/unreal-engine-5-demo/"/>
    <updated>2020-05-14T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/05/unreal-engine-5-demo/</id>
    <content type="html">&lt;p&gt;Unreal Engine posted a &lt;a href=&quot;https://vimeo.com/417882964&quot; title=&quot;View Unreal Engine 5 demo video&quot;&gt;Video on Vimeo&lt;/a&gt; showing Unreal Engine 5 running live on a PlayStation 5.&lt;/p&gt;
&lt;p&gt;The demo is truly mind-blowing, especially considering it is running on a console and not on a high-end, custom build PC. I knew the PlayStation 5 and the XBox Series X (or whatever the next XBox is called, horrible naming again from XBox 🙄) are powerful and truly next-gen game changing consoles, but this demo just surprised me with its details.&lt;/p&gt;
&lt;p&gt;If you can then watch it in 4K.&lt;/p&gt;
&lt;p&gt;👉 &lt;a href=&quot;https://vimeo.com/417882964&quot;&gt;&amp;quot;Unreal Engine 5 Revealed! | Next-Gen Real-Time Demo Running on PlayStation 5&amp;quot; on Vimeo&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Deno 1.0 released</title>
    <link href="https://kevingimbel.de/blog/2020/05/deno-1-0-released/"/>
    <updated>2020-05-18T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/05/deno-1-0-released/</id>
    <content type="html">&lt;p&gt;Deno made its first stable release with the release of v1!&lt;/p&gt;
&lt;p&gt;I&#39;ve heard of Deno in the past but I never really cared for it. My work with JavaScript has always been in the browser and I&#39;m not too much of a NodeJS fan - mainly because of the security and sandbox aspects of the runtime (or more, the lack of them). Deno aims to do better and fix some (or all?) of the NodeJS mistakes, like making access to the filesystem and network impossible unless allowed. In NodeJS, a script can read, write, send and receive network packages and basically do whatever it wants - there&#39;s little restriction and this has lead to malicious code executions in the past.&lt;/p&gt;
&lt;h2&gt;Quick overview&lt;/h2&gt;
&lt;p&gt;Deno is a JavaScript runtime that supports TypeScript out of the box. We can write regular JavaScript and execute it through the Deno toolchain, as the following example shows.&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// file: hello.ts&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello from Deno!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we save the file as &lt;code&gt;hello.ts&lt;/code&gt; we can just run it.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ deno run hello.ts&lt;br /&gt;Hello from Deno&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means with Deno all the benefits of TypeScript can be used out of the box, like ... Types. 😬&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// file: sum.ts&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By annotating the parameters (&lt;code&gt;a: number&lt;/code&gt;) we can tell the compiler what type of parameter this functions expects. If we try to execute it with a wrong type, the compiler throws an error.&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// file: ts_example.ts&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; sum &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./sum.ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we try to tun the script with Deno, we get a nice error message:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ deno run ts_example.ts&lt;br /&gt;Compile file:///Users/kevingimbel/Development/private/deno/hello-world/ts_example.ts&lt;br /&gt;error: Uncaught TypeError: &lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt; is not a &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;br /&gt;console.log&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sum&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            ^&lt;br /&gt;    at file:///Users/kevingimbel/Development/private/deno/hello-world/ts_example.ts:3:13&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Types are incredibly helpful and in my opinion TypeScript is a blessing to the JavaScript world. Strong types are also one of the things I love about Rust - it just makes things clear and clean, even if it is hard sometimes.&lt;/p&gt;
&lt;h2&gt;File system access&lt;/h2&gt;
&lt;p&gt;Besides out-of-the-box TypeScript support, Denos security concept makes it very interesting, especially when you think about a Enterprise context and running code on servers where tight sandboxing and access control is important.&lt;/p&gt;
&lt;p&gt;Here&#39;s another example. We use the std library &lt;code&gt;fs&lt;/code&gt; module and the async function &lt;code&gt;exists&lt;/code&gt; to check if a directory exists. If we run the code as it is with &lt;code&gt;deno run dir.ts&lt;/code&gt; it will fail.&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// file: dir.ts&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; exists &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://deno.land/std/fs/mod.ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; my_dir_exists &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./foo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// returns a Promise&amp;lt;boolean&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_dir_exists&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Found directory!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Directory doesn&#39;t exist&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ deno run dir.ts&lt;br /&gt;error: Uncaught PermissionDenied: &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; access to &lt;span class=&quot;token string&quot;&gt;&quot;/Users/kevingimbel/Development/private/deno/hello-world/foo&quot;&lt;/span&gt;, run again with the --allow-read flag&lt;br /&gt;    at unwrapResponse &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$deno&lt;/span&gt;$/ops/dispatch_json.ts:43:11&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    at Object.sendAsync &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$deno&lt;/span&gt;$/ops/dispatch_json.ts:98:10&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    at async lstat &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$deno&lt;/span&gt;$/ops/fs/stat.ts:69:16&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    at async exists &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;https://deno.land/std/fs/exists.ts:8:5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    at async file:///Users/kevingimbel/Development/private/deno/hello-world/dir.ts:8:23&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As it turns out, we do not have write access so the script cannot check if a directory exists - this also means none of our dependencies can access the file system! To give the script read access the &lt;code&gt;--allow-read&lt;/code&gt; flag can be used.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ deno run --allow-read dir.ts &lt;br /&gt;Directory doesn&#39;t exist&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;--allow-read&lt;/code&gt; takes a directory as parameter, so the read access can be restricted to only a certain directory and sub-directories, as the following example shows:&lt;/p&gt;
&lt;p&gt;Given the directory structure&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;├── dir.ts&lt;br /&gt;├── test1&lt;br /&gt;├── test2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Access to can be restricted to only &lt;code&gt;test1&lt;/code&gt; with &lt;code&gt;--allow-read=./test1&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// file: dir_test1.ts&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; exists &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://deno.land/std/fs/mod.ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; my_dir_exists &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./test1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// returns a Promise&amp;lt;boolean&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_dir_exists&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Found directory!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Directory doesn&#39;t exist&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the script is executed with both directories - for some reason I needed the &lt;code&gt;--unstable&lt;/code&gt; flag when a directory is passed to &lt;code&gt;--allow-read&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ deno run --allow-read&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;./test2 --unstable dir_test1.ts &lt;br /&gt;error: Uncaught PermissionDenied: &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; access to &lt;span class=&quot;token string&quot;&gt;&quot;/Users/kevingimbel/Development/private/deno/hello-world/test1&quot;&lt;/span&gt;, run again with the --allow-read flag&lt;br /&gt;    at unwrapResponse &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$deno&lt;/span&gt;$/ops/dispatch_json.ts:43:11&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    at Object.sendAsync &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$deno&lt;/span&gt;$/ops/dispatch_json.ts:98:10&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    at async lstat &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$deno&lt;/span&gt;$/ops/fs/stat.ts:69:16&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    at async exists &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;https://deno.land/std/fs/exists.ts:8:5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    at async file:///Users/kevingimbel/Development/private/deno/hello-world/dir_test1.ts:8:23&lt;br /&gt;&lt;br /&gt;$ deno run --allow-read&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;./test1 --unstable dir_test1.ts &lt;br /&gt;Found directory&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;m incredibly excited for the future of Deno and I hope it will shift the JavaScript world into a more sandboxed, secure future. So far it is very promising.&lt;/p&gt;
&lt;p&gt;The full announcement blog post can be found &lt;a href=&quot;https://deno.land/v1&quot;&gt;on the deno blog&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>DIY Face Masks</title>
    <link href="https://kevingimbel.de/blog/2020/05/diy-face-masks/"/>
    <updated>2020-05-19T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/05/diy-face-masks/</id>
    <content type="html">&lt;p&gt;In light of COVID-19 and the resulting changes to public life I decided to take up a needle and sew some face masks! It&#39;s actually fun to do and I wouldn&#39;t have thought that I could actually do it!&lt;/p&gt;
&lt;p&gt;I got the layout from &lt;a href=&quot;https://oddnina.de/diy/2020/03/16/gesichtsmasken-anleitung.html&quot;&gt;Nina&lt;/a&gt; (German blog post), who in turn got it from &lt;a href=&quot;https://www.youtube.com/watch?v=VUasSmReIVo&amp;amp;t=315s&quot;&gt;Jess Dang&#39;s Video on YouTube&lt;/a&gt; (English video). Jess&#39; masks look way better and cleaner than mine, but for my first few tries I&#39;m incredibly happy with how they turned out.&lt;/p&gt;
&lt;p&gt;I decided to make them slightly bigger than the layout I got (&lt;a href=&quot;https://drive.google.com/file/d/1GQkPmh7-AbuPt4DV8JxbT3KavAM4x0-c/view&quot;&gt;Google Drive link&lt;/a&gt;) because I felt the original size didn&#39;t cover my face as much as I liked.&lt;/p&gt;
&lt;p&gt;The comic one is the latest I made, here I used some small rubber bands to hold it up, all other masks use hair ties.&lt;/p&gt;
&lt;p&gt;Materials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cotton fabric (I used old t-shirts and one store bought fabric (the comic one))&lt;/li&gt;
&lt;li&gt;Hair ties (cut open, then sewed into the sides)&lt;/li&gt;
&lt;li&gt;Thread and needle&lt;/li&gt;
&lt;li&gt;Lots of time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;ve made them all by hand without a sewing machine, which slows down the process if you&#39;re not used to sewing. It takes me about 3-4 hours to make one mask, if you&#39;re more experienced it probably takes a lot less!&lt;/p&gt;
&lt;p&gt;I&#39;m very much in favor of wearing masks and I&#39;m glad it is enforced in stores here in Germany. I think it&#39;s a good balance between keeping things &amp;quot;normal&amp;quot; and slowing down the spreading of COVID-19. I&#39;m still staying home as much as possible, which is incredibly easy for me because I&#39;m working from home (and have worked from home for the past 6+ years); I know not everybody has this privilege and I&#39;m thankful for everyone that is doing their part - thanks!&lt;/p&gt;
&lt;p&gt;If you think masks are a way of censorship you can fuck off. :)&lt;/p&gt;
&lt;p&gt;Below you can find a gallery of some of the masks I made, I&#39;m planning on doing more over the next weeks.&lt;/p&gt;
&lt;section class=&quot;gallery&quot;&gt;
  &lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/05/diy-face-masks/01_mask_left.jpg&quot; alt=&quot;Left side of the mask with a face on it&quot; /&gt;&lt;figcaption&gt;Left side of the mask with a face on it&lt;/figcaption&gt;&lt;/figure&gt;
  &lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/05/diy-face-masks/02_mask_right.jpg&quot; alt=&quot;Right side with a speech bubble saying &quot; Who&#39;d=&quot;&quot; want=&quot;&quot; it=&quot;&quot; any=&quot;&quot; other=&quot;&quot; way?=&quot;&quot; When=&quot;&quot; there&#39;s=&quot;&quot; danger=&quot;&quot; to=&quot;&quot; innocent=&quot;&quot; people&quot;&quot;=&quot;&quot; /&gt;&lt;figcaption&gt;Right side with a speech bubble saying &amp;quot;Who&#39;d want it any other way? When there&#39;s danger to innocent people&amp;quot;&lt;/figcaption&gt;&lt;/figure&gt;
  &lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/05/diy-face-masks/mask_black.jpg&quot; alt=&quot;A simple black mask, you can see the hair tie used to hold it up.&quot; /&gt;&lt;figcaption&gt;A simple black mask, you can see the hair tie used to hold it up.&lt;/figcaption&gt;&lt;/figure&gt;
  &lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/05/diy-face-masks/mask_blue.jpg&quot; alt=&quot;A light blue mask, this was the second I made&quot; /&gt;&lt;figcaption&gt;A light blue mask, this was the second I made&lt;/figcaption&gt;&lt;/figure&gt;
  &lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/05/diy-face-masks/mask_front.jpg&quot; alt=&quot;Comic fabric mask from the front&quot; /&gt;&lt;figcaption&gt;Comic fabric mask from the front&lt;/figcaption&gt;&lt;/figure&gt;
  &lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/05/diy-face-masks/mask_left_on_face.jpg&quot; alt=&quot;Left side of the comic mask while worn&quot; /&gt;&lt;figcaption&gt;Left side of the comic mask while worn&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/section&gt;</content>
  </entry>
  
  <entry>
    <title>Hallo, Welt!</title>
    <link href="https://kevingimbel.de/blog/2020/05/hallo-welt/"/>
    <updated>2020-05-20T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/05/hallo-welt/</id>
    <content type="html">&lt;p&gt;Hallo!&lt;/p&gt;
&lt;p&gt;Dieser Blog hat ab jetzt auch eine Deutsche ... Seite(?). Auf jeden Fall dachte ich mir, es gibt durchaus auch das ein oder andere was ich vielleicht mal auf Deutsch bloggen möchte, gemischte Sprachen in einer großen Blog Liste finde ich aber nicht so super. Deswegen gibt es jetzt unter &lt;code&gt;/de/&lt;/code&gt; allen Deutschen &lt;s&gt;Content&lt;/s&gt; Inhalt.&lt;/p&gt;
&lt;p&gt;Schauen wir mal wie&#39;s wird. 🤷‍♀️&lt;/p&gt;
&lt;p&gt;Danke für eure Aufmerksamkeit!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Dan Dubuque Slide Guitarist</title>
    <link href="https://kevingimbel.de/blog/2020/05/dan-dubuque-slide-guitarist/"/>
    <updated>2020-05-20T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/05/dan-dubuque-slide-guitarist/</id>
    <content type="html">&lt;p&gt;I just discovered &lt;a href=&quot;https://www.youtube.com/channel/UCPDByT6Y7bS9hQI2Po38cHg/&quot;&gt;Dan Dubuque&#39;s YouTube channel&lt;/a&gt; because the video &lt;a href=&quot;https://www.youtube.com/watch?v=OVboY26AexU&quot;&gt;&amp;quot;Dan Dubuque covering RAGE AGAINST THE MACHINE&#39;s &amp;quot;Killing In The Name Of&amp;quot; on Weissenborn Slide Guitar&amp;quot;&lt;/a&gt; caught my attention. First off, I love Rage Against The Machine, and second what the fuck is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Slide_guitar&quot; title=&quot;View Slide Guitar Wikipedia article&quot;&gt;Slide Guitar&lt;/a&gt;? While I know the sound of it, I&#39;ve never heard the name before. The cover is really good and the channel seems to be new (only one month old). I&#39;ve subscribed and I&#39;m looking forward to more videos!&lt;/p&gt;
&lt;p&gt;Some of my favorites so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OVboY26AexU&quot;&gt;&amp;quot;Dan Dubuque covering RAGE AGAINST THE MACHINE&#39;s &amp;quot;Killing In The Name Of&amp;quot; on Weissenborn Slide Guitar&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tnmBQHzkxdk&quot;&gt;Dan Dubuque covering QUEENS OF THE STONE AGE&#39;s &amp;quot;Little Sister&amp;quot; from LULLABIES TO PARALYZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2C-8W3oiPiA&quot;&gt;Dan Dubuque covering NIRVANA&#39;s &amp;quot;Heart Shaped Box&amp;quot; from IN UTERO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;m really glad people share their music and covers on the web, please tell me all about your favorite cover artists so I can enjoy more covered music!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Untold History Arkane</title>
    <link href="https://kevingimbel.de/blog/2020/05/untold-history-arkane/"/>
    <updated>2020-05-28T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/05/untold-history-arkane/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;&amp;quot;The Untold History of Arkane: Dishonored / Prey / Ravenholm / LMNO / The Crossing&amp;quot;&lt;/em&gt; is a documentation by NoClip about Arkane Studios, one of my absolute favorite game studios! Lately they gained popularity with daring AAA games like Dishonored and Prey. This documentation explores the 20 years of history that made Arkane what they are today and contains never seen footage of a Half-Life Game developed by Arkane which got cancelled.&lt;/p&gt;
&lt;p&gt;You can view the full documentation &lt;a href=&quot;https://youtu.be/h4kdqwdbZZ8&quot;&gt;for free on YouTube&lt;/a&gt; and support Noclip on &lt;a href=&quot;https://www.patreon.com/noclip&quot;&gt;Patreon&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Berlin Berlin</title>
    <link href="https://kevingimbel.de/blog/2020/05/berlin-berlin/"/>
    <updated>2020-05-29T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/05/berlin-berlin/</id>
    <content type="html">&lt;p&gt;In April one of my favorite Artists, &lt;a href=&quot;https://de-de.facebook.com/IraAtari/&quot;&gt;Ira Atari (Facebook)&lt;/a&gt;, released her new Song &amp;quot;Berlin Berlin&amp;quot;. I love the song and the video with all it&#39;s glitched visuals! Content wise the song hits close home, as I&#39;ve had panic attacks, too, and especially the following line is something I can relate to&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I may stop by the club but to many people stand in line so I can&#39;t drop by - I&#39;m so sorry guys&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is something I&#39;ve sort-of experienced more than once in the last 10ish years. I did often cancel plans with friends because I was too anxious to go out, often saying I had to work late when in reality I was &amp;quot;just&amp;quot; panicking to meet up with people - even though those people were long time friends. Pretty fucked up (&lt;em&gt;, a fucked up Queen&lt;/em&gt; ♫). It&#39;s gotten better overall but at times I still get panic attacks or feel extremely anxious when I need to go out or meet lots of people.&lt;/p&gt;
&lt;p&gt;Anyway, back to more fun things. For over a decade now I&#39;ve been listening and dancing to Ira Atari and I was basically going to all her Concerts in my region, together with my friend &lt;a href=&quot;https://www.instagram.com/bellavonoben/&quot;&gt;Isabel&lt;/a&gt;. Always in front of the stage, always dancing and always having a good time! It&#39;s also Ira Atari of whom I took my favorite photo of all time - &lt;a href=&quot;https://www.flickr.com/photos/dearwhoever/4876035979/in/album-72157624550670131/&quot;&gt;this Black &amp;amp; White shot from a Concert&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Seeing that Ira released a new song after 4-ish years made me board the Hypetrain like never before! And the hype was justified, because this new song is more &amp;quot;to the roots&amp;quot; and back to her older style, more rough and danceable.&lt;/p&gt;
&lt;p&gt;I can&#39;t wait to hear it live and I hope I&#39;ll soon be able to.&lt;/p&gt;
&lt;p&gt;Big up, Ira, see you soon! ❤️&lt;/p&gt;
&lt;p&gt;Buy and stream:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://audiolith.net/de/release/al320/&quot;&gt;Audiolith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://music.apple.com/us/album/berlin-berlin-single/1499526141&quot;&gt;Apple Music&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.deezer.com/en/album/132333702&quot;&gt;Deezer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://open.spotify.com/album/7zH2oBLAMCyFSlp1At1Iuh&quot;&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Corona Warn App</title>
    <link href="https://kevingimbel.de/blog/2020/06/corona-warn-app/"/>
    <updated>2020-06-18T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/06/corona-warn-app/</id>
    <content type="html">&lt;p&gt;Die &lt;a href=&quot;https://www.coronawarn.app/de/&quot;&gt;Corona Warn App&lt;/a&gt; wurde veröffentlicht und erstaunlicherweise ist sie gut! Die App läuft mit minimalen Berechtigungen, verbraucht wenig Strom da sie &lt;a href=&quot;https://de.wikipedia.org/wiki/Bluetooth_Low_Energy&quot;&gt;Bluetooth Low Energy&lt;/a&gt; verwendet, ist komplett dezentralisiert, und zu alledem auch noch Open Source: der Code für die Apps, die Website, und den Backend Server ist &lt;a href=&quot;https://github.com/corona-warn-app&quot;&gt;auf GitHub verfügbar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Auch &lt;a href=&quot;https://linus-neumann.de/&quot;&gt;Linus Neumann&lt;/a&gt; vom &lt;a href=&quot;https://ccc.de/&quot;&gt;Chaos Computer Club&lt;/a&gt; lobt die Umsetzung in &lt;a href=&quot;https://www.youtube.com/watch?v=_80-rl9UZJA&quot;&gt;diesem Video&lt;/a&gt; der Tagesschau, nachdem er und andere zuvor lange Zeit für eine dezentralisierte Lösung plädiert haben. Im Video wird auch weiter auf die Funktion der App eingegenagen und Nutzer-Fragen beantwortet. Meiner Meinung nach ist es auch ein großer Schritt, dass die App und alle dazugehörigen Komponenten Open Source sind (siehe oben).&lt;/p&gt;
&lt;p&gt;Einige Android User waren zunächst besorgt da &amp;quot;Location Services&amp;quot; angefragt werden, in den FAQ &lt;a href=&quot;https://www.coronawarn.app/de/faq/#android_location&quot;&gt;wird erklärt&lt;/a&gt;, warum dies nötig ist:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[...] Die Meldung geht auf eine Besonderheit von Android zurück: Bluetooth-Geräte in Deiner Nähe können grundsätzlich nur gefunden werden, wenn die Standortverwendung allgemein auf Deinem Gerät aktiviert ist [...]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Die Corona Warn App ist für &lt;a href=&quot;https://apps.apple.com/de/app/corona-warn-app/id1512595757&quot;&gt;iOS&lt;/a&gt; und &lt;a href=&quot;https://play.google.com/store/apps/details?id=de.rki.coronawarnapp&quot;&gt;Android&lt;/a&gt; verfügbar und es gibt wirklich &lt;em&gt;keinen Grund sie nicht zu installieren&lt;/em&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Rust CLI mit Docker ausliefern</title>
    <link href="https://kevingimbel.de/blog/2020/08/rust-cli-mit-docker-ausliefern/"/>
    <updated>2020-08-06T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/08/rust-cli-mit-docker-ausliefern/</id>
    <content type="html">&lt;p&gt;Vor kurzem habe ich einen Weg gefunden Rust &lt;abbr title=&quot;Command Line Interfaces; Programme die in einem Terminal ausgeführt werden&quot;&gt;CLI&lt;/abbr&gt; Programme über Docker auszuliefern. Für meinen Arbeitgeber &lt;a href=&quot;https://synoa.de/&quot;&gt;Synoa&lt;/a&gt; habe ich in den letzten Monaten ein CLI Tool erstellt, dass mir - und anderen - die Arbeit mit AWS erleichtert. Diese CLI im Team zu verteilen gestaltete sich als schwierig da weder jeder Rust installiert hat noch eine einfache Integration mit &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; möglich war da der Code in einem privaten Repository ist. Die einfachste Lösung war am Ende, die CLI in einen Docker Container zu packen und so zu verteilen. Wie das geht erkläre ich in diesem Artikel.&lt;/p&gt;
&lt;h2&gt;Rust Code&lt;/h2&gt;
&lt;p&gt;Der folgende Beispiel Code zeigt ein kleines Rust Programm, dass die Argumente ausgibt die während der Ausführung übergeben wurden.&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;env&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Der Code muss nicht verstanden werden um die Konzepte aus diesem Artikel zu verstehen! Das Muster ist für alle Binary-Programme gleich, z.B. könnte genauso eine Go App über Docker verteilt werden.&lt;/p&gt;
&lt;h2&gt;Code kompilieren - in Docker&lt;/h2&gt;
&lt;p&gt;Den oben gezeigten Code können wir nun kompilieren, dass heißt ihn zu einer ausführbaren Binär-Datei &amp;quot;zusammenfügen&amp;quot;. Hierfür verwenden wir einen &lt;a href=&quot;https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds&quot;&gt;&amp;quot;Multi-Stage&amp;quot; Build&lt;/a&gt; in Docker. So müssen wir und andere Entwickler keine vollständige Rust Umgebung verwalten und außerdem kann jeder Entwickler über Docker in der selben Umgebung Binaries kompilieren.&lt;/p&gt;
&lt;p&gt;Zunächst deklarieren wir einen &lt;code&gt;builder&lt;/code&gt; Container. Dieser Container wird genutzt um unseren Rust Code zu kompilieren.&lt;/p&gt;
&lt;pre class=&quot;language-ini&quot;&gt;&lt;code class=&quot;language-ini&quot;&gt;FROM clux/muslrust:1.45.0-stable as builder&lt;br /&gt;WORKDIR /volume&lt;br /&gt;COPY . .&lt;br /&gt;RUN cargo build --release&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Diese vier Zeilen tun folgendes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Erstelle einen Container auf Basis von &lt;a href=&quot;https://github.com/clux/muslrust&quot;&gt;&lt;code&gt;clux/muslrust&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dem Container wird der &amp;quot;Name&amp;quot; &lt;code&gt;builder&lt;/code&gt; gegeben&lt;/li&gt;
&lt;li&gt;Das Arbeitsverzeichnis wird auf &lt;code&gt;/volume&lt;/code&gt; gesetzt, damit wird Docker alle Befehle in diesem Verzeichnis ausführen&lt;/li&gt;
&lt;li&gt;Alle Dateien werden aus dem aktuellen Verzeichnis in den Container kopiert&lt;/li&gt;
&lt;li&gt;Das Kommando &lt;code&gt;cargo build --release&lt;/code&gt; wird &lt;em&gt;im Container&lt;/em&gt; ausgeführt und kompiliert unseren Code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Das eigentliche Docker Image erzeugen&lt;/h2&gt;
&lt;p&gt;Nun können wir im selben Dockerfile unser eigentliches Image erzeugen. Dafür wird das kompilierte Binary aus dem &lt;code&gt;builder&lt;/code&gt; container kopiert.&lt;/p&gt;
&lt;pre class=&quot;language-ini&quot;&gt;&lt;code class=&quot;language-ini&quot;&gt;FROM alpine&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# Kopiere das kompilierte Binary aus dem builder container&lt;/span&gt;&lt;br /&gt;COPY --from&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;builder /volume/target/x86_64-unknown-linux-musl/release/docker-cli-sample .&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# Alle CLI argumente werden direkt an das Binary übergeben&lt;/span&gt;&lt;br /&gt;ENTRYPOINT [ &quot;/docker-cli-sample&quot; ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Was geschieht hier?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zuerst erstellen wir einen neuen Docker Container auf basis des &lt;a href=&quot;https://alpinelinux.org/&quot;&gt;Alpine Linux&lt;/a&gt; Images.&lt;/li&gt;
&lt;li&gt;Dann kopieren wir das kompilierte Binary &lt;em&gt;aus dem builder Container&lt;/em&gt; in unseren neuen Container&lt;/li&gt;
&lt;li&gt;Zuletzt sagen wir, dass das Binary als &amp;quot;Startpunkt&amp;quot; verwendet werden soll. Soll heißen wenn der Container gestartet wird, dann wird dieses Binary ausgeführt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Warum Alpine Linux? Alpine Linux ist eine kleine auf Sicherheit fokusierte Linux Distribution. Das Alpine Docker image ist nur ca. 3MB groß - kleiner geht kaum!&lt;/p&gt;
&lt;p&gt;Alles zusammen sieht unser Dockerfile nun wie folgt aus:&lt;/p&gt;
&lt;pre class=&quot;language-ini&quot;&gt;&lt;code class=&quot;language-ini&quot;&gt;FROM clux/muslrust:1.45.0-stable as builder&lt;br /&gt;WORKDIR /volume&lt;br /&gt;COPY . .&lt;br /&gt;RUN cargo build --release&lt;br /&gt;&lt;br /&gt;FROM alpine&lt;br /&gt;COPY --from&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;builder /volume/target/x86_64-unknown-linux-musl/release/docker-cli-sample .&lt;/span&gt;&lt;br /&gt;ENTRYPOINT [ &quot;/docker-cli-sample&quot; ]&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Image bauen und den Container ausführen&lt;/h2&gt;
&lt;p&gt;Mit dem oben gezeigten Dockerfile können wir nun ein Image bauen. Hierfür benutzen wir folgenden Befehl:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker build -t kevingimbel/rust-docker-cli-sample:1.0 &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anschließend können wir einen Container ausführen, der das neu erstellte Image benutzt:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker run --rm kevingimbel/rust-docker-cli-sample:1.0 -hello -world&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/docker-cli-sample&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;-hello&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;-world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Terminal konfiguration&lt;/h2&gt;
&lt;p&gt;Damit wir diesen Docker Container wie ein &amp;quot;normales&amp;quot; binary ausführen können müssen wir im Terminal ein &amp;quot;alias&amp;quot; setzen. Hierfür kommt folgende in die &lt;code&gt;~/.bashrc&lt;/code&gt; bzw. &lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; docker-rust-cli&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;docker run --rm kevingimbel/rust-docker-cli-sample:1.0&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nun laden wir die Konfigurationsdatei neu oder öffnen ein neues Terminal Fenster und dann kann der Container wie ein normales Script ausgeführt werden.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# bash&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;source&lt;/span&gt; ~/.bashrc&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# zsh&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;source&lt;/span&gt; ~/.zshrc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Danach können wir den Container mit dem Befehl &lt;code&gt;docker-rust-cli&lt;/code&gt; starten.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker-rust-cli hello from docker&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/docker-cli-sample&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;from&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;docker&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Fortgeschritten: Volumes&lt;/h2&gt;
&lt;p&gt;Wir könnten hier fertig sein, aber eine wichtige Funktion fehlt noch: Volumes. Wenn unser CLI tool Dateien erstellt würden diese sonst im Docker container bleiben und der wird standardmäßig gelöscht da wir &lt;code&gt;--rm&lt;/code&gt; verwenden.&lt;/p&gt;
&lt;p&gt;Der &lt;code&gt;alias&lt;/code&gt; wird also mit einem Volume angepasst.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; docker-rust-cli&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;docker run --rm -v &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;:/cmd-root-dir kevingimbel/rust-docker-cli-sample:1.0&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit &lt;code&gt;-v $(pwd):/cmd-root-dir&lt;/code&gt; sagen wir Docker, dass das aktuelle Verzeichnis (&lt;code&gt;$(pwd)&lt;/code&gt;) im Container als Pfad &lt;code&gt;/cmd-root-dir&lt;/code&gt; gemounted werden soll. Jetzt müssen wir nur noch unserem Image sagen, dass es Dateien auch in diesem Verzeichnis ablegen soll. Das geht indem wir in der Dockerfile die &lt;code&gt;WORKDIR&lt;/code&gt; setzen.&lt;/p&gt;
&lt;p&gt;Das Dockerfile sieht nun wie folgt aus.&lt;/p&gt;
&lt;pre class=&quot;language-ini&quot;&gt;&lt;code class=&quot;language-ini&quot;&gt;FROM clux/muslrust:1.45.0-stable as builder&lt;br /&gt;WORKDIR /volume&lt;br /&gt;COPY . .&lt;br /&gt;RUN cargo build --release&lt;br /&gt;&lt;br /&gt;FROM alpine&lt;br /&gt;COPY --from&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;builder /volume/target/x86_64-unknown-linux-musl/release/docker-cli-sample .&lt;/span&gt;&lt;br /&gt;WORKDIR /cmd-root-dir&lt;br /&gt;ENTRYPOINT [ &quot;/docker-cli-sample&quot; ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; erstellt das Verzeichnis wenn es nicht existiert, wir müssen es also nicht selbst erstellen. Um diese Anpassung zu testen können wir unser Script eine Log Datei schreiben lassen. Dazu verändern wir den Rust Code wie folgt.&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;env&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token namespace&quot;&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;docker-cli-sample.log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token macro property&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Args: {:?}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit &lt;code&gt;fs::write&lt;/code&gt; schreiben wir nun alle Argumente auch in die Datei &lt;code&gt;docker-cli-sample.log&lt;/code&gt; statt sie nur im Terminal anzuzeigen. Jetzt muss das Verzeichnis nur noch wie oben geschrieben gemounted werden:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; docker-rust-cli&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;docker run --rm -v &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;:/cmd-root-dir kevingimbel/rust-docker-cli-sample:1.0&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wichtig sind hierbei die einfachen Anführungszeichen (&lt;code&gt;&#39;&lt;/code&gt;) - ohne diese würde &lt;code&gt;$(pwd)&lt;/code&gt; nur ein Mal ausgeführt werden statt bei jedem Aufruf!&lt;/p&gt;
&lt;p&gt;Wenn wir jetzt den Befehl ausführen wird eine Log Datei in das aktuelle Verzeichnis geschrieben:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker-rust-cli&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/docker-cli-sample&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; docker-cli-sample.log&lt;br /&gt;Args: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/docker-cli-sample&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Fortgeschritten: Versionierung&lt;/h2&gt;
&lt;p&gt;Für etwas mehr Komfort können wir eine Variable für den &amp;quot;Docker Tag&amp;quot;, also die Version unseres Images, nutzen. So kann man später einfach updaten ohne den eigentlichen Befehl anpassen zu müssen.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;MY_CLI_VERSION&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; docker-rust-cli&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;docker run --rm -v &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;:/cmd-root-dir kevingimbel/rust-docker-cli-sample:&lt;span class=&quot;token variable&quot;&gt;$MY_CLI_VERSION&lt;/span&gt;&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Soll nun Version 1.1 verwendet werden muss lediglich die Variable &lt;code&gt;MY_CLI_VERSION&lt;/code&gt; auf &lt;code&gt;1.1&lt;/code&gt; geändert werden. Jeder mit Zugriff auf das Docker Image kann nun den Code in die &lt;code&gt;~/.bashrc&lt;/code&gt; oder &lt;code&gt;~/.zshrc&lt;/code&gt; kopieren und das CLI Programm nutzen.&lt;/p&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Wir können mit &lt;a href=&quot;https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds&quot; title=&quot;Docker Dokumentation über Multi-Stage Builds&quot;&gt;Multi-Stage Builds&lt;/a&gt; code in Docker kompilieren&lt;/li&gt;
&lt;li&gt;Rust binaries können in kleinen Containern wie z.B. Alpine oder &amp;quot;blanken&amp;quot; Container ausgeführt werden&lt;/li&gt;
&lt;li&gt;Mit einem &lt;code&gt;alias&lt;/code&gt; können wir bequem und komfortable Docker Container ausführen als wären es &amp;quot;installiere&amp;quot; Binaries&lt;/li&gt;
&lt;li&gt;Indem wir &lt;code&gt;WORKDIR&lt;/code&gt; und Volumes nutzen können wir Dateien aus dem Container heraus speichern&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Der Quellcode für dieses Tutorial kann auf &lt;a href=&quot;https://github.com/kevingimbel/docker-cli-sample&quot;&gt;GitHub unter kevingimbel/docker-cli-sample&lt;/a&gt; gefunden werde. Ein funktionierendes Docker Image gibt es auf &lt;a href=&quot;https://hub.docker.com/r/kevingimbel/rust-docker-cli-sample&quot;&gt;Docker Hub unter kevingimbel/rust-docker-cli-sample&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Um das Docker Image zu nutzen kann folgender Befehl ausgeführt werden:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm kevingimbel/rust-docker-cli-sample:1.0 hello from docker&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Shipping Rust CLIs with Docker</title>
    <link href="https://kevingimbel.de/blog/2020/08/shipping-rust-cl-is-with-docker/"/>
    <updated>2020-08-06T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/08/shipping-rust-cl-is-with-docker/</id>
    <content type="html">&lt;p&gt;I recently found a nice and clean way of building and distributing &lt;a href=&quot;https://rust-lang.orf/&quot;&gt;Rust&lt;/a&gt; CLI apps using &lt;a href=&quot;https://www.docker.com/&quot;&gt;docker&lt;/a&gt;. For my work I created a Rust app that wraps some AWS SDK functions to make my day-to-day work with AWS easier. This CLI is very focused on the way we work at &lt;a href=&quot;https://synoa.de/&quot;&gt;Synoa&lt;/a&gt; and therefore unfortunately not open source. The tech does not matter much, as we can just create a tiny example &amp;quot;app&amp;quot; for this blog post.&lt;/p&gt;
&lt;h2&gt;Rust code&lt;/h2&gt;
&lt;p&gt;Below is the example Rust code we will use.&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;env&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code only prints whatever arguments were passed to the script.&lt;/p&gt;
&lt;h2&gt;Building the binary - in docker&lt;/h2&gt;
&lt;p&gt;Next we will build the binary in docker using a &amp;quot;&lt;a href=&quot;https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds&quot;&gt;multi-stage build&lt;/a&gt;&amp;quot; setup. This way we do not need to manage our local Rust environment, for example we don&#39;t need to keep our Rust targets up-to-date or make sure other contributors have the same environment setup - the compiling is all done inside Docker.&lt;/p&gt;
&lt;p&gt;We start by declaring a &lt;code&gt;builder&lt;/code&gt; container. This container is only used for compiling the binary.&lt;/p&gt;
&lt;pre class=&quot;language-ini&quot;&gt;&lt;code class=&quot;language-ini&quot;&gt;FROM clux/muslrust:1.45.0-stable as builder&lt;br /&gt;WORKDIR /volume&lt;br /&gt;COPY . .&lt;br /&gt;RUN cargo build --release&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These four lines do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a container based on &lt;a href=&quot;https://github.com/clux/muslrust&quot;&gt;&lt;code&gt;clux/muslrust&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Give it a name of &lt;code&gt;builder&lt;/code&gt; (so we can reference it later)&lt;/li&gt;
&lt;li&gt;Declare the working directory to be &lt;code&gt;/volume&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy over all files from the current directory to &lt;code&gt;/volume&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;cargo build --release&lt;/code&gt; command which builds our Rust binary&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Creating the docker image&lt;/h2&gt;
&lt;p&gt;Next, in the same Dockerfile, we declare the actual image. This is where we copy the compiled binary from the &amp;quot;builder&amp;quot; container.&lt;/p&gt;
&lt;pre class=&quot;language-ini&quot;&gt;&lt;code class=&quot;language-ini&quot;&gt;FROM alpine&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# Copy the compiled binary from the builder container&lt;/span&gt;&lt;br /&gt;COPY --from&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;builder /volume/target/x86_64-unknown-linux-musl/release/docker-cli-sample .&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# Pass all arguments etc to binary&lt;/span&gt;&lt;br /&gt;ENTRYPOINT [ &quot;/docker-cli-sample&quot; ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what happens here?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First with &lt;code&gt;FROM alpine&lt;/code&gt; we use the slim &lt;a href=&quot;https://alpinelinux.org/&quot;&gt;Alpine Linux&lt;/a&gt; as base image. Depending on what our binary is doing we could also use &lt;code&gt;FROM scratch&lt;/code&gt; to not use a base image at all. For my case I chose Alpine because we needed to make HTTPS calls and they didn&#39;t work in a &amp;quot;scratch&amp;quot; image.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COPY&lt;/code&gt; copies the binary from the builder container and places it in the root directory of our container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ENTRYPOINT [ &amp;quot;/docker-cli-sample&amp;quot; ]&lt;/code&gt; means we execute the &lt;code&gt;docker-cli-sample&lt;/code&gt; binary when we run the container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All together, the Dockerfile looks like this.&lt;/p&gt;
&lt;pre class=&quot;language-ini&quot;&gt;&lt;code class=&quot;language-ini&quot;&gt;FROM clux/muslrust:1.45.0-stable as builder&lt;br /&gt;WORKDIR /volume&lt;br /&gt;COPY . .&lt;br /&gt;RUN cargo build --release&lt;br /&gt;&lt;br /&gt;FROM alpine&lt;br /&gt;COPY --from&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;builder /volume/target/x86_64-unknown-linux-musl/release/docker-cli-sample .&lt;/span&gt;&lt;br /&gt;ENTRYPOINT [ &quot;/docker-cli-sample&quot; ]&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Building the image and running the container&lt;/h2&gt;
&lt;p&gt;We can build the image now with the &lt;code&gt;docker build&lt;/code&gt; command. Open a terminal and type:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker build -t kevingimbel/rust-docker-cli-sample:1.0 &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then run the image in a container. &lt;code&gt;--rm&lt;/code&gt; makes sure the container is removed after it is executed, as we do not need it anymore.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker run --rm kevingimbel/rust-docker-cli-sample:1.0 -hello -world&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/docker-cli-sample&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;-hello&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;-world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Setting up the CLI and docker&lt;/h2&gt;
&lt;p&gt;To execute this container like a CLI script we add the following to &lt;code&gt;~/.bashrc&lt;/code&gt; (for Bash) or &lt;code&gt;~/.zshrc&lt;/code&gt; (for zsh).&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; docker-rust-cli&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;docker run --rm kevingimbel/rust-docker-cli-sample:1.0&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source the file by running the following, then test the command.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# bash&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;source&lt;/span&gt; ~/.bashrc&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# zsh&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;source&lt;/span&gt; ~/.zshrc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can execute the command just like any other CLI. The arguments are all passed to the script, just as if it was a &amp;quot;normal&amp;quot; binary somewhere in our &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker-rust-cli hello from docker&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/docker-cli-sample&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;from&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;docker&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Advanced: volumes&lt;/h2&gt;
&lt;p&gt;We could end this post here, but there&#39;s one &amp;quot;advanced&amp;quot; topic I want to highlight: Volumes. If our script would create or download files we could not access them because they are only inside the container and the container. To prevent this we need to add a volume.&lt;/p&gt;
&lt;p&gt;A volume can be added with &lt;code&gt;-v&lt;/code&gt; in the docker command.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; docker-rust-cli&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;docker run --rm -v &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;:/cmd-root-dir kevingimbel/rust-docker-cli-sample:1.0&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;code&gt;WORKDIR&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Now we need to make sure that our cli app puts created files in the &lt;code&gt;/cmd-root-dir&lt;/code&gt; directory. This can be done by specifying the &lt;code&gt;WORKDIR&lt;/code&gt; in the Dockerfile. To do this we add a new line above &lt;code&gt;ENTRYPOINT&lt;/code&gt; as shown below.&lt;/p&gt;
&lt;pre class=&quot;language-ini&quot;&gt;&lt;code class=&quot;language-ini&quot;&gt;FROM clux/muslrust:1.45.0-stable as builder&lt;br /&gt;WORKDIR /volume&lt;br /&gt;COPY . .&lt;br /&gt;RUN cargo build --release&lt;br /&gt;&lt;br /&gt;FROM alpine&lt;br /&gt;COPY --from&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;builder /volume/target/x86_64-unknown-linux-musl/release/docker-cli-sample .&lt;/span&gt;&lt;br /&gt;WORKDIR /cmd-root-dir&lt;br /&gt;ENTRYPOINT [ &quot;/docker-cli-sample&quot; ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; will create the directory if it doesn&#39;t exist. To test the changes, we can adjust the rust script to write to a file.&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;env&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token namespace&quot;&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;docker-cli-sample.log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token macro property&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Args: {:?}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will write the arguments into the &lt;code&gt;docker-cli-sample.log&lt;/code&gt;. Because we set &lt;code&gt;WORKDIR&lt;/code&gt; this will execute in the &lt;code&gt;/cmd-root-dir&lt;/code&gt; inside the container. To actually get the log, we can now mount the volume with &lt;code&gt;-v&lt;/code&gt; in our alias.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; docker-rust-cli&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;docker run --rm -v &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;:/cmd-root-dir kevingimbel/rust-docker-cli-sample:1.0&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;$(pwd)&lt;/code&gt; always evaluates to the current directory. This &lt;strong&gt;only works if&lt;/strong&gt; we use sigle-quotes (&lt;code&gt;&#39;&lt;/code&gt;) in the alias!&lt;/p&gt;
&lt;p&gt;So finally, running the command now will yield us the log in the current directory.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker-rust-cli&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/docker-cli-sample&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; docker-cli-sample.log&lt;br /&gt;Args: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/docker-cli-sample&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Advanced: managing versions&lt;/h2&gt;
&lt;p&gt;For a bit more comfort we can use a variable for the docker image tag so we can update easier. The &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; then looks like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;MY_CLI_VERSION&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; docker-rust-cli&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;docker run --rm -v &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;:/cmd-root-dir kevingimbel/rust-docker-cli-sample:&lt;span class=&quot;token variable&quot;&gt;$MY_CLI_VERSION&lt;/span&gt;&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there&#39;s that! Everybody else with access to the docker image can now use our CLI by adding the &lt;code&gt;alias&lt;/code&gt; and optionally version to their &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Recap&lt;/h2&gt;
&lt;p&gt;So what did we learn?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can use &lt;a href=&quot;https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds&quot; title=&quot;Docker Documentation about multi-stage builds&quot;&gt;multi-stage builds&lt;/a&gt; to build our code using docker. This is done by creating a container with &lt;code&gt;FROM image:tag as builder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rust binaries can be run in a small image such as &lt;code&gt;alpine&lt;/code&gt; or even in a blank image using &lt;code&gt;FROM scratch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We can use an &lt;code&gt;alias&lt;/code&gt; to comfortably run the long docker command&lt;/li&gt;
&lt;li&gt;By using &lt;code&gt;WORKDIR&lt;/code&gt; and volumes we can extract files from the container and save them in the current directory outside the container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The source code of the example Rust CLI can be found on &lt;a href=&quot;https://github.com/kevingimbel/docker-cli-sample&quot;&gt;GitHub at kevingimbel/docker-cli-sample&lt;/a&gt;. A working docker image can be found on &lt;a href=&quot;https://hub.docker.com/r/kevingimbel/rust-docker-cli-sample&quot;&gt;Docker Hub at kevingimbel/rust-docker-cli-sample&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The docker sample can be run with&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm kevingimbel/rust-docker-cli-sample:1.0 hello from docker&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Fall Guys</title>
    <link href="https://kevingimbel.de/blog/2020/08/fall-guys/"/>
    <updated>2020-08-10T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/08/fall-guys/</id>
    <content type="html">&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/08/fall-guys/FallGuys_all-running.png&quot; alt=&quot;Screenshot of Fall Guys showing a lot of beans running around&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Fall Guys is fun! It&#39;s stupid and fun, and I love it. It&#39;s like &lt;a href=&quot;https://en.wikipedia.org/wiki/Takeshi%27s_Castle&quot;&gt;someone turned Takeshi&#39;s Castle into a video game&lt;/a&gt;. You run around parkours with 60 other people, all controlling one of the little blobby-folks seen in the screenshots. There&#39;s costumes and multiple rounds, some rounds are team-based like playing soccer with a huge ball, other rounds are all-vs-all.&lt;/p&gt;
&lt;p&gt;In general, I enjoyed playing. I played for about an hour last night, and while I had fun I don&#39;t really see me playing a lot more since I only have a limited amount of time to play video games and I&#39;d rather play &lt;a href=&quot;https://elderscrollsonline.com/&quot;&gt;Elder Scrolls: Online&lt;/a&gt; or &lt;a href=&quot;https://playvalorant.com/&quot;&gt;Valorant&lt;/a&gt; with friends than Fall Guys, but I guess if you just want to play something without thinking too much Fall Guys is your game.&lt;/p&gt;
&lt;p&gt;You can get Fall Guys on &lt;a href=&quot;https://www.playstation.com/de-de/games/fall-guys-ultimate-knockout-ps4/&quot;&gt;PS4&lt;/a&gt; and &lt;a href=&quot;https://store.steampowered.com/app/1097150/Fall_Guys_Ultimate_Knockout/&quot;&gt;Steam&lt;/a&gt;. I played on PS4 and got the game free with my PlayStation Plus subscription.&lt;/p&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;I previously rated Fall Guys with 3 stars, but I actually played a lot of it with my wife and kids and we&#39;re really into it now. Playing Fall Guys with my wife is a lot of fun and we&#39;re celebrating every win and laughing about every lost round together. Good times, 7/5.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;rating &quot; role=&quot;img&quot; aria-label=&quot;Rating: 5 of 5&quot;&gt;5/5 &lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Infernal City</title>
    <link href="https://kevingimbel.de/blog/2020/08/the-infernal-city/"/>
    <updated>2020-08-16T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/08/the-infernal-city/</id>
    <content type="html">&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/08/the-infernal-city/the-infernal-city.jpg&quot; alt=&quot;Image of the book The Infernal City being held in hand in front of a computer monitor&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;I finally came around to read &lt;em&gt;The Infernal City&lt;/em&gt; by Greg Keys. As a huge fan of Elder Scrolls I&#39;ve wanted to read this book in a long time and in fact had it in my bookshelf for the past 3-4ish years, but I just never took the time to read it.&lt;/p&gt;
&lt;p&gt;I absolutely absorbed this book and loved it front to back! It fits quite well into the lore and doesn&#39;t feel &amp;quot;off&amp;quot; or wrong. The story follows the Breton alchemist Annaïg and her Argonian friend Mere-Glim who try to stop the floating City &amp;quot;Umbriel&amp;quot; that wreak havoc along its path through Tamriel.&lt;/p&gt;
&lt;p&gt;It also follows other peoples storylines so the reader can always get a &amp;quot;bigger&amp;quot; picture from different points of view.&lt;/p&gt;
&lt;p&gt;I really enjoyed it and hope future games will pick up the lore introduced by The Infernal City.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;rating &quot; role=&quot;img&quot; aria-label=&quot;Rating: 5 of 5&quot;&gt;5/5 &lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⚔️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⚔️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⚔️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⚔️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⚔️&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Lord of Souls</title>
    <link href="https://kevingimbel.de/blog/2020/08/lord-of-souls/"/>
    <updated>2020-08-17T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/08/lord-of-souls/</id>
    <content type="html">&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/08/lord-of-souls/lord-of-souls.jpg&quot; alt=&quot;Image of the book Lord of Souls being held in hand in front of a computer monitor&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Similar to &lt;a href=&quot;https://kevingimbel.de/blog/2020/08/the-infernal-city/&quot;&gt;The Infernal City&lt;/a&gt;, I also had Lord of Souls by Greg Keyes standing in my bookshelf for years, and after finishing and loving &amp;quot;The Infernal City&amp;quot; I was very excited to continue the journey with Lord of Souls.&lt;/p&gt;
&lt;p&gt;The two books connect seamlessly and Lord of Souls finishes the storylines which all somewhat interconnect at the end. From first to last page it is incredibly exciting and expends the lore of Umbriel, the floating city that kills everything below it just to raise the corpse as an undead army that marches towards the Imperial City.&lt;/p&gt;
&lt;p&gt;Just as The Infernal City, I loved this book and I recommend it for everybody that&#39;s interested in Elder Scrolls lore beyond the games.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;rating &quot; role=&quot;img&quot; aria-label=&quot;Rating: 5 of 5&quot;&gt;5/5 &lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⚔️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⚔️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⚔️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⚔️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⚔️&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hannah Gadsby - Douglas</title>
    <link href="https://kevingimbel.de/blog/2020/09/hannah-gadsby-douglas/"/>
    <updated>2020-09-01T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/09/hannah-gadsby-douglas/</id>
    <content type="html">&lt;p&gt;Last night my wife and I watched &lt;a href=&quot;https://en.wikipedia.org/wiki/Hannah_Gadsby&quot; title=&quot;Hannah Gadsby on Wikipedia&quot;&gt;Hannah Gadsbys&lt;/a&gt; newest stand-up show called &amp;quot;&lt;a href=&quot;https://www.netflix.com/de-en/title/81054700&quot; title=&quot;Watch Douglas on Netflix&quot;&gt;Douglas&lt;/a&gt;&amp;quot; and within the first minute I was out of breath and laughing because she just hits my humor spot on. Absolutely loved this show! It&#39;s a good hour of laughing with serious topics wrapped into jokes, but never feels too uncomfortable.&lt;/p&gt;
&lt;p&gt;From the topics and the overall feeling it&#39;s not as hard as &lt;a href=&quot;https://www.netflix.com/de-en/title/80233611&quot; title=&quot;Watch Nanette on Netflix&quot;&gt;Nanette&lt;/a&gt;, which just left me sobbing during the last half and was a constant rollercoaster because it is very harsh and real and touches a lot of very personal topics; If you haven&#39;t watched it I don&#39;t want to spoil - just take an hour and watch it on &lt;a href=&quot;https://www.netflix.com/de-en/title/80233611&quot; title=&quot;Watch Nanette on Netflix&quot;&gt;Netflix&lt;/a&gt;. Everybody should watch this program.&lt;/p&gt;
&lt;p&gt;Anyway, &lt;em&gt;Douglas&lt;/em&gt; is a solid 5/5 for me!&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;rating &quot; role=&quot;img&quot; aria-label=&quot;Rating: 5 of 5&quot;&gt;5/5 &lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Die Tyrannei des Schmetterlings</title>
    <link href="https://kevingimbel.de/blog/2020/09/die-tyrannei-des-schmetterlings/"/>
    <updated>2020-09-02T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/09/die-tyrannei-des-schmetterlings/</id>
    <content type="html">&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/09/die-tyrannei-des-schmetterlings/tyrannei-des-schmetterlings.jpg&quot; alt=&quot;Image of the book Die Die Tyrannei des Schmetterlings being held in hand in front of a computer monitor&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Where do I start with this? I tried really hard to like it but I just cannot.&lt;/p&gt;
&lt;p&gt;Before you continue reading, I want to say that I &lt;strong&gt;did not finish the book&lt;/strong&gt; - I stopped half-way through&lt;/p&gt;
&lt;p&gt;The story is not really new or engaging and moves very slowly. The writing style is too detailed for me to form a good image in my mind, every time I have an image of a scene the author adds more and more details and it just keeps changing; It&#39;s too much of hard world building for me.&lt;/p&gt;
&lt;p&gt;If the book would&#39;ve introduced new ideas or revolutionary concepts I&#39;d have bitten my teeth together and went trough with it, but it is really not new nor anything, I read the plot summary on Wikipedia and was not surprised at all. If this book was written in the 1970 - 1980 it would&#39;ve been something &amp;quot;new&amp;quot;. What&#39;s especially disappointing for me is that the author, &lt;a href=&quot;https://en.wikipedia.org/wiki/Frank_Sch%C3%A4tzing&quot;&gt;Frank Schätzing&lt;/a&gt;, apparently talked to experts in AI during his research and nothing of this is reflected in the part of the book I read.&lt;/p&gt;
&lt;p&gt;As stated previously the details with which every scene is described is too much. It prevents me, the reader, from drawing a picture in my head. Instead the picture is build for me, and if I want to have a picture build I watch a movie or series; I&#39;m not too keen on reading a 4 page long description of every square meter of pavement the protagonist walks along; I do not care that there&#39;s this very specific tree and this very specific plant and these three very specific bugs and what not; - it is just not for me.&lt;/p&gt;
&lt;p&gt;So sadly I cannot recommend this book. 2/5 because it is a book and if you&#39;re not too deeply invested into Sci-Fi or AI you may get something &amp;quot;new&amp;quot; or surprising out of it. I did not.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;rating &quot; role=&quot;img&quot; aria-label=&quot;Rating: 2 of 5&quot;&gt;2/5 &lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon-inactive&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;&lt;span class=&quot;rating--icon-inactive&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;&lt;span class=&quot;rating--icon-inactive&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Ich buk Sauerteig Brot</title>
    <link href="https://kevingimbel.de/blog/2020/09/ich-buk-sauerteig-brot/"/>
    <updated>2020-09-13T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/09/ich-buk-sauerteig-brot/</id>
    <content type="html">&lt;p&gt;Inspiriert von &lt;a href=&quot;https://twitter.com/oddnina&quot; title=&quot;Folgt der guten Nina auf Twitter, es lohnt!&quot;&gt;Nina&lt;/a&gt; und ihrem &lt;a href=&quot;https://twitter.com/OddNina/status/1304023596122148864/photo/1&quot; title=&quot;Ein Bild von Ninas Brot auf Twitter&quot;&gt;Sauerteig Brot&lt;/a&gt; dachte ich mir, ich könnte ja auch mal Sauerteig Brot backen! Ich liebe Sauerteig Brot aber bisher habe ich mich noch nie getraut den Sauerteig aufzusetzen und zu &amp;quot;pflegen&amp;quot;, da mir das alles immer sehr kompliziert und aufwendig vorkam. Irgendwie ist es das auch, denn mein erster Versuch ist furchtbar schief gelaufen! 🤷‍♀️&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/09/ich-buk-sauerteig-brot/sauerteig-brot-monster.jpg&quot; alt=&quot;Brot auf Backpapier, dass sehr weit auseinander gelaufen ist.&quot; /&gt;&lt;figcaption&gt;Mein Brot, wenn man es denn so nennen möchte.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Ich habe den Sauerteig ca. sieben Tage in der Küche täglich gefüttert und gerührt und nach sieben Tagen roch er auch sehr sauer. Allerdings war er leider auch sehr flüssig, was wahrscheinlich daran liegt das meine Küche zu kalt ist. Sauerteig braucht 30-40 Grad Celsius und in meiner Küche sind es wahrscheinlich so ca. 20 Grad - keine gute Voraussetzung. Im Internet™ habe ich gelesen, dass bei nicht optimaler Temperatur der Teig etwas länger braucht und säuerlicher wird.&lt;/p&gt;
&lt;p&gt;Das &amp;quot;Brot&amp;quot; habe ich dann mit Dinkelmehl, dem Weizen-Sauerteig, Salz, und etwas Hefe gebacken. Geschmacklich war es sehr sauer, aber lecker. Leider ist es nicht aufgegangen und war sehr zäh. Ich hatte noch knapp eine halbe Packung Trockenhefe untergemischt - mehr Hefe oder frische Hefe wäre aber besser gewesen.&lt;/p&gt;
&lt;p&gt;Was ich fürs nächste Brot mitnehme:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Teig an einem warmen Ort gehen lassen&lt;/li&gt;
&lt;li&gt;strikter an Rezepte halten bis ich die Erfahrung habe diese zu variieren&lt;/li&gt;
&lt;li&gt;Mehr Brot backen, generell!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Als nächstes möchte ich mal wieder Brötchen backen, das macht nämlich Spaß!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Keychron K2</title>
    <link href="https://kevingimbel.de/blog/2020/09/keychron-k2/"/>
    <updated>2020-09-23T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/09/keychron-k2/</id>
    <content type="html">&lt;p&gt;Yesterday I got my &lt;a href=&quot;https://www.keychron.com/products/keychron-k2-wireless-mechanical-keyboard&quot;&gt;Keychron K2 keyboard&lt;/a&gt;! It&#39;s my first time getting a mechanical keyboard and also the first time using an ANSI layout instead of the german ISO layout. It&#39;s also the first time using such a small keyboard so I&#39;ll need to get used to the position of keys again, especially since I am not typing with 10 fingers (tho I should really learn to!).&lt;/p&gt;
&lt;p&gt;I&#39;ll need a few weeks before I can give a review but so far I am very happy.  At this point huge &lt;strong&gt;thank you&lt;/strong&gt; to my employer &lt;a href=&quot;https://synoa.de/&quot;&gt;Synoa GmbH&lt;/a&gt; who payed for it! Want a new Keychron and a MacBook Pro, too? We are &lt;a href=&quot;https://synoa.de/ueber-uns/jobs/&quot;&gt;hiring Senior Java Devs&lt;/a&gt;!&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/09/keychron-k2/keychron-k2.jpg&quot; alt=&quot;The Keychron K2&quot; /&gt;&lt;figcaption&gt;The Keychron K2&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/09/keychron-k2/keychron-k2-backlight.jpg&quot; alt=&quot;The Keychron K2 with random RGB colored backlight turned on&quot; /&gt;&lt;figcaption&gt;The Keychron K2 with random RGB colored backlight turned on&lt;/figcaption&gt;&lt;/figure&gt;</content>
  </entry>
  
  <entry>
    <title>Rust Compiler Umgebungsvariablen</title>
    <link href="https://kevingimbel.de/blog/2020/09/rust-compiler-umgebungsvariablen/"/>
    <updated>2020-09-30T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/09/rust-compiler-umgebungsvariablen/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://rust-lang.org/&quot;&gt;Rust&lt;/a&gt; ist eine wunderbare Programmiersprache mit einem gut durchdachten Compiler. Das Rust Team hat sich die Bürde auferlegt, den Compiler so &amp;quot;schlau&amp;quot; wie möglich zu machen um so viele Fehler schon während dem kompilieren des Codes zu erkennen. Außerdem wird Rust mit einem mächtigen Tool namens &lt;code&gt;cargo&lt;/code&gt; ausgeliefert. Cargo ist ähnlich wie &lt;code&gt;npm&lt;/code&gt; oder &lt;code&gt;maven&lt;/code&gt; und stellt verschiedenste Funktionen bereit, zum Beispiel zum bauen, testen, oder veröffentlichen von Rust Code. In diesem Blog-Beitrag möchte ich auf ein Build Feature von Cargo eingehen: Environment Variables.&lt;/p&gt;
&lt;h2&gt;Source Code&lt;/h2&gt;
&lt;p&gt;Der gesamte Source Code für diesen Blog-Beitrag kann auf GitHub gefunden werden: &lt;a href=&quot;https://github.com/kevingimbel/rust-blog-code/tree/main/env-example&quot;&gt;github.com/kevingimbel/rust-blog-code/env-example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Einige Code Beispiele können direkt ausgeführt werden. Anweisung wie z.B. &lt;code&gt;cargo run --examples ding&lt;/code&gt; in diesem Beitrag führen die verschiedenen Code Beispiele im &lt;code&gt;examples&lt;/code&gt; Ordner aus. Um diese zu verwenden, folgende Schritten ausführen:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Terminal öffnen&lt;/li&gt;
&lt;li&gt;Repo clonen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd env-example&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Befehle ausführen wenn sie im Beitrag vorkommen, z.B. &lt;code&gt;cargo run --example maybe-fn&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;code&gt;env!()&lt;/code&gt; vs. &lt;code&gt;std::env::var()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Umgebungsvariablen können auf zwei Arten ausgelesen werden:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;env!()&lt;/code&gt; Makro&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::env::var()&lt;/code&gt; Funktion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Der wichtige Unterschied ist, dass &lt;code&gt;env!()&lt;/code&gt; den &lt;strong&gt;Wert zur Kompilierzeit&lt;/strong&gt; ausliest und ins Binary schreibt, während &lt;code&gt;std::env()&lt;/code&gt; immer den Wert aus der Umgebung liest. Das lässt sich am folgenden Beispiel gut erkennen:&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; env_macro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token macro property&quot;&gt;env!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MY_VAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; env_fn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MY_VAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;env_macro = {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; env_macro&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;env_fn = {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; env_fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wenn wir diesen Code kompilieren bekommen wir einen Fehler:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cargo build &lt;br /&gt;   Compiling env-example v0.1.0 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rust-blog-code/env-example&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;error: environment variable &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;MY_VAR&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt; not defined&lt;br /&gt; --&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; src/main.rs:2:21&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;token builtin class-name&quot;&gt;let&lt;/span&gt; env_macro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; env&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MY_VAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;                     ^^^^^^^^^^^^^^&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; note: this error originates &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; a macro &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in Nightly builds, run with -Z macro-backtrace &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;more&lt;/span&gt; info&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es gibt nun zwei Möglichkeiten:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wir setzen die Environment Variable mit &lt;code&gt;export MY_VAR=42&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;wir definieren Standardwerte&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zunächst setzen wir die Variable und können den Code dann kompilieren, später in diesem Beitrag schauen wir uns auch Standardwerte an.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;MY_VAR&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;br /&gt;$ cargo build&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anschließend können wir das Binary ausführen (hier &lt;code&gt;env-example&lt;/code&gt; gennant)&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./target/debug/env-example&lt;br /&gt;env_macro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;br /&gt;env_fn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Beide Werte sind &lt;code&gt;42&lt;/code&gt;. Jetzt setzen wir die Environment Variable neu:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;MY_VAR&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;br /&gt;$ ./target/debug/env-example&lt;br /&gt;env_macro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;br /&gt;env_fn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aha! &lt;code&gt;env_macro&lt;/code&gt; hat immer noch den Wert, den die Variable zur Kompilierzeit hatte.&lt;/p&gt;
&lt;h3&gt;Variablen zur Kompilierzeit&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cargo&lt;/code&gt; stellt eine &lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates&quot;&gt;Handvoll Umgebungsvariablen&lt;/a&gt; während der Kompilierzeit bereit. Diese Variablen können z.B. benutzt werden um die aktuelle Version aus der &lt;code&gt;Cargo.toml&lt;/code&gt; Datei auszulesen und in unserem Binary zu hinterlegen. Nehmen wir das &lt;code&gt;env-example&lt;/code&gt; script und fügen eine neue Zeile hinzu, die die Aktuelle version aus der &lt;code&gt;Cargo.toml&lt;/code&gt; ausliest.&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; version &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token macro property&quot;&gt;env!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CARGO_PKG_VERSION&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; env_macro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token macro property&quot;&gt;env!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MY_VAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; env_fn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MY_VAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;env-example v{}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; version&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;env_macro = {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; env_macro&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;env_fn = {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; env_fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt;Wir müssen die neue Variable &lt;code&gt;CARGO_PKG_VERSION&lt;/code&gt; &lt;strong&gt;nicht selbst setzen&lt;/strong&gt;. Cargo setzt diese Variable für uns.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Wir kompilieren nun den Code und führen das Binary aus.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cargo build&lt;br /&gt;$ ./target/debug/env-example&lt;br /&gt;env-example v0.1.0&lt;br /&gt;env_macro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;br /&gt;env_fn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Der Wert &lt;code&gt;0.1.0&lt;/code&gt; kommt nun direkt aus der &lt;code&gt;Cargo.toml&lt;/code&gt; Datei! Wir können auch den Namen unseres Programms &lt;code&gt;Cargo.toml&lt;/code&gt; auslesen:&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; version &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token macro property&quot;&gt;env!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CARGO_PKG_VERSION&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token macro property&quot;&gt;env!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CARGO_PKG_NAME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; env_macro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token macro property&quot;&gt;env!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MY_VAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; env_fn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MY_VAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;version: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; version&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;env_macro = {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; env_macro&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;env_fn = {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; env_fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kompilieren und ausführen (&lt;code&gt;-q&lt;/code&gt; unterdrückt die Ausgabe von &lt;code&gt;cargo build&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cargo build -q &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./target/debug/env-example&lt;br /&gt;name: env-example&lt;br /&gt;version: &lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;.0&lt;br /&gt;env_macro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;br /&gt;env_fn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Standardwerte&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::env::var()&lt;/code&gt; bieten Möglichkeiten Standardwerte zu setzen.&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; maybe_fn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MY_VAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unwrap_or&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;maybe_fn = {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; maybe_fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cargo build -q &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./target/debug/env-example&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;env!()&lt;/code&gt; bietet diese Möglichkeit nicht, es muss ein Wert gesetzt sein. Wir Können allerdings eine eigene Fehlermeldung als zweiten Parameter angeben.&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; maybe_macro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token macro property&quot;&gt;env!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MY_VAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bitte MY_VAR setzen, z.B. mit export MY_VAR=21&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;maybe_macro = {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; maybe_macro&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt;&lt;code&gt;cargo run --examples maybe-macro&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Wenn wir den Code ausführen bekommen wir folgenden Fehler:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cargo run --example maybe-macro&lt;br /&gt;   Compiling env-example v0.1.0 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rust-blog-code/env-example&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;error: Bitte MY_VAR setzen, z.B. mit &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;MY_VAR&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;&lt;br /&gt; --&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; examples/maybe-macro.rs:2:23&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;token builtin class-name&quot;&gt;let&lt;/span&gt; maybe_macro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; env&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MY_VAR&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;Bitte MY_VAR setzen, z.B. mit export MY_VAR=21&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt;&lt;code&gt;cargo run --examples maybe-macro&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cargo&lt;/code&gt; stellt Umgebungsvariablen zur Kompilierzeit bereit&lt;/li&gt;
&lt;li&gt;Umgebungsvariablen können mit dem &lt;code&gt;env!()&lt;/code&gt; Makro in unseren Code eingebettet werden&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::env::var()&lt;/code&gt; liest Variablen zur Ausführungszeit aus&lt;/li&gt;
&lt;li&gt;&lt;code&gt;env!()&lt;/code&gt; liest Variablen zur Kompilierzeit&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Weiterführende Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;Cargo Dokumentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/cargo&quot;&gt;Cargo GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/stable/std/env/index.html&quot;&gt;std::env Dokumentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Tagliatelle mit Rote-Beete-Sauce und Feta-Dill Topping</title>
    <link href="https://kevingimbel.de/blog/2020/10/tagliatelle-mit-rote-beete-sauce-und-feta-dill-topping/"/>
    <updated>2020-10-01T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/10/tagliatelle-mit-rote-beete-sauce-und-feta-dill-topping/</id>
    <content type="html">&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/10/tagliatelle-mit-rote-beete-sauce-und-feta-dill-topping/tagliatelle-mit-rote-beete.jpg&quot; alt=&quot;Ein Teller Tagliatelle mit Rote-Beete-Sauce und Feta-Dill Topping. Gehalten in der Hand.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Heute Mittag kochte ich diese Pasta aus quasi nichts. Das Rezept ist super einfach und schnell und ich bin vom Geschmack sehr begeistert!&lt;/p&gt;
&lt;p&gt;Ohne viel auszuholen folgt hier das Rezept.&lt;/p&gt;
&lt;h2&gt;Küchengeräte&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1 Topf&lt;/li&gt;
&lt;li&gt;1 Standmixer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Zutaten&lt;/h2&gt;
&lt;p&gt;Für ca. 2-3 Personen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 Packung Tagliatelle&lt;/li&gt;
&lt;li&gt;2 Packungen Rote-Beete (in Vakuum verpackt), ca. 1kg&lt;/li&gt;
&lt;li&gt;2 Knoblauchzehen&lt;/li&gt;
&lt;li&gt;1 Chili&lt;/li&gt;
&lt;li&gt;etwas Salz&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Für das Topping&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Frischer Dill&lt;/li&gt;
&lt;li&gt;1 Päckchen Feta Käse&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Zubereitung&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Tagliatelle nach Packungsanleitung kochen&lt;/li&gt;
&lt;li&gt;Rote-Beete grob in Würfel schneiden&lt;/li&gt;
&lt;li&gt;Chili waschen, Kerne entfernen wenn weniger schärfe gewünscht&lt;/li&gt;
&lt;li&gt;Knoblauch schälen&lt;/li&gt;
&lt;li&gt;Rote-Beete, Chili, und Knoblauch in den Standmixer geben&lt;/li&gt;
&lt;li&gt;Solange mixen bis eine Sauce entsteht (je nach Gerät ca. 5 Minuten)&lt;/li&gt;
&lt;li&gt;Dill hacken und bereitstellen&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sobald die Tagliatelle fertig sind:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tagliatelle und Sauce vermengen&lt;/li&gt;
&lt;li&gt;Auf Teller portionieren&lt;/li&gt;
&lt;li&gt;Feta obendrauf bröseln&lt;/li&gt;
&lt;li&gt;Dill darüber streuen&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Im Bild oben habe ich die Sauce nicht direkt unter die Nudeln gemischt wodurch alles leider etwas kalt wurde bis es auf den Tisch kam. Das Original Rezept ist von &lt;a href=&quot;https://de.wikipedia.org/wiki/Nadiya_Hussain&quot;&gt;Nadiya Hussain&lt;/a&gt; und kommt in ihrer neusten Kochshow auf Netflix vor; Nachgekocht habe ich es nach meinem Gedächtnis-Protokoll und ich glaube, dass ich irgendwas vergessen habe - lecker war es trotzdem!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>New Settings and options!</title>
    <link href="https://kevingimbel.de/blog/2020/10/new-settings-and-options/"/>
    <updated>2020-10-12T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/10/new-settings-and-options/</id>
    <content type="html">&lt;p&gt;Over the weekend I implemented a new settings section for my website (the one you read right now!). You can now choose the width of content for articles and pages to better suite your reading preference. I like smaller content because it makes it easier for me to read, others like full-width content.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/10/new-settings-and-options/settings-detail.png&quot; alt=&quot;The settings menu with options for color randomness and content width&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Click the &amp;quot;Settings&amp;quot; link in the top right and you&#39;ll be able to configure the randomness of the color schema and the width of content. These settings are persistent and stored in &lt;a href=&quot;https://developer.mozilla.org/de/docs/Web/API/Window/localStorage&quot;&gt;LocalStorage&lt;/a&gt; directly in the browser.&lt;/p&gt;
&lt;p&gt;For the future I want to have an option to increase font sizes and choose color schemes (or individual colors), but the next big thing I want to get done first is a Dark Mode.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Saatenbrot</title>
    <link href="https://kevingimbel.de/blog/2020/10/saatenbrot/"/>
    <updated>2020-10-26T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/10/saatenbrot/</id>
    <content type="html">&lt;p&gt;Ich habe mal wieder gebacken! Diesmal gab es ein Saatenbrot, bestehend aus Weizenmehl, Weizen-Vollkornmehl, etwas Hefe, und Kürbiskernen, Leinsamen, und Sesam.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/10/saatenbrot/teigling-im-gaerkorb.jpg&quot; alt=&quot;Der Teigling in seinem Gärkörbchen&quot; /&gt;&lt;figcaption&gt;Der Teigling in seinem Gärkörbchen&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Ich mag Hefeteig nicht, aber dieses Brot schmeckte mir sehr gut! Die Hefe war sehr dezent und wurde vom Saaten-Mix übertönt.&lt;/p&gt;
&lt;p&gt;Dank der Backtechnik im Gusseisen-Topf war das Brot auch optisch ein Hingucker und sah viel besser aus, als mein &lt;a href=&quot;https://kevingimbel.de/de/blog/2020/09/ich-buk-sauerteig-brot/&quot;&gt;Sauerteig Monster&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;break-left &quot;&gt;&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/10/saatenbrot/fertiges-saatenbrot.jpg&quot; alt=&quot;Das fertige Brot kann sich sehen lassen!&quot; /&gt;&lt;figcaption&gt;Das fertige Brot kann sich sehen lassen!&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Ich bin mir unsicher in wiefern ich Rezepte teilen kann, wenn diese aus einem kommerziellen Kochbuch kommen - das Rezept stammt aus &lt;a href=&quot;https://www.gu.de/produkte/kochen-verwoehnen/backen-und-suessspeisen/brote-ohne-kneten-weber-2017/&quot;&gt;&amp;quot;BROTE OHNE KNETEN&amp;quot;&lt;/a&gt; - das Buch kann ich an dieser Stelle wärmstens Empfehlen kann, wenn man mit dem Brotbacken starten will! Allerdings braucht man dazu auf jeden Fall einen Gusseisen-Topf in dem das Brot im Ofen gebacken wird.&lt;/p&gt;
&lt;p&gt;Ich freue mich schon aufs nächste Brot!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Grep in Action</title>
    <link href="https://kevingimbel.de/blog/2020/11/grep-in-action/"/>
    <updated>2020-11-02T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/11/grep-in-action/</id>
    <content type="html">&lt;p&gt;&lt;code&gt;grep&lt;/code&gt; is a CLI tool created in 1974 that is pre-installed on any Linux/Unix-like/BSD* system. &lt;code&gt;grep&lt;/code&gt; is an acronym and stands for &lt;em&gt;&amp;quot;globally search for a regular expression and print matching lines&amp;quot;&lt;/em&gt; - quite a mouth full but a good description of what &lt;code&gt;grep&lt;/code&gt; does. The more I worked in the Sys-/DevOps domain, the more I found myself using &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; to select parts of files for further processing. In this article I want to highlight some things &lt;code&gt;grep&lt;/code&gt; can do that &lt;em&gt;I didn&#39;t know about but wish I did&lt;/em&gt; when I started using it.&lt;/p&gt;
&lt;h3&gt;1. Grep can open files&lt;/h3&gt;
&lt;p&gt;Contrary to popular believe, you do not need &lt;code&gt;cat file.txt | grep pattern&lt;/code&gt; - &lt;code&gt;grep&lt;/code&gt; can open files just fine!&lt;/p&gt;
&lt;p&gt;A lot of tutorials show &lt;code&gt;grep&lt;/code&gt; reading files opened by &lt;code&gt;cat&lt;/code&gt;. Often times you&#39;ll find code like the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; app.log &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;connection refused&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;cat&lt;/code&gt; command is unnecessary here and can be omitted.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# grep pattern file&lt;/span&gt;&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;connection refused&quot;&lt;/span&gt; app.log&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2. The different grep &amp;quot;variants&amp;quot;&lt;/h3&gt;
&lt;p&gt;There isn&#39;t just grep but variants of it with different purposes. The man page says the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;grep&lt;/strong&gt; is used for simple patterns and basic regular expressions (BREs); &lt;strong&gt;egrep&lt;/strong&gt; can handle extended regular expressions (EREs) &lt;strong&gt;fgrep&lt;/strong&gt; is quicker than both grep and egrep, but can only handle fixed patterns (i.e. it does not interpret regular expressions).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So there is actually &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;egrep&lt;/code&gt; and &lt;code&gt;fgrep&lt;/code&gt;! grep is the &amp;quot;should-work&amp;quot; version that can probably handle most cases, like getting all lines containing the word &lt;code&gt;ERROR&lt;/code&gt; (&lt;code&gt;grep &amp;quot;ERROR&amp;quot; app.log&lt;/code&gt;) or finding lines that start with a specific word (&lt;code&gt;grep &amp;quot;^FATAL&amp;quot; app.log&lt;/code&gt;). &lt;code&gt;egrep&lt;/code&gt; is used for more advanced regular expressions, like finding all lines that contain one or more keywords &lt;code&gt;egrep &amp;quot;(ERROR|WARN|INFO)&amp;quot; app.log&lt;/code&gt; - &lt;code&gt;grep&lt;/code&gt; would only find the literal string &amp;quot;ERROR|WARN|INFO&amp;quot;, egrep will find either &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, or &lt;code&gt;INFO&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fgrep&lt;/code&gt; will find things fast, but doesn&#39;t use any regular expression. It&#39;s best when dealing with large files and no regex is needed, but I&#39;ve never actually used it.&lt;/p&gt;
&lt;h3&gt;3. Only print non-matching lines&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;grep&lt;/code&gt; can show all lines &lt;em&gt;except those matching&lt;/em&gt; the search pattern - so basically the opposite of what it usually does. This mode is enabled with &lt;code&gt;-v&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following example&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;egrep&lt;/span&gt; -v &lt;span class=&quot;token string&quot;&gt;&quot;(INFO|WARN)&quot;&lt;/span&gt; app.log&lt;br /&gt;DEBUG: my_var &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;br /&gt;ERROR: Oh no, my_var &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;4. Follow and filter output of a file with &lt;code&gt;tail&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;tail&lt;/code&gt; is another CLI program that can be used to show lines of a file starting from the end (the opposite of the &lt;code&gt;head&lt;/code&gt; command). For example, &lt;code&gt;head -n 20&lt;/code&gt; shows the last 20 lines of a file. &lt;code&gt;tail&lt;/code&gt; is incredibly useful in debugging running applications because it has an option to follow (&lt;code&gt;-f&lt;/code&gt;) which means it will print out the log file as it is being written.&lt;/p&gt;
&lt;p&gt;What I did not know is that &lt;strong&gt;&lt;code&gt;tail -f&lt;/code&gt; can be combined with &lt;code&gt;grep&lt;/code&gt; to filter the log file the moment it is being written&lt;/strong&gt;!&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# follow the log output and filter for lines containing `Connection refused`&lt;/span&gt;&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;tail&lt;/span&gt; -f app.log &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Connection refused&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;5. Show surrounding lines&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;grep&lt;/code&gt; has two parameters to show surrounding lines: &lt;code&gt;-B&lt;/code&gt; shows lines &lt;strong&gt;B&lt;/strong&gt;efore, &lt;code&gt;-A&lt;/code&gt; shows lines &lt;strong&gt;A&lt;/strong&gt;fter the match.&lt;/p&gt;
&lt;p&gt;To illustrate this, assume we have a file with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hello world, this is
some text to be used
with the grep surrounding
example so we need to fill
a few lines.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we do a grep searching for &lt;code&gt;example&lt;/code&gt; and the two lines above the match, which gives us the following&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; -B &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;example&quot;&lt;/span&gt; example.txt&lt;br /&gt;some text to be used&lt;br /&gt;with the &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; surrounding&lt;br /&gt;example so we need to fill&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-B&lt;/code&gt; and &lt;code&gt;-A&lt;/code&gt; are incredibly useful when we care for the surroundings of a match.&lt;/p&gt;
&lt;p&gt;And that&#39;s it for today! I hope any of the tips above have been helpful.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Die linke Hand der Dunkelheit</title>
    <link href="https://kevingimbel.de/blog/2020/11/die-linke-hand-der-dunkelheit/"/>
    <updated>2020-11-30T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/11/die-linke-hand-der-dunkelheit/</id>
    <content type="html">&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2020/11/die-linke-hand-der-dunkelheit/die-linke-hand-der-dunkelheit-cover.jpg&quot; alt=&quot;Das Buch Die Linke Hand der Dunkelheit gehalten vor einen blau-grünen Muster Hintergrund.&quot; /&gt;&lt;figcaption&gt;Die Linke Hand der Dunkelheit&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;&amp;quot;Die linke Hand der Dunkelheit&amp;quot; von Ursula K. Le Guin war schon eine ganze Weile auf meiner langen Liste der (retro) Sci-Fi Bücher die ich noch lesen möchte. Ich habe es vor einiger Zeit auf Reddit in einer &amp;quot;Must-Read&amp;quot; Liste gesehen und fand den Klappentext sehr ansprechend, Zitat:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Die Bewohner des Planeten Gethen sind uns Menschen verblüffend ähnlich - mit einem Unterschied: Sie kennen keine zwei Geschlechter. Deshalb sind in ihrer Kultur geschlechtsspezifische Machtkämpfe, wie wir sie kennen, nicht möglich. Doch es gibt andere Formen von Macht.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Die Geschichte wird aus Sicht eines &amp;quot;Gesandten&amp;quot; der Ökumene, einem Interplanetaren Verbands aus 84 Welten, erzählt dessen Mission es ist Kontakt mit den Bewohnern von Gethen, durch extreme Kälte auch Winter genannt, herzustellen, sodass diese als 85. Planet der Ökumene beitreten können. Erzählt wird die Geschichte in einer Art Bericht, also einer Art Nacherzählung der Ereignisse. Das erinnerte mich sehr an &amp;quot;&lt;a href=&quot;https://de.wikipedia.org/wiki/Wir_(Roman)&quot;&gt;WIR&lt;/a&gt;&amp;quot; von &lt;a href=&quot;https://de.wikipedia.org/wiki/Jewgeni_Iwanowitsch_Samjatin&quot;&gt;Jewgeni Samjatin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Die große Besonderheit an Winter ist, dass die Menschen dort keine fixen, binären Geschlechter haben. Eine Person ist weder Mann noch Frau, sondern kommt ein Mal im Moment in einen &amp;quot;Kemmer&amp;quot; genannten Zustand. In diesem Zustand - und nur in diesem Zustand! - ist es Bewohnern von Winter möglich Sex zu haben und sich fortzupflanzen. Einer nimmt dabei die biologische Rolle der Frau ein, der andere die Rolle des Mannes. Die &amp;quot;Frau&amp;quot; kann anschließend das Kind gebären und geht danach wieder in den &amp;quot;neutralen&amp;quot; Zustand über. Allein wegen dieses Unterschiedes funktioniert die Gesellschaft auf Winter komplett anders was beim Leser das Denken über Geschlechter und Geschlechterrollen in Gang bring. Das Buch geht an vielen Stellen auf die Unterschiede zwischen Menschen des Planeten Terra (Erde) und des Planeten Winter ein, auch im persönlichen Unbehagen des Gesandten, eines Mannes vom Planeten Erde, der mit seinem Zwei-Geschlechter-Denken immer wieder in Konflikt kommt.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ich empfehlen jedem dieses Buch zu lesen&lt;/strong&gt; und packe es in meine Top 5 der Sci-Fi Bücher die ich gelesen habe. &amp;quot;Die Linke Hand Der Dunkelheit&amp;quot; ist das vierte Buch des lose zusammenhängenden &lt;a href=&quot;https://de.wikipedia.org/wiki/Hainish-Zyklus&quot;&gt;Hainisch-Zyklus&lt;/a&gt; und weil es mich so begeistert hat, habe ich mir direkt noch zwei weitere gekauft: &lt;em&gt;Stadt der Illusionen&lt;/em&gt; und &lt;em&gt;Das Wort für Welt ist Wald&lt;/em&gt;. Da es offenbar nur &amp;quot;Die Linke Hand der Dunkelheit&amp;quot; in einer neueren Version gibt sind die anderen beiden gebraucht und von eBay. Mal sehen ob ich die fehlenden Bücher &lt;em&gt;Rocannons Welt (1977)&lt;/em&gt;, &lt;em&gt;Das zehnte Jahr (1978)&lt;/em&gt;, &lt;em&gt;Planet der Habenichtse ()&lt;/em&gt;, &lt;em&gt;Four Ways to Forgiveness (1995)&lt;/em&gt; (scheinbar nicht auf Deutsch erschienen?), und &lt;em&gt;Die Erzähler (2000)&lt;/em&gt; noch irgendwie bekomme. &lt;em&gt;Planet der Habenichtse&lt;/em&gt; scheint es in einer neueren Fassung unter dem Titel &lt;em&gt;Freie Denker&lt;/em&gt; zu geben - naja, das zusammensuchen ist ja auch Teil des Spaßes, den alte Bücher lesen mit sich bringt. :)&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;rating &quot; role=&quot;img&quot; aria-label=&quot;Rating: 5 of 5&quot;&gt;5/5 &lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;⭐️&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Make a Language</title>
    <link href="https://kevingimbel.de/blog/2020/12/make-a-language/"/>
    <updated>2020-12-02T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/12/make-a-language/</id>
    <content type="html">&lt;p&gt;A blog series about making a language using Rust. I really enjoyed this series which is packed with good patterns and ideas on how to parse text into something meaningful.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>View Logs With Journalctl</title>
    <link href="https://kevingimbel.de/blog/2020/12/view-logs-with-journalctl/"/>
    <updated>2020-12-03T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/12/view-logs-with-journalctl/</id>
    <content type="html">&lt;p&gt;When running any sort of software on a server there&#39;s a high chance you&#39;ll find yourself looking at logs to figure out why something isn&#39;t working. Logs are usually stored in &lt;code&gt;/var/log/&lt;/code&gt; or sometimes in the application root, e.g. &lt;code&gt;/var/www/html/var/logs&lt;/code&gt; or similar for web applications. Finding the right directory for logs can be annoying and tiresome, so today we will look at a another way to view logs on Linux systems: &lt;code&gt;journalctl&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;What is journalctl?&lt;/h2&gt;
&lt;h2&gt;Basic usage&lt;/h2&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/etc/systemd/journalctl.conf&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Additional resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A&lt;/li&gt;
&lt;li&gt;B&lt;/li&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Creating a Snake Clone in Rust</title>
    <link href="https://kevingimbel.de/blog/2020/12/creating-a-snake-clone-in-rust/"/>
    <updated>2020-12-03T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/12/creating-a-snake-clone-in-rust/</id>
    <content type="html">&lt;p&gt;Amazing step-by-step tutorial on how to create a Snake clone using Rust and the Bevy Game Engine. Definitely an article to bookmark!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Apply a patch from a Github PR</title>
    <link href="https://kevingimbel.de/blog/2020/12/apply-a-patch-from-a-github-pr/"/>
    <updated>2020-12-04T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2020/12/apply-a-patch-from-a-github-pr/</id>
    <content type="html">&lt;p&gt;Ever found yourself needing that one fix from a PR on GitHub that hasn&#39;t been released yet? How can you get the code, for example a Magento fix, into your code base? Copy-paste it? That might work for small changes, but for large and complex changes copy-pasting is no solution. Luckily, we can use GitHub to generate a patch file, which can then be applied with either the &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;patch&lt;/code&gt; command.&lt;/p&gt;
&lt;h2&gt;patch-file what?&lt;/h2&gt;
&lt;p&gt;A patch file is a text file containing instructions on how to apply a change to files. If you run &lt;code&gt;git diff&lt;/code&gt; and see the changed files with &lt;code&gt;+/-&lt;/code&gt; in front of lines that were added (&lt;code&gt;+&lt;/code&gt;) or removed (&lt;code&gt;-&lt;/code&gt;) you are looking at a patch file.&lt;/p&gt;
&lt;h2&gt;Example code&lt;/h2&gt;
&lt;p&gt;For illustration purpose I created a example repo: &lt;a href=&quot;https://github.com/KevinGimbel/blog-patch-example&quot;&gt;https://github.com/KevinGimbel/blog-patch-example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can clone the main branch and then apply the patch from the &lt;a href=&quot;https://github.com/KevinGimbel/blog-patch-example/pull/1&quot;&gt;Pull Request&lt;/a&gt; to it, if you want to follow along.&lt;/p&gt;
&lt;h2&gt;Getting the patch file&lt;/h2&gt;
&lt;p&gt;First we will need to get the patch file. GitHub makes this easy, but for some reason hides it from us. You can &lt;strong&gt;append .patch to the URL of any pull request to get the patch file&lt;/strong&gt;. So for the example above, open the URL &lt;a href=&quot;https://github.com/KevinGimbel/blog-patch-example/pull/1.patch&quot;&gt;https://github.com/KevinGimbel/blog-patch-example/pull/1.patch&lt;/a&gt; to see the plain text patch file.&lt;/p&gt;
&lt;pre class=&quot;language-diff&quot;&gt;&lt;code class=&quot;language-diff&quot;&gt;From 6da12536ff4da0efdabdf1a4dd55ded127fa247c Mon Sep 17 00:00:00 2001&lt;br /&gt;From: Kevin Gimbel &amp;lt;hallo@kevingimbel.com&gt;&lt;br /&gt;Date: Fri, 4 Dec 2020 16:31:30 +0100&lt;br /&gt;Subject: [PATCH] docs: add actual URL&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token coord&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;README.md | 2 +-&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;1 file changed, 1 insertion(+), 1 deletion(-)&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;diff --git a/README.md b/README.md&lt;br /&gt;index 0fe5e72..7f6398a 100644&lt;br /&gt;&lt;span class=&quot;token coord&quot;&gt;--- a/README.md&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token coord&quot;&gt;+++ b/README.md&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token coord&quot;&gt;@@ -2,4 +2,4 @@&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;This repo is part of a Blog Post on how to get and apply patch files from GitHub.com&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;You can read the full post here: ENTER_URL_HERE&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;\ No newline at end of file&lt;br /&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;You can read the full post here: [https://kevingimbel.de/blog/2020/12/apply-patch-from-github-pr/](https://kevingimbel.de/blog/2020/12/apply-patch-from-github-pr/)&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;\ No newline at end of file&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The patch file is both human and machine readable. Now to continue, get the patchfile!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open a terminal and navigate to the repo you cloned earlier (&lt;code&gt;github.com/KevinGimbel/blog-patch-example&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Download the patch file with &lt;code&gt;wget&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://github.com/KevinGimbel/blog-patch-example/pull/1.patch&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This downloads a file named &lt;code&gt;1.patch&lt;/code&gt; into the current directory, which we can verify by running &lt;code&gt;ls -l&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -l&lt;br /&gt;total &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;br /&gt;-rw-r--r--@ &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; kevingimbel  staff  &lt;span class=&quot;token number&quot;&gt;733&lt;/span&gt; Dec  &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;:33 &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.patch  &lt;span class=&quot;token comment&quot;&gt;# 👈 there it is&lt;/span&gt;&lt;br /&gt;-rw-r--r--  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; kevingimbel  staff  &lt;span class=&quot;token number&quot;&gt;155&lt;/span&gt; Dec  &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;:33 README.md&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can look at the file if you want to, it contains the same text as the example in this article.&lt;/p&gt;
&lt;h2&gt;Applying a patch with &lt;code&gt;git&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We can use &lt;code&gt;git&lt;/code&gt; to apply the patch. For manual patching git has the &lt;code&gt;apply&lt;/code&gt; command:
If we want to test the changes to see if they can be applied but don&#39;t want to change any files yet, we can use the &lt;code&gt;--check&lt;/code&gt; and &lt;code&gt;-v&lt;/code&gt; (verbose) flag:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git apply -v --check 1.patch
Checking patch README.md...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To really apply the patch, we remove the &lt;code&gt;--check&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; apply -v &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.patch&lt;br /&gt;Checking patch README.md&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;br /&gt;Applied patch README.md cleanly.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now check the &lt;code&gt;README.md&lt;/code&gt; file and you&#39;ll see the new content!&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; README.md &lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# blog-patch-example&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This repo is part of a Blog Post on how to get and apply patch files from GitHub.com&lt;br /&gt;&lt;br /&gt;You can &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; the full post here: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;https://kevingimbel.de/blog/2020/12/apply-patch-from-github-pr/&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;https://kevingimbel.de/blog/2020/12/apply-patch-from-github-pr/&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Patching without git&lt;/h2&gt;
&lt;p&gt;Sometimes you may not have git available, especially when patching software running on some server that - for whatever reasons - has no deployment process (no judging here!) or version control.&lt;/p&gt;
&lt;p&gt;Even without the &lt;code&gt;git&lt;/code&gt; command the patch can still be applied by using the &lt;code&gt;patch&lt;/code&gt; tool installed on most (all?) Linux systems.
To do this, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the patch from the  by appending &lt;code&gt;.patch&lt;/code&gt; to the URL&lt;/li&gt;
&lt;li&gt;Apply the patch with the &lt;code&gt;patch&lt;/code&gt; command&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ patch -p &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; filename.patch&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# To try out changes first, use `--dry-run`&lt;/span&gt;&lt;br /&gt;$ patch -p &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; --dry-run &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; filename.patch&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&#39;s it for today! Feel free to create PRs in the repo &lt;a href=&quot;https://github.com/KevinGimbel/blog-patch-example/&quot;&gt;https://github.com/KevinGimbel/blog-patch-example/&lt;/a&gt; if you want to play around with patching.&lt;/p&gt;
&lt;h2&gt;Additional resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/1/patch&quot;&gt;patch man page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/docs/git-apply&quot;&gt;git apply documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>5 Things Ansible Can Do for You</title>
    <link href="https://kevingimbel.de/blog/2021/01/5-things-ansible-can-do-for-you/"/>
    <updated>2021-01-12T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2021/01/5-things-ansible-can-do-for-you/</id>
    <content type="html">&lt;p&gt;In this post I want to highlight 5 things that Ansible can do you may not know about. When I started with Ansible I was quite overwhelmed by all the new things, and my first custom roles and playbooks weren&#39;t that great (in fact, they were really bad!). It took time to get to a comfortable level and to establish rules in the team at work, and we constantly iterate and improve over our Ansible usage.&lt;/p&gt;
&lt;p&gt;Some code examples for this blog post can be found on GitHub at &lt;a href=&quot;https://github.com/KevinGimbel/blog-ansible-tips&quot;&gt;KevinGimbel/blog-ansible-tips&lt;/a&gt;. Feel free to clone the repo and test things along the way!&lt;/p&gt;
&lt;h2&gt;Ansible can encrypt and decrypt variable files&lt;/h2&gt;
&lt;p&gt;Ansible comes with a command named &lt;code&gt;ansible-vault&lt;/code&gt; that can be used to encrypt and decrypt files! This makes it super easy and secure to commit config files into source control like git.&lt;/p&gt;
&lt;p&gt;To use &lt;code&gt;ansible-vault&lt;/code&gt; we first need a &lt;code&gt;ansible.cfg&lt;/code&gt; configuration file. Chances are you already got one in your playbook, but if you haven&#39;t here&#39;s an example:&lt;/p&gt;
&lt;pre class=&quot;language-ini&quot;&gt;&lt;code class=&quot;language-ini&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;[defaults]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token constant&quot;&gt;vault_password_file&lt;/span&gt; &lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; /some/directory/my.vault.password&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;I removed everything that isn&#39;t relevant from the config file! A config file in your project will likely have more fields&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;By configuring &lt;code&gt;vault_password_file&lt;/code&gt; we tell ansible in which file it can find a password to encrypt and decrypt our files. This file contains only the password, like so:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;fHd0M5wWuYRqstyI7rw4WvwP10xnkvhNLHo3BC2O4bhVuT7hNhtOnfWtjgIySKhzWHNUr3Z6Nn9uU93yDbmqymGXFmUkjGhXCBmCc468rwrQsEg2HMt1h0Pmqj5yVTkN&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this config in place encrypt and decrypt files with the &lt;code&gt;ansible-vault&lt;/code&gt; cli. Assuming we have all secrets in a &lt;code&gt;vault_vars.yml&lt;/code&gt; file inside &lt;code&gt;inventories/production/group_vars/magento2&lt;/code&gt; directory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ansible-vault encrypt inventories/production/group_vars/magento2/vault_vars.yml&lt;/li&gt;
&lt;li&gt;ansible-vault decrypt inventories/production/group_vars/magento2/vault_vars.yml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also view the file without decrypting it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ansible-vault view inventories/production/group_vars/magento2/vault_vars.yml&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt;&lt;strong&gt;Pro tip&lt;/strong&gt;: If you are using a shared cloud drive like Nextcloud, OwnCloud or AWS S3, you can share the vault password files with your team and have them automatically synced into some directory on everyones computer, like &lt;code&gt;~/work/ansible-password/&lt;/code&gt; so everybody can decrypt the files with no additional setup steps.&lt;/p&gt;
&lt;p&gt;Alternatively you can share the password with a traditional password manager but then everybody needs to setup the files first!&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Ansible can run commands against localhost&lt;/h2&gt;
&lt;p&gt;Ansible by default connects via SSH to a remote server and then runs commands through Python, but sometimes we do not need this. If we talk to a API (see below), we may not want to run the code on a server and instead just want to execute code through Ansible. For this the special &lt;code&gt;localhost&lt;/code&gt; host keyword exists!&lt;/p&gt;
&lt;p&gt;Take the following playbook&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; localhost&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;get hostname&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hostname&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; local_name&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;show hostname&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we run this playbook with &lt;code&gt;ansible-playbook tip-2-local.yml&lt;/code&gt; it will not connect to any remote server and just show the host name of the local computer.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ansible-playbook tip-2-local.yml&lt;br /&gt;&lt;br /&gt;PLAY &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;localhost&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; **************************************************************************************************&lt;br /&gt;&lt;br /&gt;TASK &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Gathering Facts&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; ********************************************************************************************&lt;br /&gt;ok: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;localhost&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;TASK &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;get hostname&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; ***********************************************************************************************&lt;br /&gt;changed: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;localhost&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;TASK &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;show hostname&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; **********************************************************************************************&lt;br /&gt;ok: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;localhost&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;kevins-mbp.lan&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;PLAY RECAP ********************************************************************************************************&lt;br /&gt;localhost                  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token assign-left variable&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;token assign-left variable&quot;&gt;unreachable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token assign-left variable&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token assign-left variable&quot;&gt;skipped&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token assign-left variable&quot;&gt;rescued&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token assign-left variable&quot;&gt;ignored&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;   &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Ansible can simulate changes&lt;/h2&gt;
&lt;p&gt;When working on a playbook or deploying a new role for the first time, it can be nice to get an overview of what would change before doing any change at all. For this, Ansible has the &lt;code&gt;--check&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;All tasks will be marked as &amp;quot;skipped&amp;quot; and Ansible will not make any changes at all!&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ansible-playbook --check tip-3-check.yml&lt;br /&gt;&lt;br /&gt;PLAY &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;localhost&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; **************************************************************************************************&lt;br /&gt;&lt;br /&gt;TASK &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Gathering Facts&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; ********************************************************************************************&lt;br /&gt;ok: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;localhost&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;TASK &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;move file&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; **************************************************************************************************&lt;br /&gt;skipping: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;localhost&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;PLAY RECAP ********************************************************************************************************&lt;br /&gt;localhost                  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;token assign-left variable&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token assign-left variable&quot;&gt;unreachable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token assign-left variable&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token assign-left variable&quot;&gt;skipped&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;token assign-left variable&quot;&gt;rescued&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token assign-left variable&quot;&gt;ignored&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;   &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Ansible can run only a subset of tasks&lt;/h2&gt;
&lt;p&gt;Ansible can also run a subset of all tasks. This is especially helpful when the changes do not require a full deployment / check. Think of a Apache role where the user maybe wants to update a virtual host but has no interest in running other tasks such as checking the installed version or enabling modules. In such a case we can use tags on our tasks when writing an ansible role.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;test tags&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;I only run with -t test1&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; test1&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;test tags 2&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;I only run with -t test2&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; test2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we now run ansible-playbook with &lt;code&gt;--tags&lt;/code&gt; or &lt;code&gt;-t&lt;/code&gt; flag only the matching tasks will be executed. If we run &lt;em&gt;without specifying tags&lt;/em&gt;, all tasks will run!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Moving to 11ty</title>
    <link href="https://kevingimbel.de/blog/2021/01/moving-to-11ty/"/>
    <updated>2021-01-24T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2021/01/moving-to-11ty/</id>
    <content type="html">&lt;p&gt;In this article I want to discuss my reasons for moving my personal website and blog (the very site you&#39;re reading right now!) from &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; to &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;11ty&lt;/a&gt;, a static-site generator written in JavaScript. I&#39;ll also highlight some adjustments and configs I needed to make in order to get 11ty working with my existing articles that I&#39;ve used with Hugo, and before that Jekyll, and most importantly, how I ported a ton of custom shortcodes! I will write this article as I move along with the transformation as to capture my experience and thoughts immediately.&lt;/p&gt;
&lt;h2&gt;Why move?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Why move?&amp;quot;&lt;/em&gt; is a valid question because there&#39;s nothing in particular wrong with Hugo - it&#39;s a great static site generator. I&#39;ve started working on a redesign and figured out that it takes a huge amount of time to redesign my relatively small blog. I also found that I&#39;ve also felt a lack of flexibility when it came to hugo and in the last days of creating a new theme the reloading / recompile pipeline was acting up so that I could no longer get the latest versions of CSS or JS in the browser and needed to constantly restart the dev server.&lt;/p&gt;
&lt;p&gt;Another reason for moving and especially a reason for choosing 11ty is the way it can be extended! Adding a new shortcode looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// file: .eleventy.js&lt;/span&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addShortcode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello, &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now in my markdown files I can write &lt;code&gt; {% hello &amp;quot;reader!&amp;quot; %}&lt;/code&gt; and it will print &lt;code&gt;hello, reader!&lt;/code&gt;. And since it&#39;s all JavaScript any sort of script or library can be included! If I have a JavaScript library that encrypts a string I could define a filter or shortcode like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// file: .eleventy.js&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myCryptLib &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;my-crypt-lib&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addShortcode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;encrypt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; myCryptLib&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and now again, the shortcode can be used immediately:&lt;/p&gt;
&lt;pre class=&quot;language-liquid&quot;&gt;&lt;code class=&quot;language-liquid&quot;&gt;{&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; encrypt &quot;super secret string&quot; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;@TODO: Write about https://github.com/11ty/eleventy/issues/1526#issuecomment-731855231&lt;/p&gt;
&lt;p&gt;This is a level of deep integration I simply cannot get from Hugo, and I&#39;m very excited about this feature!&lt;/p&gt;
&lt;h2&gt;Defining collections&lt;/h2&gt;
&lt;p&gt;By default eleventy compiles every markdown file into a page, so for example the README.md file would be compiled into a file at &lt;code&gt;_site/README/index.html&lt;/code&gt;. This is not what I wanted so I looked through the docs and it turns our there&#39;s a special file called &lt;code&gt;.eleventyignore&lt;/code&gt; that can be used to list files that eleventy will ignore - just like a &lt;code&gt;.gitignore&lt;/code&gt; file for git. By default, eleventy ignores &lt;code&gt;node_modules&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;URLs and permalinks&lt;/h2&gt;
&lt;p&gt;For me the most important thing when moving to any new &lt;abbr title=&quot;a tool that creates a HTML website from content and config files&quot;&gt;static site generator&lt;/abbr&gt; is the ability to configure permalinks. I do not want to break all old links and I do not want to create some rewrite or redirect magic. I want to continue using permalinks as I&#39;ve been doing with Hugo.&lt;/p&gt;
&lt;p&gt;I wasn&#39;t able to find a solution in the docs, but found the solution in &lt;a href=&quot;https://hugogiraudel.com/2020/11/30/from-jekyll-to-11ty/#posts-permalinks&quot;&gt;an article on moving to 11ty by Kitty&lt;/a&gt;. They also struggled with the permalink structure and then found out that creating a JSON file named after the collection with configs for permalink and layout is the solution.&lt;/p&gt;
&lt;p&gt;So I placed a &lt;code&gt;_blog.json&lt;/code&gt; file in my &lt;code&gt;_blog&lt;/code&gt; directory (because the collection in eleventy is also called &lt;code&gt;blog&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;layout&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;permalink&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/blog/2021/01/moving-to-11ty/&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In here we can use the filters provided by 11ty like &lt;code&gt;date&lt;/code&gt; to format the date and &lt;code&gt;slug&lt;/code&gt; to turn the post title into a URL. &lt;code&gt;slug&lt;/code&gt; will replace some characters in the &lt;code&gt;title&lt;/code&gt;, for example spaces with dashes (&lt;code&gt;-&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;Static assets&lt;/h2&gt;
&lt;p&gt;Next up is static assets. The first that comes to my mind is CSS and JS files.&lt;/p&gt;
&lt;p&gt;@TODO: Finish this section!&lt;/p&gt;
&lt;h2&gt;Filters&lt;/h2&gt;
&lt;p&gt;I added a few filters. Filters can be used like &lt;code&gt;{{ post.url | myFilter }}&lt;/code&gt;. The most important one is &lt;code&gt;slugify&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;slugify&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;slugify&lt;/code&gt; uses the &lt;a href=&quot;https://www.npmjs.com/package/@sindresorhus/slugify&quot;&gt;@sindresorhus/slugify&lt;/a&gt; module. To include it into 11ty, I added it in &lt;code&gt;.eleventy.js&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addFilter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;slugify&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;slugify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I could use it in my &lt;code&gt;_blog.json&lt;/code&gt; config file:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;layout&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;permalink&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/blog/2021/01/moving-to-11ty/&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Plugins&lt;/h2&gt;
&lt;h3&gt;eleventy-plugin-syntaxhighlight&lt;/h3&gt;
&lt;p&gt;I&#39;m using the &lt;code&gt;@11ty/eleventy-plugin-syntaxhighlight&lt;/code&gt; plugin to add syntax highlighting. The plugin works at build time so no additional JavaScript is required. The plugin is added into the &lt;code&gt;.eleventy.js&lt;/code&gt; config file like so&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; syntaxHighlight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;@11ty/eleventy-plugin-syntaxhighlight&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;syntaxHighlight&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Afterwards I added the Base16-Tomorrow-Night Theme from &lt;a href=&quot;https://atelierbram.github.io/syntax-highlighting/prism/&quot;&gt;https://atelierbram.github.io/syntax-highlighting/prism/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that&#39;s all that was needed to get syntax highlighting going! Here&#39;s some examples:&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Rust code&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello, {}!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Rust&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Go code&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello, go!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// JavaScript&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello, JavaScript!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Prism also allows me to highlight a certain line of code!&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; opts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Cli&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from_args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;mktoc&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;make_toc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;opts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;min_depth&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;max_depth&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; res &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;        &lt;span class=&quot;token class-name&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;new_toc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;            &lt;span class=&quot;token function&quot;&gt;handle_write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;new_toc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;            &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;        &lt;span class=&quot;token class-name&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;            &lt;span class=&quot;token macro property&quot;&gt;eprintln!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Error: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;            &lt;span class=&quot;token namespace&quot;&gt;std&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;m still experimenting with the syntax highlighting and am not yet satisfied with it.&lt;/p&gt;
&lt;h3&gt;@11tyrocks/eleventy-plugin-emoji-readtime&lt;/h3&gt;
&lt;p&gt;The next plugin I&#39;m using is &lt;a href=&quot;https://www.npmjs.com/package/@11tyrocks/eleventy-plugin-emoji-readtime&quot;&gt;@11tyrocks/eleventy-plugin-emoji-readtime&lt;/a&gt; which provides a filter for outputting estimated read times. That&#39;s it, it does this quite well and with a emoji which I like!&lt;/p&gt;
&lt;h3&gt;@11ty/eleventy-img&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.11ty.dev/docs/plugins/image/&quot;&gt;@11ty/eleventy-img&lt;/a&gt; is an official 11ty plugin that can do all sorts of magic things with images!&lt;/p&gt;
&lt;h2&gt;My own plugins&lt;/h2&gt;
&lt;p&gt;While converting some shortcodes and implementing new once, I decided to program them as plugins so they can be shared with everyone! So far I&#39;ve build the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CodePen Embed: &lt;a href=&quot;https://www.npmjs.com/package/@kevingimbel/eleventy-plugin-codepen&quot;&gt;@kevingimbel/eleventy-plugin-codepen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CanIUse.com Embed: &lt;a href=&quot;https://www.npmjs.com/package/@kevingimbel/eleventy-plugin-caniuse&quot;&gt;@kevingimbel/eleventy-plugin-caniuse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emoji Rating: &lt;a href=&quot;https://www.npmjs.com/package/@kevingimbel/eleventy-plugin-emoji-rating&quot;&gt;@kevingimbel/eleventy-plugin-emoji-rating&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All three provide shortcodes which look like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@kevingimbel/eleventy-plugin-codepen&lt;/strong&gt;&lt;/p&gt;
&lt;p data-height=&quot;350&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;iqDIv&quot; data-default-tab=&quot;result&quot; data-user=&quot;Captain Anonymous&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Unknown Pen&quot; data-preview=&quot;true&quot; data-editable=&quot;false&quot; class=&quot;codepen&quot; style=&quot;height: 350px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/Captain%20Anonymous/pen/iqDIv/&quot;&gt;Unknown Pen&lt;/a&gt; on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@kevingimbel/eleventy-plugin-caniuse&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;ciu_embed&quot; data-feature=&quot;css-variables&quot; data-periods=&quot;future_1,current,past_1&quot; data-accessible-colours=&quot;true&quot;&gt;
      &lt;picture&gt;
        &lt;source type=&quot;image/webp&quot; srcset=&quot;https://caniuse.bitsofco.de/image/css-variables.webp&quot; /&gt;
        &lt;source type=&quot;image/png&quot; srcset=&quot;https://caniuse.bitsofco.de/image/css-variables.png&quot; /&gt;
        &lt;img src=&quot;https://caniuse.bitsofco.de/image/css-variables.jpg&quot; alt=&quot;Data on support for the css-variables feature across the major browsers from caniuse.com&quot; /&gt;
      &lt;/picture&gt;
    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@kevingimbel/eleventy-plugin-emoji-rating&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;rating &quot; role=&quot;img&quot; aria-label=&quot;Rating: 3 of 5&quot;&gt;3/5 &lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🍐&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🍐&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🍐&lt;/span&gt;&lt;span class=&quot;rating--icon-inactive&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;&lt;span class=&quot;rating--icon-inactive&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Emojis are configureable both inline and in the &lt;code&gt;.eleventy.js&lt;/code&gt; config file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% rating &amp;quot;5&amp;quot; &amp;quot;🍅&amp;quot; %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;rating &quot; role=&quot;img&quot; aria-label=&quot;Rating: 5 of 5&quot;&gt;5/5 &lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🍅&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🍅&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🍅&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🍅&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🍅&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The max rating is configurable as well!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% rating &amp;quot;5&amp;quot; 🤔&amp;quot; &amp;quot;&amp;quot; &amp;quot;7&amp;quot; %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;rating &quot; role=&quot;img&quot; aria-label=&quot;Rating: 5 of 7&quot;&gt;5/7 &lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🤔&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🤔&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🤔&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🤔&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🤔&lt;/span&gt;&lt;span class=&quot;rating--icon-inactive&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;&lt;span class=&quot;rating--icon-inactive&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As third argument an inactive emoji can be specified.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% rating &amp;quot;5&amp;quot; &amp;quot;😍&amp;quot; &amp;quot;😵&amp;quot; &amp;quot;7&amp;quot; %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;rating &quot; role=&quot;img&quot; aria-label=&quot;Rating: 5 of 7&quot;&gt;5/7 &lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;😍&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;😍&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;😍&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;😍&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;😍&lt;/span&gt;&lt;span class=&quot;rating--icon-inactive&quot; aria-hidden=&quot;true&quot;&gt;😵&lt;/span&gt;&lt;span class=&quot;rating--icon-inactive&quot; aria-hidden=&quot;true&quot;&gt;😵&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Helpful links&lt;/h2&gt;
&lt;p&gt;These resources helped me get started with 11ty, and in planning my new website design.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/11ty/eleventy/issues/1284#issuecomment-648749730&quot;&gt;List blog posts by year&lt;/a&gt; from GitHub Issues&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/5t3ph/eleventy-plugin-template&quot;&gt;Eleventy Plugin Template&lt;/a&gt; by &lt;a href=&quot;https://github.com/5t3ph&quot;&gt;Stephanie Eckles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://daverupert.com/2021/01/art-direction-for-static-sites/&quot;&gt;Art Direction for static sites&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/davatron5000&quot;&gt;Dave Rupert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://11ty.rocks/posts/create-your-first-basic-11ty-website/&quot;&gt;Create your first 11ty website&lt;/a&gt; from &lt;a href=&quot;https://kevingimbel.de/blog/2021/01/moving-to-11ty/11ty.rocks&quot;&gt;11ty.rocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>This week on the internetz</title>
    <link href="https://kevingimbel.de/blog/2021/01/this-week-on-the-internetz/"/>
    <updated>2021-01-29T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2021/01/this-week-on-the-internetz/</id>
    <content type="html">&lt;p&gt;Hello and welcome to the first ever &lt;em&gt;&amp;quot;&lt;a href=&quot;https://kevingimbel.de/tags/this-week-on-the-internetz&quot;&gt;This week on the internetz&lt;/a&gt;&amp;quot;&lt;/em&gt;, a place where I collect articles I&#39;ve read and stuff I&#39;ve found on the internet this past week.&lt;/p&gt;
&lt;h2&gt;Web Dev&lt;/h2&gt;
&lt;blockquote class=&quot;quotefm&quot;&gt;&lt;a href=&quot;https://daverupert.com/2021/01/art-direction-for-static-sites/&quot; class=&quot;db&quot;&gt;&lt;span class=&quot;quotefm__content&quot;&gt;&lt;span class=&quot;quote-lvl1&quot;&gt;&lt;span class=&quot;quote-lvl2&quot;&gt;&lt;span class=&quot;quote-lvl3&quot;&gt;“
Your personal site is your playground. Overhearing some recent chatter about putting the personality back in personal websites, I thought it might be helpful to share how I’ve been approaching art direction on my blog. I have a bit of experience here, in fact years ago during the heyday of “blogazines”, I forked and maintained an art direction plug-in for WordPress.
”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;cite class=&quot;quotefm__source&quot;&gt;via &lt;a href=&quot;https://daverupert.com/2021/01/art-direction-for-static-sites/&quot;&gt;daverupert.com&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://daverupert.com/&quot;&gt;Dave Rupert&lt;/a&gt; shares his take on art direction for the web and how he build his blog/website to allow for per-page customization. This article was a eye-opener for me and I&#39;m trying to adopt more art direction for my own blog going forward!&lt;/p&gt;
&lt;h2&gt;InfoSec&lt;/h2&gt;
&lt;blockquote class=&quot;quotefm&quot;&gt;&lt;a href=&quot;https://www.bleepingcomputer.com/news/security/europol-emotet-malware-will-uninstall-itself-on-march-25th/&quot; class=&quot;db&quot;&gt;&lt;span class=&quot;quotefm__content&quot;&gt;&lt;span class=&quot;quote-lvl1&quot;&gt;&lt;span class=&quot;quote-lvl2&quot;&gt;&lt;span class=&quot;quote-lvl3&quot;&gt;“
According to milkream, Emotet is now using the following command and control server IP, all located in Germany. [...] In a phone call with Europol&#39;s press office, BleepingComputer was told that the German Bundeskriminalamt (BKA) federal police agency was responsible for this action. The press office, though, did not know the date that law enforcement would uninstall the malware.
”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;cite class=&quot;quotefm__source&quot;&gt;via &lt;a href=&quot;https://www.bleepingcomputer.com/news/security/europol-emotet-malware-will-uninstall-itself-on-march-25th/&quot;&gt;www.bleepingcomputer.com&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt;An effort lead by Europol has taken over the &lt;a href=&quot;https://en.wikipedia.org/wiki/Emotet&quot; title=&quot;Emotet Wikipedia article&quot;&gt;Emotet&lt;/a&gt; maleware command servers. The German Bundeskriminalamt is sending an uninstall command on March 25th, effectively automatically uninstalling Emotet from all affected systems.&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote class=&quot;quotefm&quot;&gt;&lt;a href=&quot;https://stackoverflow.blog/2021/01/25/a-deeper-dive-into-our-may-2019-security-incident/&quot; class=&quot;db&quot;&gt;&lt;span class=&quot;quotefm__content&quot;&gt;&lt;span class=&quot;quote-lvl1&quot;&gt;&lt;span class=&quot;quote-lvl2&quot;&gt;&lt;span class=&quot;quote-lvl3&quot;&gt;“
Using the account identifier that had been escalated, we were able to use the IP address and other identifying information to correlate traffic to a candidate set of rows. This amounted to well over 75,000 rows of data that we then set out to categorise. Based upon that categorisation, we were able to further filter out rows to those that were deemed “interesting.” Coupled with other information from our customer support team and various other sources of log data, we came up with a timeline of events. 
”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;cite class=&quot;quotefm__source&quot;&gt;via &lt;a href=&quot;https://stackoverflow.blog/2021/01/25/a-deeper-dive-into-our-may-2019-security-incident/&quot;&gt;stackoverflow.blog&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt;StackOverflow has released a detailed report of a 2019 security incident. They were able to trace the activity of the hacker and could see they were actively search Stack Exchange websites for information as they found out more about the StackOverflow infrastructure.&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote class=&quot;quotefm&quot;&gt;&lt;a href=&quot;https://blog.google/threat-analysis-group/new-campaign-targeting-security-researchers/&quot; class=&quot;db&quot;&gt;&lt;span class=&quot;quotefm__content&quot;&gt;&lt;span class=&quot;quote-lvl1&quot;&gt;&lt;span class=&quot;quote-lvl2&quot;&gt;&lt;span class=&quot;quote-lvl3&quot;&gt;“
In addition to targeting users via social engineering, we have also observed several cases where researchers have been compromised after visiting the actors’ blog. In each of these cases, the researchers have followed a link on Twitter to a write-up hosted on [redacted], and shortly thereafter, a malicious service was installed on the researcher’s system and an in-memory backdoor would begin beaconing to an actor-owned command and control server.
”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;cite class=&quot;quotefm__source&quot;&gt;via &lt;a href=&quot;https://blog.google/threat-analysis-group/new-campaign-targeting-security-researchers/&quot;&gt;blog.google&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt;Google&#39;s Threat Analysis Group claims to have identified a North Korean government backed hacking campaign targeting security researchers. What stands out for me personally is that it seems the compromise happened while visiting the hackers blog. A reminder that &lt;strong&gt;no browser is 100% secure and we should all be careful&lt;/strong&gt;!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Anything else&lt;/h2&gt;
&lt;h3&gt;Dogecoin ($DOGE)&lt;/h3&gt;
&lt;p&gt;After Reddit users &lt;a href=&quot;https://www.theguardian.com/business/2021/jan/27/gamestop-stocks-us-hedge-fund-pulls-out-after-heavy-losses?CMP=Share_iOSApp_Other&quot;&gt;sky-rocketed the GameStop Stock&lt;/a&gt; the next big thing is investing in Dogecoin, a sort of meme cryptocurrency. It looks promising and is super cheap right now, so I invested a bit as well. Let&#39;s see where this is going! For historical purpose, here&#39;s a screenshot of the Dogecoin price, taken from &lt;a href=&quot;https://www.bitpanda.com/en/prices/dogecoin&quot;&gt;bitpanda.com&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2021/01/this-week-on-the-internetz/dogecoin-stonks.png&quot; alt=&quot;Price for 1 Dogecoin ($DOGE) as of 29. January 2021, 13:37&quot; /&gt;&lt;figcaption&gt;Price for 1 Dogecoin ($DOGE) as of 29. January 2021, 13:37&lt;/figcaption&gt;&lt;/figure&gt;</content>
  </entry>
  
  <entry>
    <title>Sea of Thieves</title>
    <link href="https://kevingimbel.de/blog/2021/02/sea-of-thieves/"/>
    <updated>2021-02-01T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2021/02/sea-of-thieves/</id>
    <content type="html">&lt;p&gt;While unloading some &lt;s&gt;stolen goods&lt;/s&gt; cargo in Sea of Thieves, two random guys came swimming from the open sea shouting &amp;quot;Don&#39;t shoot, don&#39;t shoot&amp;quot;, then entered our ship, and started drinking and dancing. After a few minutes of us dancing together, they entered the canons and shot themselves off into the sea.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Learning Rust: Traits</title>
    <link href="https://kevingimbel.de/blog/2021/02/learning-rust-traits/"/>
    <updated>2021-02-03T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2021/02/learning-rust-traits/</id>
    <content type="html">&lt;p&gt;Traits can be confusing. In essence, Traits are similar to interfaces in other programming languages, but a lot more flexible. A Trait defines one or more functions that can be implemented for custom structs. The Rust core language provides a lot of traits and some of them can even be automatically implemented using the &lt;code&gt;#[derive]&lt;/code&gt; feature. You probably have written &lt;code&gt;#[derive(Debug)]&lt;/code&gt; in the past when creating structs - &lt;strong&gt;this&lt;/strong&gt; is a Trait which was automatically implemented. In this article we look deeper into the &lt;code&gt;From&lt;/code&gt; trait to understand how Traits are implemented.&lt;/p&gt;
&lt;p&gt;To get started, let&#39;s  define a struct named &lt;code&gt;Paragraph&lt;/code&gt; which will represent a paragraph of text.&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Debug)]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token type-definition class-name&quot;&gt;Paragraph&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    content&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    content_length&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    explicit&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To construct a paragraph we write the following&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Paragraph&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Paragraph&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        content&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;You may have seen that we need to specify the length and the explicit value. This can be a bit awkward when constructing new paragraphs!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        content_length&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;136&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        explicit&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;dbg!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may have seen that we need to specify the length and the explicit value. This can be a bit awkward when constructing new paragraphs! What if we could just use a function to do all that, like &lt;code&gt;Paragraph::from(&amp;quot;&amp;quot;)&lt;/code&gt;? That&#39;s the &lt;code&gt;From&lt;/code&gt; trait! We&#39;ll first implement it for &lt;code&gt;&amp;amp;str&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Paragraph&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Paragraph&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            content&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            content_length&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            explicit&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s it! Now we can construct a &lt;code&gt;Paragraph&lt;/code&gt; from a &lt;code&gt;&amp;amp;str&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Paragraph&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Paragraph&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        content&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;You may have seen that we need to specify the length and the explicit value. This can be a bit awkward when constructing new paragraphs!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        content_length&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;136&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        explicit&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;dbg!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Paragraph&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Paragraph&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;You may have seen that we need to specify the length and the explicit value. This can be a bit awkward when constructing new paragraphs!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token macro property&quot;&gt;dbg!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cargo run&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;src/main.rs:25&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Paragraph &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    content: &lt;span class=&quot;token string&quot;&gt;&quot;You may have seen that we need to specify the length and the explicit value. This can be a bit awkward when constructing new paragraphs!&quot;&lt;/span&gt;,&lt;br /&gt;    content_length: &lt;span class=&quot;token number&quot;&gt;135&lt;/span&gt;,&lt;br /&gt;    explicit: false,&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;src/main.rs:28&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Paragraph &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    content: &lt;span class=&quot;token string&quot;&gt;&quot;You may have seen that we need to specify the length and the explicit value. This can be a bit awkward when constructing new paragraphs!&quot;&lt;/span&gt;,&lt;br /&gt;    content_length: &lt;span class=&quot;token number&quot;&gt;136&lt;/span&gt;,&lt;br /&gt;    explicit: false,&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Three songs</title>
    <link href="https://kevingimbel.de/blog/2021/02/three-songs/"/>
    <updated>2021-02-04T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2021/02/three-songs/</id>
    <content type="html">&lt;p&gt;Here&#39;s three songs that get me through the day.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://open.spotify.com/track/2k58ZnbykfhiidQiAS5Kh0?si=kyu3gAVhRqeEFa9dCKC0kg&quot;&gt;John B - Get Stuffed&lt;/a&gt; (Drum n&#39; Bass)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=rPIJk0MKSWM&quot;&gt;Lana Del Rey - Heart-Shaped Box&lt;/a&gt; (Live, Nirvana Cover)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://open.spotify.com/track/134IgRBV74jw5R5pYysYk9?si=x4o-y38hRfeakbJlQzz5-w&quot;&gt;The Armed - Night City Aliens&lt;/a&gt; (Cyberpunk 2077 Soundtrack)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>This week on the internetz</title>
    <link href="https://kevingimbel.de/blog/2021/02/this-week-on-the-internetz/"/>
    <updated>2021-02-06T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2021/02/this-week-on-the-internetz/</id>
    <content type="html">&lt;p&gt;Another week and another not-so-weekly &amp;quot;This week on the internetz&amp;quot;!&lt;/p&gt;
&lt;h2&gt;Tech&lt;/h2&gt;
&lt;blockquote class=&quot;quotefm&quot;&gt;&lt;a href=&quot;https://www.theguardian.com/info/2021/jan/26/how-we-made-typerighter-the-guardians-style-guide-checker&quot; class=&quot;db&quot;&gt;&lt;span class=&quot;quotefm__content&quot;&gt;&lt;span class=&quot;quote-lvl1&quot;&gt;&lt;span class=&quot;quote-lvl2&quot;&gt;&lt;span class=&quot;quote-lvl3&quot;&gt;“
Led across the office by our product manager David Blishen, we peered over Max’s shoulder at the litany of corrections his regexes had picked up. There were lots. Somebody asked Max how many rules he’d written. “Oh”, he said. “About 13,000.”
”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;cite class=&quot;quotefm__source&quot;&gt;via &lt;a href=&quot;https://www.theguardian.com/info/2021/jan/26/how-we-made-typerighter-the-guardians-style-guide-checker&quot;&gt;www.theguardian.com&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt;The Guardian details how they implemented &amp;quot;&lt;a href=&quot;https://github.com/guardian/typerighter&quot;&gt;Typerighter&lt;/a&gt;&amp;quot; a tool to enforce writing rules. The tool is open source and has a plugin for &lt;a href=&quot;https://prosemirror.net/&quot;&gt;prosemirror&lt;/a&gt;, the web-based editor The Guardian is using.&lt;/p&gt;
&lt;h2&gt;Everything else&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I discovered the great &lt;a href=&quot;https://mxb.dev/blogroll/&quot;&gt;Blogroll&lt;/a&gt; by Max Böck (&lt;a href=&quot;https://twitter.com/mxbck&quot;&gt;@mxbck&lt;/a&gt;). Been some time since I&#39;ve seen one and I&#39;m in for it!&lt;/li&gt;
&lt;li&gt;Also from Max, I discovered &lt;a href=&quot;https://whimsical.club/&quot;&gt;The Whimsical Club&lt;/a&gt;, a website collecting fun personal websites that don&#39;t take themselves too serious. There&#39;s some good and creative stuff in there!&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>The Electric State</title>
    <link href="https://kevingimbel.de/blog/2021/02/the-electric-state/"/>
    <updated>2021-02-06T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2021/02/the-electric-state/</id>
    <content type="html">&lt;figure&gt;&lt;img src=&quot;https://kevingimbel.de/blog/2021/02/the-electric-state/the-electric-state.jpg&quot; alt=&quot;The Electric State held in hand in front of a book shelve&quot; /&gt;&lt;figcaption&gt;The Electric State held in hand in front of a book shelve&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;I just finished reading &amp;quot;The Electric State&amp;quot; by Simon Stålenhag and I think it is the first graphic novel I&#39;ve ever read. I really liked the mood and the writing style. It&#39;s not that long, 143 pages with about half of them being beautifully eery images of a dystopian USA.&lt;/p&gt;
&lt;p&gt;The images mixed with the short texts on each page tell the story of a young women and a robot traveling together through a almost post-apocalyptic landscape, slowly unraveling hat happened to the world and to the protagonist.&lt;/p&gt;
&lt;p&gt;I won&#39;t spoil the story of course. I can recommend the book and I&#39;m looking forward to read the other two graphic novels by Simon Stålenhag: &lt;em&gt;Tales from the Loop&lt;/em&gt; and &lt;em&gt;Things from the Flood&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;rating &quot; role=&quot;img&quot; aria-label=&quot;Rating: 4 of 5&quot;&gt;4/5 &lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🤖&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🤖&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🤖&lt;/span&gt;&lt;span class=&quot;rating--icon&quot; aria-hidden=&quot;true&quot;&gt;🤖&lt;/span&gt;&lt;span class=&quot;rating--icon-inactive&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Wildcards in Prometheus queries</title>
    <link href="https://kevingimbel.de/blog/2021/02/wildcards-in-prometheus-queries/"/>
    <updated>2021-02-09T00:00:00Z</updated>
    <id>https://kevingimbel.de/blog/2021/02/wildcards-in-prometheus-queries/</id>
    <content type="html">&lt;p&gt;Hello and welcome to this &amp;quot;snippet-sized&amp;quot; post about &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt; queries! Prometheus is a time-series database which means it is build to collect a lot of datasets that show values over time, for example the result of a HTTP request or the RAM usage of a server. At &lt;a href=&quot;https://synoa.de/&quot;&gt;Synoa&lt;/a&gt; we use Prometheus to monitor the health of our APIs and systems. I won&#39;t go into how Prometheus is setup, that&#39;s stuff for a different article, but instead this article focuses on &lt;em&gt;how to query data with wildcards in Prometheus&lt;/em&gt;, using Prometheus own query language.&lt;/p&gt;
&lt;p&gt;First we need to define a bit of test data. Assume we have the following datasets in Prometheus:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http_status{job=&amp;quot;customer-dev&amp;quot;,instance=&amp;quot;https://dev.some-api.link/service-a&amp;quot;,env=&amp;quot;dev&amp;quot;}
http_status{job=&amp;quot;customer-dev&amp;quot;,instance=&amp;quot;https://dev.some-api.link/service-b&amp;quot;,env=&amp;quot;dev&amp;quot;}
http_status{job=&amp;quot;customer-dev&amp;quot;,instance=&amp;quot;https://dev.some-api.link/service-c&amp;quot;,env=&amp;quot;dev&amp;quot;}
http_status{job=&amp;quot;customer-prd&amp;quot;,instance=&amp;quot;https://some-api.link/service-a&amp;quot;,env=&amp;quot;prd&amp;quot;}
http_status{job=&amp;quot;customer-prd&amp;quot;,instance=&amp;quot;https://some-api.link/service-b&amp;quot;,env=&amp;quot;prd&amp;quot;}
http_status{job=&amp;quot;customer-prd&amp;quot;,instance=&amp;quot;https://some-api.link/service-c&amp;quot;,env=&amp;quot;prd&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have 6 datasets describing &lt;code&gt;service-a&lt;/code&gt;, &lt;code&gt;service-b&lt;/code&gt;, and &lt;code&gt;service-c&lt;/code&gt; running in the PRD (production) and DEV (development) environment. To get all production services we could query like this:&lt;/p&gt;
&lt;p&gt;Prometheus Query&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http_status{env=&amp;quot;prd&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http_status{job=&amp;quot;customer-prd&amp;quot;,instance=&amp;quot;https://some-api.link/service-a&amp;quot;,env=&amp;quot;prd&amp;quot;}
http_status{job=&amp;quot;customer-prd&amp;quot;,instance=&amp;quot;https://some-api.link/service-b&amp;quot;,env=&amp;quot;prd&amp;quot;}
http_status{job=&amp;quot;customer-prd&amp;quot;,instance=&amp;quot;https://some-api.link/service-c&amp;quot;,env=&amp;quot;prd&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Wildcards in queries&lt;/h2&gt;
&lt;p&gt;Coming from MySQL you may think a wildcard could look like &lt;code&gt;http_status{job=&amp;quot;customer-*&amp;quot;}&lt;/code&gt;, but that&#39;s not the case with Prometheus. Prometheus uses a Regex-like pattern and the wildcard character is &lt;code&gt;.+&lt;/code&gt; (read: dot plus) combined with tilde character (&lt;code&gt;~&lt;/code&gt;) instead of just the equal sign (&lt;code&gt;=&lt;/code&gt;). So the query becomes  &lt;code&gt;http_status{job~=&amp;quot;customer-.+&amp;quot;}&lt;/code&gt;. In the example below using the &lt;code&gt;.+&lt;/code&gt; wildcard character we search for metrics where the &lt;code&gt;instance&lt;/code&gt; label &lt;em&gt;ends with service-c&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;Prometheus uses the tilde character &lt;code&gt;~&lt;/code&gt; to indicate a query contains a wildcard. Inside the label-query the &amp;quot;dot plus&amp;quot; (&lt;code&gt;.+&lt;/code&gt;) character combination is used where all characters are accepted.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Prometheus Query&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http_status{instance=~&amp;quot;.+service-c&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http_status{job=&amp;quot;customer-dev&amp;quot;,instance=&amp;quot;https://dev.some-api.link/service-c&amp;quot;,env=&amp;quot;dev&amp;quot;}
http_status{job=&amp;quot;customer-prd&amp;quot;,instance=&amp;quot;https://some-api.link/service-c&amp;quot;,env=&amp;quot;prd&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on how your metrics are labels querying can be hard or easy. At Synoa I decided to include special labels like &lt;code&gt;env&lt;/code&gt;, &lt;code&gt;system&lt;/code&gt;, as well as &amp;quot;good&amp;quot; &lt;code&gt;job&lt;/code&gt; names. The &lt;code&gt;job&lt;/code&gt; label always has the format &lt;code&gt;customer-env-system&lt;/code&gt;, e.g. &lt;code&gt;customer-prd-magento&lt;/code&gt; or &lt;code&gt;customer-env-ecs&lt;/code&gt;. If I want to get all customer metrics I query like &lt;code&gt;http_status{job=&amp;quot;customer-.+&amp;quot;}&lt;/code&gt;, if I want to see all dev system metrics I can query for &lt;code&gt;http_status{job=&amp;quot;customer-dev-.+&amp;quot;}&lt;/code&gt;, and so on!&lt;/p&gt;
&lt;p&gt;If you got a better label system or a &lt;strong&gt;must-have label&lt;/strong&gt; let me know &lt;a href=&quot;https://twitter.com/KevinGimbel&quot;&gt;on Twitter @KevinGimbel&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/querying/basics/&quot;&gt;Prometheus Query documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>